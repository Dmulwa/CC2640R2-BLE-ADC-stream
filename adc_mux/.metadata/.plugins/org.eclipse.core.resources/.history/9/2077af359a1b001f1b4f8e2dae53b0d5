               .deffile adi_defs__0.asm
               .deffile ddi_defs__0.asm
               .deffile reg_defs__0.asm
               .deffile sce_defs__0.asm

               ; Number of supported tasks
               .define TASK_COUNT      1

               ; Resource-specified definitions, if any
               ; (None)


               .segment begin "Framework"


               VectorTable:
0000 ---- 1408                         jsr         PowerUp
0001 ---- 040c                         jmp         TaskCtrlReqVector
0002 ---- 1408                         jsr         PowerUp
0003 ---- 042c                         jmp         AonRtcCh2Vector
0004 ---- 1408                         jsr         PowerUp
0005 ---- 0447                         jmp         Event0Vector
0006 ---- 1408                         jsr         PowerUp
0007 ---- 044d                         jmp         TaskAlertAckVector




               PowerUp:
                                       ; Deassert the power-down request
0008 ---- 4436                         iobclr      #0, [#IOP_WUC_PWRDWNREQ]

                                       ; Wait for it to take effect
0009 ---- 2437 /waitForPdAck:          iobtst      #0, [#IOP_WUC_PWRDWNACK]
000a ---- aefe                         biob1       /waitForPdAck

               FwEmptyFunc:            ; Done
000b ---- adb7                         rts




               TaskCtrlReqVector:
                                       ; Clear the vector flag
000c ---- 6442                         iobset      #0, [#IOP_EVCTL_VECFLAGSCLR]

                                       ; For each task ...
000d ---- 7000                         ld          R7, #0
               /loop:
                                           ; Save the task ID
000e ---- 7c6b                             st          R7, [#fwCtrlInt/taskId]

                                           ; Handle initialize request, if any
000f ---- 6872                             ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
0010 ---- 0068                             ld          R0, #pFwTaskInitializeFuncTable
0011 ---- 1425                             jsr         /handleReq

                                           ; Handle execute request, if any
0012 ---- 6873                             ld          R6, [#fwCtrlExt/bvTaskExecuteReq]
0013 ---- 0069                             ld          R0, #pFwTaskExecuteFuncTable
0014 ---- 1425                             jsr         /handleReq

                                           ; Handle terminate request, if any
0015 ---- 6874                             ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0016 ---- 006a                             ld          R0, #pFwTaskTerminateFuncTable
0017 ---- 1425                             jsr         /handleReq

                                           ; Move on to the next task
0018 ---- 786b                             ld          R7, [#fwCtrlInt/taskId]
0019 ---- f801                             add         R7, #1

001a ---- fa01                         cmp         R7, #TASK_COUNT
001b ---- bef2                         bneq        /loop

                                       ; Update which tasks are ...
001c ---- 7870                         ld          R7, [#fwCtrlExt/bvActiveTasks]
                                       ; ... currently active ...
001d ---- 6872                         ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
001e ---- fd0e                         or          R7, R6
                                       ; ... and inactive ...
001f ---- 6874                         ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0020 ---- ed92                         inv         R6
0021 ---- fd06                         and         R7, R6
0022 ---- 7c70                         st          R7, [#fwCtrlExt/bvActiveTasks]

                                       ; We're READY for another request
0023 ---- 642d                         iobset      #IOB_EVCTL_SWEV_READY, [#IOP_EVCTL_SWEVSET]

                                       ; Generate an ALERT interrupt if needed before powering back down
0024 ---- 0450                         jmp         GenAlertInterrupt;

               /handleReq:
                                       ; Restore the task ID, and load the function pointer (here to avoid pipeline hazard)
0025 ---- 786b                         ld          R7, [#fwCtrlInt/taskId]
0026 ---- 8f1f                         ld          R0, [R7+R0]

                                       ; Skip this request?
0027 ---- ed8f                         lsr         R6, R7
0028 ---- ec01                         tst         R6, #0x0001
0029 ---- be01                         bnz         /noSkip
002a ---- adb7                             rts
               /noSkip:
                                       ; Make the call by jump, with return (rts) in the "called" function
002b ---- 8db7                         jmp         R0




               AonRtcCh2Vector:
                                       ; Start clearing the RTC event
002c ---- 6630                         iobset      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVCLR]

                                       ; Clear the vector flag
002d ---- 6542                         iobset      #1, [#IOP_EVCTL_VECFLAGSCLR]

                                       ; For each task (R0 is the current task ID) ...
002e ---- 0000                         ld          R0, #0
               /loop:
                                           ; ... that is active ...
002f ---- 1870                             ld          R1, [#fwCtrlExt/bvActiveTasks]
0030 ---- 9d88                             lsr         R1, R0
0031 ---- 9c01                             tst         R1, #0x0001
0032 ---- b60d                             bz          /skip

                                               ; Fetch number of RTC intervals until next execution
0033 ---- 1067                                 ld          R1, #pFwTaskExecuteScheduleTable
0034 ---- af19                                 ld          R2, [R1+R0]

                                               ; If not already 0, decrement and store. If then 0 ...
0035 ---- aa00                                 cmp         R2, #0
0036 ---- b609                                 beq         /skip
0037 ---- a8ff                                 add         R2, #-1
0038 ---- af39                                 st          R2, [R1+R0]
0039 ---- be06                                 bnz         /skip

                                                   ; ... execute the task
003a ---- 0c6b                                     st          R0, [#fwCtrlInt/taskId]
003b ---- 8869                                     add         R0, #pFwTaskExecuteFuncTable
003c ---- 8f08                                     ld          R0, [R0]
                                                   ; Insert NOP to avoid pipeline hazard
003d ---- fd47                                     nop
003e ---- 9db7                                     jsr         R0
003f ---- 086b                                     ld          R0, [#fwCtrlInt/taskId]
               /skip:
                                           ; Move on to the next task
0040 ---- 8801                             add         R0, #1

0041 ---- 8a01                         cmp         R0, #TASK_COUNT
0042 ---- beec                         bneq        /loop

                                       ; Wait for the ACK event to be cleared
0043 ---- 262f /waitOnRtcClearing:     iobtst      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVFLAGS]
0044 ---- aefe                         biob1       /waitOnRtcClearing
0045 ---- 4630                         iobclr      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVCLR]

                                       ; Generate an ALERT interrupt if needed
0046 ---- 0450                         jmp         GenAlertInterrupt;




               Event0Vector:
                                       ; Disable and clear the vector flag
0047 ---- 5527                         iobclr      #IOB_EVCTL_VECCFG1_VEC2_EN, [#IOP_EVCTL_VECCFG1]
0048 ---- 6642                         iobset      #2, [#IOP_EVCTL_VECFLAGSCLR]

                                       ; Set the task ID
0049 ---- 0000                         ld          R0, #0
004a ---- 0c6b                         st          R0, [#fwCtrlInt/taskId]

                                       ; Jump to the event task code
004b ---- 140b                         jsr         FwEmptyFunc

                                       ; Generate an ALERT interrupt if needed
004c ---- 0450                         jmp         GenAlertInterrupt;




               TaskAlertAckVector:
                                       ; Clear the vector flag
004d ---- 6742                         iobset      #3, [#IOP_EVCTL_VECFLAGSCLR]

                                       ; Re-enable generation of ALERT interrupts
004e ---- 03ff                         ld          R0, #-1
004f ---- 0c6d                         st          R0, [#fwCtrlInt/alertGenMask]

                                       ; Fall through to GenAlertInterrupt to generate another ALERT interrupt if needed




               GenAlertInterrupt:
                                       ; Do we have any ALERT-generating flags pending?
0050 ---- 786c                         ld          R7, [#fwCtrlInt/bvTaskIoAlert]

                                       ; Skip if the last I/O ALERT interrupt has not been acknowledged
0051 ---- 686d                         ld          R6, [#fwCtrlInt/alertGenMask]
0052 ---- ed37                         tst         R6, R7
0053 ---- b605                         bz          /skipAlertGen

                                           ; Transfer I/O flags from internal to external
0054 ---- 0000                             ld          R0, #0
0055 ---- 0c6c                             st          R0, [#fwCtrlInt/bvTaskIoAlert]
0056 ---- 7c71                             st          R7, [#fwCtrlExt/bvTaskIoAlert]

                                           ; Generate the ALERT interrupt, and clear the generation mask
0057 ---- 652d                             iobset      #IOB_EVCTL_SWEV_ALERT, [#IOP_EVCTL_SWEVSET]
0058 ---- 0c6d                             st          R0, [#fwCtrlInt/alertGenMask]
               /skipAlertGen:
                                       ; Fall through to PowerDown ...




               PowerDown:
                                       ; If there are no unacknowledged ALERTs and no vectors pending ...
0059 ---- 786d                         ld          R7, [#fwCtrlInt/alertGenMask]
005a ---- 686e                         ld          R6, [#fwCtrlInt/alertCanPdAuxMask]
005b ---- fd0e                         or          R7, R6
005c ---- f801                         add         R7, #1 ; 0xFFFF -> 0x0000
005d ---- e92b                         in          R6, [#IOP_EVCTL_VECFLAGS]
005e ---- fd0e                         or          R7, R6
005f ---- be01                         bnz         /noPowerDown

                                           ; Assert the power-down request. We'll make sure that it has taken effect
                                           ; or been completely ignored when waking up again
0060 ---- 6436                             iobset      #0, [#IOP_WUC_PWRDWNREQ]
               /noPowerDown:
                                       ; Sleep until the next event
0061 ---- bdb7 sleepInstr:             sleep




0062 ---- 241a AdiDdiAcquire:          iobtst      #0, [#IOP_SMPH_SMPH0]
0063 ---- a6fe                         biob0       AdiDdiAcquire
0064 ---- adb7                         rts

0065 ---- 641a AdiDdiRelease:          iobset      #0, [#IOP_SMPH_SMPH0]
0066 ---- adb7                         rts




               ; RTC ticks until next execution, one word for each task
               pFwTaskExecuteScheduleTable:
0067 ---- 0000                         dw          #0

               ; Task code function pointers for each task code block, one word for each task
               pFwTaskInitializeFuncTable:
0068 ---- 008e                         dw          #adcLevelTrigger/initialize
               pFwTaskExecuteFuncTable:
0069 ---- 009f                         dw          #adcLevelTrigger/execute
               pFwTaskTerminateFuncTable:
006a ---- 023b                         dw          #adcLevelTrigger/terminate

               ; Run-time logging log requests and masks, one bit for each struct, one word for each task
               pRtlTaskLogReqTable:
               ; (Run-time logging is not used in this project)
               pRtlTaskLogMaskTable:
               ; (Run-time logging is not used in this project)


               ; Internal control data
               fwCtrlInt:
006b ---- 0000 /taskId:                dw          #0      ; ID of the currently running task
006c ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
006d ---- ffff /alertGenMask:          dw          #0xFFFF ; Can generate an ALERT interrupt now? (0xFFFF = yes, 0x0000 = no)
006e ---- 0000 /alertCanPdAuxMask:     dw          #0x0000 ; Can power down AUX domain after ALERT interrupt generation? (0xFFFF = yes, 0x0000 = no)
006f ---- 0000 /rtlStructLockReq:      dw          #0x0000 ; Run-time logging struct lock request (0=idle -> 1=requested -> 2=ready -> access -> 0=idle)

               ; External control data, shared with the driver
               fwCtrlExt:
0070 ---- 0000 /bvActiveTasks:         dw          #0x0000 ; Indicates which tasks are currently active
0071 ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
0072 ---- 0000 /bvTaskInitializeReq:   dw          #0x0000 ; Requests tasks to start
0073 ---- 0000 /bvTaskExecuteReq:      dw          #0x0000 ; Requests tasks to execute once immediately
0074 ---- 0000 /bvTaskTerminateReq:    dw          #0x0000 ; Requests tasks to stop


               .segment end "Framework"


               fwTaskDataStructures:
               .segment begin "Task: adc level trigger"
               adcLevelTrigger/cfg:
               adcLevelTrigger/input:
               adcLevelTrigger/output:
               adcLevelTrigger/output/adcBuffer:
0075 ---- 0000                         dw          #0
0076 ---- 0000                         dw          #0
0077 ---- 0000                         dw          #0
0078 ---- 0000                         dw          #0
0079 ---- 0000                         dw          #0
007a ---- 0000                         dw          #0
007b ---- 0000                         dw          #0
007c ---- 0000                         dw          #0
               adcLevelTrigger/output/adcVal0:
007d ---- 0000                         dw          #0
               adcLevelTrigger/output/adcVal1:
007e ---- 0000                         dw          #0
               adcLevelTrigger/output/adcVal2:
007f ---- 0000                         dw          #0
               adcLevelTrigger/output/adcVal3:
0080 ---- 0000                         dw          #0
               adcLevelTrigger/output/adcVal4:
0081 ---- 0000                         dw          #0
               adcLevelTrigger/output/adcVal5:
0082 ---- 0000                         dw          #0
               adcLevelTrigger/output/adcVal6:
0083 ---- 0000                         dw          #0
               adcLevelTrigger/output/adcVal7:
0084 ---- 0000                         dw          #0
               adcLevelTrigger/output/adcValues:
0085 ---- 0000                         dw          #0
0086 ---- 0000                         dw          #0
0087 ---- 0000                         dw          #0
0088 ---- 0000                         dw          #0
0089 ---- 0000                         dw          #0
008a ---- 0000                         dw          #0
008b ---- 0000                         dw          #0
008c ---- 0000                         dw          #0
               adcLevelTrigger/state:
               adcLevelTrigger/state/high:
008d ---- 0000                         dw          #0
               .segment end "Task: adc level trigger"


               .segment begin "Task: adc level trigger"
               adcLevelTrigger/initialize:
               ;? // Select ADC input
               ;? output.adcVal0 =0;
008e ---- 0000                         ld          R0, #0
008f ---- 0c7d                         st          R0, [#adcLevelTrigger/output/adcVal0]
               ;? output.adcVal1 =0;
0090 ---- 0000                         ld          R0, #0
0091 ---- 0c7e                         st          R0, [#adcLevelTrigger/output/adcVal1]
               ;? output.adcVal2 =0;
0092 ---- 0000                         ld          R0, #0
0093 ---- 0c7f                         st          R0, [#adcLevelTrigger/output/adcVal2]
               ;? output.adcVal3 =0;
0094 ---- 0000                         ld          R0, #0
0095 ---- 0c80                         st          R0, [#adcLevelTrigger/output/adcVal3]
               ;? output.adcVal4 =0;
0096 ---- 0000                         ld          R0, #0
0097 ---- 0c81                         st          R0, [#adcLevelTrigger/output/adcVal4]
               ;? output.adcVal5 =0;
0098 ---- 0000                         ld          R0, #0
0099 ---- 0c82                         st          R0, [#adcLevelTrigger/output/adcVal5]
               ;? output.adcVal6 =0;
009a ---- 0000                         ld          R0, #0
009b ---- 0c83                         st          R0, [#adcLevelTrigger/output/adcVal6]
               ;? output.adcVal7 =0;
009c ---- 0000                         ld          R0, #0
009d ---- 0c84                         st          R0, [#adcLevelTrigger/output/adcVal7]
               ;?
               ;? // Schedule the first execution
               ;? //fwScheduleTask(1);
               adcLevelTrigger/initializeDone:
009e ---- adb7                         rts




               adcLevelTrigger/execute:
               ;? // Enable the ADC
               ;? fwDelayUs(850, FW_DELAY_RANGE_1_MS);
009f ---- 70a0                         ld          R7, #(((850 * 24 ) + ((1 << 7) - 1)) >> 7)
00a0 ---- 6007                         ld          R6, #7
00a1 ---- 163c                         jsr         FwDelay
               ;?
               ;? adcEnableSync(ADC_REF_FIXED, ADC_SAMPLE_TIME_10P9_MS, ADC_TRIGGER_MANUAL);
00a2 ---- f502                         loop        #128, /id0140
00a3 ---- fd47                         nop
00a4 ---- fd47                         nop
00a5 ---- fd47                         nop
               /id0140:
00a6 ---- 7001                         ld          R7, #((0 | (((15 < 6) & (!0)) * ADI16_ADCREF_REF_ON_IDLE)) | ADI16_ADCREF_EN)
00a7 ---- 1462                         jsr         AdiDdiAcquire
00a8 ---- fb4d                         out         R7, [#IOP_ADISET_ADCREF]
00a9 8609 7101                         ld          R7, #((9 << IOB_ANAIF_ADCCTL_START_SRC) | 0x0001)
00ab ---- 6431                         iobset      #IOB_WUC_ADCCLKCTL_REQ, [#IOP_WUC_ADCCLKCTL]
               /id0141:
00ac ---- 2531                         iobtst      #IOB_WUC_ADCCLKCTL_ACK, [#IOP_WUC_ADCCLKCTL]
00ad ---- a6fe                         biob0       /id0141
00ae ---- fb00                         out         R7, [#IOP_ANAIF_ADCCTL]
00af ---- 7078                         ld          R7, #BV_ADI16_ADC_SMPL_CYCLE_EXP
00b0 ---- fb54                         out         R7, [#IOP_ADICLR_ADC]
00b1 ---- 7078                         ld          R7, #(15 << BI_ADI16_ADC_SMPL_CYCLE_EXP)
00b2 ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
00b3 ---- 7003                         ld          R7, #(ADI16_ADC_EN | ADI16_ADC_RESET_N)
00b4 ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
00b5 ---- fd47                         nop
00b6 ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
00b7 ---- 1465                         jsr         AdiDdiRelease
               ;?
               ;? adcSelectGpioInput(AUXIO_A_ADC_INPUT0);
00b8 ---- 7007                         ld          R7, #7
00b9 ---- 1642                         jsr         AdccompbSelectGpioInput
               ;? // Sample the analog sensor
               ;?
               ;? for(U16 n=0;n<SAMPLE_COUNT;n++){
00ba ---- 0000                         ld          R0, #0
               /id0155:
               ;?     adcGenManualTrigger();
00bb ---- 6403                             iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;?     adcReadFifo(output.adcValues[n]);
00bc ---- 101f                             ld          R1, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
00bd ---- 9b2c                             out         R1, [#IOP_EVCTL_SCEWEVSEL]
00be ---- fdb1                             wev1        #WEVSEL_PROG
00bf ---- 9902                             in          R1, [#IOP_ANAIF_ADCFIFO]
00c0 ---- 2085                             ld          R2, #(adcLevelTrigger/output/adcValues + 0)
00c1 ---- 9f3a                             st          R1, [R2+R0]
               ;?     output.adcVal0 +=output.adcValues[n];
00c2 ---- 1085                             ld          R1, #(adcLevelTrigger/output/adcValues + 0)
00c3 ---- af19                             ld          R2, [R1+R0]
00c4 ---- 187d                             ld          R1, [#adcLevelTrigger/output/adcVal0]
00c5 ---- 9d22                             add         R1, R2
00c6 ---- 1c7d                             st          R1, [#adcLevelTrigger/output/adcVal0]
               ;? }
00c7 ---- 8801                         add         R0, #1
00c8 ---- 8a08                         cmp         R0, #8
00c9 ---- aef1                         bltu        /id0155
               ;? //average by dividing by 8
               ;? output.adcVal0 >>=3;
00ca ---- 087d                         ld          R0, [#adcLevelTrigger/output/adcVal0]
00cb ---- 8dab                         lsr         R0, #3
00cc ---- 0c7d                         st          R0, [#adcLevelTrigger/output/adcVal0]
               ;? adcFlushFifo();
00cd ---- 6500                         iobset      #1, [#IOP_ANAIF_ADCCTL]
00ce ---- 4500                         iobclr      #1, [#IOP_ANAIF_ADCCTL]
               ;? // Disable the ADC
               ;? adcDisable();
00cf ---- 164f                         jsr         AdcDisable
               ;?
               ;? // Enable the ADC
               ;? fwDelayUs(850, FW_DELAY_RANGE_1_MS);
00d0 ---- 70a0                         ld          R7, #(((850 * 24 ) + ((1 << 7) - 1)) >> 7)
00d1 ---- 6007                         ld          R6, #7
00d2 ---- 163c                         jsr         FwDelay
               ;?
               ;? adcEnableSync(ADC_REF_FIXED, ADC_SAMPLE_TIME_10P9_MS, ADC_TRIGGER_MANUAL);
00d3 ---- f502                         loop        #128, /id0161
00d4 ---- fd47                         nop
00d5 ---- fd47                         nop
00d6 ---- fd47                         nop
               /id0161:
00d7 ---- 7001                         ld          R7, #((0 | (((15 < 6) & (!0)) * ADI16_ADCREF_REF_ON_IDLE)) | ADI16_ADCREF_EN)
00d8 ---- 1462                         jsr         AdiDdiAcquire
00d9 ---- fb4d                         out         R7, [#IOP_ADISET_ADCREF]
00da 8609 7101                         ld          R7, #((9 << IOB_ANAIF_ADCCTL_START_SRC) | 0x0001)
00dc ---- 6431                         iobset      #IOB_WUC_ADCCLKCTL_REQ, [#IOP_WUC_ADCCLKCTL]
               /id0162:
00dd ---- 2531                         iobtst      #IOB_WUC_ADCCLKCTL_ACK, [#IOP_WUC_ADCCLKCTL]
00de ---- a6fe                         biob0       /id0162
00df ---- fb00                         out         R7, [#IOP_ANAIF_ADCCTL]
00e0 ---- 7078                         ld          R7, #BV_ADI16_ADC_SMPL_CYCLE_EXP
00e1 ---- fb54                         out         R7, [#IOP_ADICLR_ADC]
00e2 ---- 7078                         ld          R7, #(15 << BI_ADI16_ADC_SMPL_CYCLE_EXP)
00e3 ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
00e4 ---- 7003                         ld          R7, #(ADI16_ADC_EN | ADI16_ADC_RESET_N)
00e5 ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
00e6 ---- fd47                         nop
00e7 ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
00e8 ---- 1465                         jsr         AdiDdiRelease
               ;?
               ;? adcSelectGpioInput(AUXIO_A_ADC_INPUT1);
00e9 ---- 7006                         ld          R7, #6
00ea ---- 1642                         jsr         AdccompbSelectGpioInput
               ;? // Sample the analog sensor
               ;?
               ;? for(U16 n=0;n<SAMPLE_COUNT;n++){
00eb ---- 0000                         ld          R0, #0
               /id0176:
               ;?     adcGenManualTrigger();
00ec ---- 6403                             iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;?     adcReadFifo(output.adcValues[n]);
00ed ---- 101f                             ld          R1, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
00ee ---- 9b2c                             out         R1, [#IOP_EVCTL_SCEWEVSEL]
00ef ---- fdb1                             wev1        #WEVSEL_PROG
00f0 ---- 9902                             in          R1, [#IOP_ANAIF_ADCFIFO]
00f1 ---- 2085                             ld          R2, #(adcLevelTrigger/output/adcValues + 0)
00f2 ---- 9f3a                             st          R1, [R2+R0]
               ;?     output.adcVal1 +=output.adcValues[n];
00f3 ---- 1085                             ld          R1, #(adcLevelTrigger/output/adcValues + 0)
00f4 ---- af19                             ld          R2, [R1+R0]
00f5 ---- 187e                             ld          R1, [#adcLevelTrigger/output/adcVal1]
00f6 ---- 9d22                             add         R1, R2
00f7 ---- 1c7e                             st          R1, [#adcLevelTrigger/output/adcVal1]
               ;? }
00f8 ---- 8801                         add         R0, #1
00f9 ---- 8a08                         cmp         R0, #8
00fa ---- aef1                         bltu        /id0176
               ;? //average by dividing by 8
               ;? output.adcVal1 >>=3;
00fb ---- 087e                         ld          R0, [#adcLevelTrigger/output/adcVal1]
00fc ---- 8dab                         lsr         R0, #3
00fd ---- 0c7e                         st          R0, [#adcLevelTrigger/output/adcVal1]
               ;? adcFlushFifo();
00fe ---- 6500                         iobset      #1, [#IOP_ANAIF_ADCCTL]
00ff ---- 4500                         iobclr      #1, [#IOP_ANAIF_ADCCTL]
               ;? // Disable the ADC
               ;? adcDisable();
0100 ---- 164f                         jsr         AdcDisable
               ;?
               ;?
               ;? // Enable the ADC
               ;? fwDelayUs(850, FW_DELAY_RANGE_1_MS);
0101 ---- 70a0                         ld          R7, #(((850 * 24 ) + ((1 << 7) - 1)) >> 7)
0102 ---- 6007                         ld          R6, #7
0103 ---- 163c                         jsr         FwDelay
               ;?
               ;? adcEnableSync(ADC_REF_FIXED, ADC_SAMPLE_TIME_10P9_MS, ADC_TRIGGER_MANUAL);
0104 ---- f502                         loop        #128, /id0182
0105 ---- fd47                         nop
0106 ---- fd47                         nop
0107 ---- fd47                         nop
               /id0182:
0108 ---- 7001                         ld          R7, #((0 | (((15 < 6) & (!0)) * ADI16_ADCREF_REF_ON_IDLE)) | ADI16_ADCREF_EN)
0109 ---- 1462                         jsr         AdiDdiAcquire
010a ---- fb4d                         out         R7, [#IOP_ADISET_ADCREF]
010b 8609 7101                         ld          R7, #((9 << IOB_ANAIF_ADCCTL_START_SRC) | 0x0001)
010d ---- 6431                         iobset      #IOB_WUC_ADCCLKCTL_REQ, [#IOP_WUC_ADCCLKCTL]
               /id0183:
010e ---- 2531                         iobtst      #IOB_WUC_ADCCLKCTL_ACK, [#IOP_WUC_ADCCLKCTL]
010f ---- a6fe                         biob0       /id0183
0110 ---- fb00                         out         R7, [#IOP_ANAIF_ADCCTL]
0111 ---- 7078                         ld          R7, #BV_ADI16_ADC_SMPL_CYCLE_EXP
0112 ---- fb54                         out         R7, [#IOP_ADICLR_ADC]
0113 ---- 7078                         ld          R7, #(15 << BI_ADI16_ADC_SMPL_CYCLE_EXP)
0114 ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
0115 ---- 7003                         ld          R7, #(ADI16_ADC_EN | ADI16_ADC_RESET_N)
0116 ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
0117 ---- fd47                         nop
0118 ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
0119 ---- 1465                         jsr         AdiDdiRelease
               ;?
               ;? adcSelectGpioInput(AUXIO_A_ADC_INPUT2);
011a ---- 7005                         ld          R7, #5
011b ---- 1642                         jsr         AdccompbSelectGpioInput
               ;? // Sample the analog sensor
               ;?
               ;? for(U16 n=0;n<SAMPLE_COUNT;n++){
011c ---- 0000                         ld          R0, #0
               /id0197:
               ;?     adcGenManualTrigger();
011d ---- 6403                             iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;?     adcReadFifo(output.adcValues[n]);
011e ---- 101f                             ld          R1, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
011f ---- 9b2c                             out         R1, [#IOP_EVCTL_SCEWEVSEL]
0120 ---- fdb1                             wev1        #WEVSEL_PROG
0121 ---- 9902                             in          R1, [#IOP_ANAIF_ADCFIFO]
0122 ---- 2085                             ld          R2, #(adcLevelTrigger/output/adcValues + 0)
0123 ---- 9f3a                             st          R1, [R2+R0]
               ;?     output.adcVal2 +=output.adcValues[n];
0124 ---- 1085                             ld          R1, #(adcLevelTrigger/output/adcValues + 0)
0125 ---- af19                             ld          R2, [R1+R0]
0126 ---- 187f                             ld          R1, [#adcLevelTrigger/output/adcVal2]
0127 ---- 9d22                             add         R1, R2
0128 ---- 1c7f                             st          R1, [#adcLevelTrigger/output/adcVal2]
               ;? }
0129 ---- 8801                         add         R0, #1
012a ---- 8a08                         cmp         R0, #8
012b ---- aef1                         bltu        /id0197
               ;? //average by dividing by 8
               ;? output.adcVal2 >>=3;
012c ---- 087f                         ld          R0, [#adcLevelTrigger/output/adcVal2]
012d ---- 8dab                         lsr         R0, #3
012e ---- 0c7f                         st          R0, [#adcLevelTrigger/output/adcVal2]
               ;? adcFlushFifo();
012f ---- 6500                         iobset      #1, [#IOP_ANAIF_ADCCTL]
0130 ---- 4500                         iobclr      #1, [#IOP_ANAIF_ADCCTL]
               ;? // Disable the ADC
               ;? adcDisable();
0131 ---- 164f                         jsr         AdcDisable
               ;?
               ;? // Enable the ADC
               ;? fwDelayUs(850, FW_DELAY_RANGE_1_MS);
0132 ---- 70a0                         ld          R7, #(((850 * 24 ) + ((1 << 7) - 1)) >> 7)
0133 ---- 6007                         ld          R6, #7
0134 ---- 163c                         jsr         FwDelay
               ;?
               ;? adcEnableSync(ADC_REF_FIXED, ADC_SAMPLE_TIME_10P9_MS, ADC_TRIGGER_MANUAL);
0135 ---- f502                         loop        #128, /id0203
0136 ---- fd47                         nop
0137 ---- fd47                         nop
0138 ---- fd47                         nop
               /id0203:
0139 ---- 7001                         ld          R7, #((0 | (((15 < 6) & (!0)) * ADI16_ADCREF_REF_ON_IDLE)) | ADI16_ADCREF_EN)
013a ---- 1462                         jsr         AdiDdiAcquire
013b ---- fb4d                         out         R7, [#IOP_ADISET_ADCREF]
013c 8609 7101                         ld          R7, #((9 << IOB_ANAIF_ADCCTL_START_SRC) | 0x0001)
013e ---- 6431                         iobset      #IOB_WUC_ADCCLKCTL_REQ, [#IOP_WUC_ADCCLKCTL]
               /id0204:
013f ---- 2531                         iobtst      #IOB_WUC_ADCCLKCTL_ACK, [#IOP_WUC_ADCCLKCTL]
0140 ---- a6fe                         biob0       /id0204
0141 ---- fb00                         out         R7, [#IOP_ANAIF_ADCCTL]
0142 ---- 7078                         ld          R7, #BV_ADI16_ADC_SMPL_CYCLE_EXP
0143 ---- fb54                         out         R7, [#IOP_ADICLR_ADC]
0144 ---- 7078                         ld          R7, #(15 << BI_ADI16_ADC_SMPL_CYCLE_EXP)
0145 ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
0146 ---- 7003                         ld          R7, #(ADI16_ADC_EN | ADI16_ADC_RESET_N)
0147 ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
0148 ---- fd47                         nop
0149 ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
014a ---- 1465                         jsr         AdiDdiRelease
               ;?
               ;? adcSelectGpioInput(AUXIO_A_ADC_INPUT3);
014b ---- 7004                         ld          R7, #4
014c ---- 1642                         jsr         AdccompbSelectGpioInput
               ;? // Sample the analog sensor
               ;?
               ;? for(U16 n=0;n<SAMPLE_COUNT;n++){
014d ---- 0000                         ld          R0, #0
               /id0218:
               ;?     adcGenManualTrigger();
014e ---- 6403                             iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;?     adcReadFifo(output.adcValues[n]);
014f ---- 101f                             ld          R1, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
0150 ---- 9b2c                             out         R1, [#IOP_EVCTL_SCEWEVSEL]
0151 ---- fdb1                             wev1        #WEVSEL_PROG
0152 ---- 9902                             in          R1, [#IOP_ANAIF_ADCFIFO]
0153 ---- 2085                             ld          R2, #(adcLevelTrigger/output/adcValues + 0)
0154 ---- 9f3a                             st          R1, [R2+R0]
               ;?     output.adcVal3 +=output.adcValues[n];
0155 ---- 1085                             ld          R1, #(adcLevelTrigger/output/adcValues + 0)
0156 ---- af19                             ld          R2, [R1+R0]
0157 ---- 1880                             ld          R1, [#adcLevelTrigger/output/adcVal3]
0158 ---- 9d22                             add         R1, R2
0159 ---- 1c80                             st          R1, [#adcLevelTrigger/output/adcVal3]
               ;? }
015a ---- 8801                         add         R0, #1
015b ---- 8a08                         cmp         R0, #8
015c ---- aef1                         bltu        /id0218
               ;? //average by dividing by 8
               ;? output.adcVal3 >>=3;
015d ---- 0880                         ld          R0, [#adcLevelTrigger/output/adcVal3]
015e ---- 8dab                         lsr         R0, #3
015f ---- 0c80                         st          R0, [#adcLevelTrigger/output/adcVal3]
               ;? adcFlushFifo();
0160 ---- 6500                         iobset      #1, [#IOP_ANAIF_ADCCTL]
0161 ---- 4500                         iobclr      #1, [#IOP_ANAIF_ADCCTL]
               ;? // Disable the ADC
               ;? adcDisable();
0162 ---- 164f                         jsr         AdcDisable
               ;?
               ;? // Enable the ADC
               ;? fwDelayUs(850, FW_DELAY_RANGE_1_MS);
0163 ---- 70a0                         ld          R7, #(((850 * 24 ) + ((1 << 7) - 1)) >> 7)
0164 ---- 6007                         ld          R6, #7
0165 ---- 163c                         jsr         FwDelay
               ;?
               ;? adcEnableSync(ADC_REF_FIXED, ADC_SAMPLE_TIME_10P9_MS, ADC_TRIGGER_MANUAL);
0166 ---- f502                         loop        #128, /id0224
0167 ---- fd47                         nop
0168 ---- fd47                         nop
0169 ---- fd47                         nop
               /id0224:
016a ---- 7001                         ld          R7, #((0 | (((15 < 6) & (!0)) * ADI16_ADCREF_REF_ON_IDLE)) | ADI16_ADCREF_EN)
016b ---- 1462                         jsr         AdiDdiAcquire
016c ---- fb4d                         out         R7, [#IOP_ADISET_ADCREF]
016d 8609 7101                         ld          R7, #((9 << IOB_ANAIF_ADCCTL_START_SRC) | 0x0001)
016f ---- 6431                         iobset      #IOB_WUC_ADCCLKCTL_REQ, [#IOP_WUC_ADCCLKCTL]
               /id0225:
0170 ---- 2531                         iobtst      #IOB_WUC_ADCCLKCTL_ACK, [#IOP_WUC_ADCCLKCTL]
0171 ---- a6fe                         biob0       /id0225
0172 ---- fb00                         out         R7, [#IOP_ANAIF_ADCCTL]
0173 ---- 7078                         ld          R7, #BV_ADI16_ADC_SMPL_CYCLE_EXP
0174 ---- fb54                         out         R7, [#IOP_ADICLR_ADC]
0175 ---- 7078                         ld          R7, #(15 << BI_ADI16_ADC_SMPL_CYCLE_EXP)
0176 ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
0177 ---- 7003                         ld          R7, #(ADI16_ADC_EN | ADI16_ADC_RESET_N)
0178 ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
0179 ---- fd47                         nop
017a ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
017b ---- 1465                         jsr         AdiDdiRelease
               ;?
               ;? adcSelectGpioInput(AUXIO_A_ADC_INPUT4);
017c ---- 7003                         ld          R7, #3
017d ---- 1642                         jsr         AdccompbSelectGpioInput
               ;? // Sample the analog sensor
               ;?
               ;? for(U16 n=0;n<SAMPLE_COUNT;n++){
017e ---- 0000                         ld          R0, #0
               /id0239:
               ;?     adcGenManualTrigger();
017f ---- 6403                             iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;?     adcReadFifo(output.adcValues[n]);
0180 ---- 101f                             ld          R1, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
0181 ---- 9b2c                             out         R1, [#IOP_EVCTL_SCEWEVSEL]
0182 ---- fdb1                             wev1        #WEVSEL_PROG
0183 ---- 9902                             in          R1, [#IOP_ANAIF_ADCFIFO]
0184 ---- 2085                             ld          R2, #(adcLevelTrigger/output/adcValues + 0)
0185 ---- 9f3a                             st          R1, [R2+R0]
               ;?     output.adcVal4 +=output.adcValues[n];
0186 ---- 1085                             ld          R1, #(adcLevelTrigger/output/adcValues + 0)
0187 ---- af19                             ld          R2, [R1+R0]
0188 ---- 1881                             ld          R1, [#adcLevelTrigger/output/adcVal4]
0189 ---- 9d22                             add         R1, R2
018a ---- 1c81                             st          R1, [#adcLevelTrigger/output/adcVal4]
               ;? }
018b ---- 8801                         add         R0, #1
018c ---- 8a08                         cmp         R0, #8
018d ---- aef1                         bltu        /id0239
               ;? //average by dividing by 8
               ;? output.adcVal0 >>=4;
018e ---- 087d                         ld          R0, [#adcLevelTrigger/output/adcVal0]
018f ---- 8dac                         lsr         R0, #4
0190 ---- 0c7d                         st          R0, [#adcLevelTrigger/output/adcVal0]
               ;? adcFlushFifo();
0191 ---- 6500                         iobset      #1, [#IOP_ANAIF_ADCCTL]
0192 ---- 4500                         iobclr      #1, [#IOP_ANAIF_ADCCTL]
               ;? // Disable the ADC
               ;? adcDisable();
0193 ---- 164f                         jsr         AdcDisable
               ;?
               ;? // Enable the ADC
               ;? fwDelayUs(850, FW_DELAY_RANGE_1_MS);
0194 ---- 70a0                         ld          R7, #(((850 * 24 ) + ((1 << 7) - 1)) >> 7)
0195 ---- 6007                         ld          R6, #7
0196 ---- 163c                         jsr         FwDelay
               ;?
               ;? adcEnableSync(ADC_REF_FIXED, ADC_SAMPLE_TIME_10P9_MS, ADC_TRIGGER_MANUAL);
0197 ---- f502                         loop        #128, /id0245
0198 ---- fd47                         nop
0199 ---- fd47                         nop
019a ---- fd47                         nop
               /id0245:
019b ---- 7001                         ld          R7, #((0 | (((15 < 6) & (!0)) * ADI16_ADCREF_REF_ON_IDLE)) | ADI16_ADCREF_EN)
019c ---- 1462                         jsr         AdiDdiAcquire
019d ---- fb4d                         out         R7, [#IOP_ADISET_ADCREF]
019e 8609 7101                         ld          R7, #((9 << IOB_ANAIF_ADCCTL_START_SRC) | 0x0001)
01a0 ---- 6431                         iobset      #IOB_WUC_ADCCLKCTL_REQ, [#IOP_WUC_ADCCLKCTL]
               /id0246:
01a1 ---- 2531                         iobtst      #IOB_WUC_ADCCLKCTL_ACK, [#IOP_WUC_ADCCLKCTL]
01a2 ---- a6fe                         biob0       /id0246
01a3 ---- fb00                         out         R7, [#IOP_ANAIF_ADCCTL]
01a4 ---- 7078                         ld          R7, #BV_ADI16_ADC_SMPL_CYCLE_EXP
01a5 ---- fb54                         out         R7, [#IOP_ADICLR_ADC]
01a6 ---- 7078                         ld          R7, #(15 << BI_ADI16_ADC_SMPL_CYCLE_EXP)
01a7 ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
01a8 ---- 7003                         ld          R7, #(ADI16_ADC_EN | ADI16_ADC_RESET_N)
01a9 ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
01aa ---- fd47                         nop
01ab ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
01ac ---- 1465                         jsr         AdiDdiRelease
               ;?
               ;? adcSelectGpioInput(AUXIO_A_ADC_INPUT5);
01ad ---- 7002                         ld          R7, #2
01ae ---- 1642                         jsr         AdccompbSelectGpioInput
               ;? // Sample the analog sensor
               ;?
               ;? for(U16 n=0;n<SAMPLE_COUNT;n++){
01af ---- 0000                         ld          R0, #0
               /id0260:
               ;?     adcGenManualTrigger();
01b0 ---- 6403                             iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;?     adcReadFifo(output.adcValues[n]);
01b1 ---- 101f                             ld          R1, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
01b2 ---- 9b2c                             out         R1, [#IOP_EVCTL_SCEWEVSEL]
01b3 ---- fdb1                             wev1        #WEVSEL_PROG
01b4 ---- 9902                             in          R1, [#IOP_ANAIF_ADCFIFO]
01b5 ---- 2085                             ld          R2, #(adcLevelTrigger/output/adcValues + 0)
01b6 ---- 9f3a                             st          R1, [R2+R0]
               ;?     output.adcVal5 +=output.adcValues[n];
01b7 ---- 1085                             ld          R1, #(adcLevelTrigger/output/adcValues + 0)
01b8 ---- af19                             ld          R2, [R1+R0]
01b9 ---- 1882                             ld          R1, [#adcLevelTrigger/output/adcVal5]
01ba ---- 9d22                             add         R1, R2
01bb ---- 1c82                             st          R1, [#adcLevelTrigger/output/adcVal5]
               ;? }
01bc ---- 8801                         add         R0, #1
01bd ---- 8a08                         cmp         R0, #8
01be ---- aef1                         bltu        /id0260
               ;? //average by dividing by 8
               ;? output.adcVal5 >>=3;
01bf ---- 0882                         ld          R0, [#adcLevelTrigger/output/adcVal5]
01c0 ---- 8dab                         lsr         R0, #3
01c1 ---- 0c82                         st          R0, [#adcLevelTrigger/output/adcVal5]
               ;? adcFlushFifo();
01c2 ---- 6500                         iobset      #1, [#IOP_ANAIF_ADCCTL]
01c3 ---- 4500                         iobclr      #1, [#IOP_ANAIF_ADCCTL]
               ;? // Disable the ADC
               ;? adcDisable();
01c4 ---- 164f                         jsr         AdcDisable
               ;?
               ;? // Enable the ADC
               ;? fwDelayUs(850, FW_DELAY_RANGE_1_MS);
01c5 ---- 70a0                         ld          R7, #(((850 * 24 ) + ((1 << 7) - 1)) >> 7)
01c6 ---- 6007                         ld          R6, #7
01c7 ---- 163c                         jsr         FwDelay
               ;?
               ;? adcEnableSync(ADC_REF_FIXED, ADC_SAMPLE_TIME_10P9_MS, ADC_TRIGGER_MANUAL);
01c8 ---- f502                         loop        #128, /id0266
01c9 ---- fd47                         nop
01ca ---- fd47                         nop
01cb ---- fd47                         nop
               /id0266:
01cc ---- 7001                         ld          R7, #((0 | (((15 < 6) & (!0)) * ADI16_ADCREF_REF_ON_IDLE)) | ADI16_ADCREF_EN)
01cd ---- 1462                         jsr         AdiDdiAcquire
01ce ---- fb4d                         out         R7, [#IOP_ADISET_ADCREF]
01cf 8609 7101                         ld          R7, #((9 << IOB_ANAIF_ADCCTL_START_SRC) | 0x0001)
01d1 ---- 6431                         iobset      #IOB_WUC_ADCCLKCTL_REQ, [#IOP_WUC_ADCCLKCTL]
               /id0267:
01d2 ---- 2531                         iobtst      #IOB_WUC_ADCCLKCTL_ACK, [#IOP_WUC_ADCCLKCTL]
01d3 ---- a6fe                         biob0       /id0267
01d4 ---- fb00                         out         R7, [#IOP_ANAIF_ADCCTL]
01d5 ---- 7078                         ld          R7, #BV_ADI16_ADC_SMPL_CYCLE_EXP
01d6 ---- fb54                         out         R7, [#IOP_ADICLR_ADC]
01d7 ---- 7078                         ld          R7, #(15 << BI_ADI16_ADC_SMPL_CYCLE_EXP)
01d8 ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
01d9 ---- 7003                         ld          R7, #(ADI16_ADC_EN | ADI16_ADC_RESET_N)
01da ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
01db ---- fd47                         nop
01dc ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
01dd ---- 1465                         jsr         AdiDdiRelease
               ;?
               ;? adcSelectGpioInput(AUXIO_A_ADC_INPUT6);
01de ---- 7001                         ld          R7, #1
01df ---- 1642                         jsr         AdccompbSelectGpioInput
               ;? // Sample the analog sensor
               ;?
               ;? for(U16 n=0;n<SAMPLE_COUNT;n++){
01e0 ---- 0000                         ld          R0, #0
               /id0281:
               ;?     adcGenManualTrigger();
01e1 ---- 6403                             iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;?     adcReadFifo(output.adcValues[n]);
01e2 ---- 101f                             ld          R1, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
01e3 ---- 9b2c                             out         R1, [#IOP_EVCTL_SCEWEVSEL]
01e4 ---- fdb1                             wev1        #WEVSEL_PROG
01e5 ---- 9902                             in          R1, [#IOP_ANAIF_ADCFIFO]
01e6 ---- 2085                             ld          R2, #(adcLevelTrigger/output/adcValues + 0)
01e7 ---- 9f3a                             st          R1, [R2+R0]
               ;?     output.adcVal6 +=output.adcValues[n];
01e8 ---- 1085                             ld          R1, #(adcLevelTrigger/output/adcValues + 0)
01e9 ---- af19                             ld          R2, [R1+R0]
01ea ---- 1883                             ld          R1, [#adcLevelTrigger/output/adcVal6]
01eb ---- 9d22                             add         R1, R2
01ec ---- 1c83                             st          R1, [#adcLevelTrigger/output/adcVal6]
               ;? }
01ed ---- 8801                         add         R0, #1
01ee ---- 8a08                         cmp         R0, #8
01ef ---- aef1                         bltu        /id0281
               ;? //average by dividing by 8
               ;? output.adcVal6 >>=3;
01f0 ---- 0883                         ld          R0, [#adcLevelTrigger/output/adcVal6]
01f1 ---- 8dab                         lsr         R0, #3
01f2 ---- 0c83                         st          R0, [#adcLevelTrigger/output/adcVal6]
               ;? adcFlushFifo();
01f3 ---- 6500                         iobset      #1, [#IOP_ANAIF_ADCCTL]
01f4 ---- 4500                         iobclr      #1, [#IOP_ANAIF_ADCCTL]
               ;? // Disable the ADC
               ;? adcDisable();
01f5 ---- 164f                         jsr         AdcDisable
               ;?
               ;? // Enable the ADC
               ;? fwDelayUs(850, FW_DELAY_RANGE_1_MS);
01f6 ---- 70a0                         ld          R7, #(((850 * 24 ) + ((1 << 7) - 1)) >> 7)
01f7 ---- 6007                         ld          R6, #7
01f8 ---- 163c                         jsr         FwDelay
               ;?
               ;? adcEnableSync(ADC_REF_FIXED, ADC_SAMPLE_TIME_10P9_MS, ADC_TRIGGER_MANUAL);
01f9 ---- f502                         loop        #128, /id0287
01fa ---- fd47                         nop
01fb ---- fd47                         nop
01fc ---- fd47                         nop
               /id0287:
01fd ---- 7001                         ld          R7, #((0 | (((15 < 6) & (!0)) * ADI16_ADCREF_REF_ON_IDLE)) | ADI16_ADCREF_EN)
01fe ---- 1462                         jsr         AdiDdiAcquire
01ff ---- fb4d                         out         R7, [#IOP_ADISET_ADCREF]
0200 8609 7101                         ld          R7, #((9 << IOB_ANAIF_ADCCTL_START_SRC) | 0x0001)
0202 ---- 6431                         iobset      #IOB_WUC_ADCCLKCTL_REQ, [#IOP_WUC_ADCCLKCTL]
               /id0288:
0203 ---- 2531                         iobtst      #IOB_WUC_ADCCLKCTL_ACK, [#IOP_WUC_ADCCLKCTL]
0204 ---- a6fe                         biob0       /id0288
0205 ---- fb00                         out         R7, [#IOP_ANAIF_ADCCTL]
0206 ---- 7078                         ld          R7, #BV_ADI16_ADC_SMPL_CYCLE_EXP
0207 ---- fb54                         out         R7, [#IOP_ADICLR_ADC]
0208 ---- 7078                         ld          R7, #(15 << BI_ADI16_ADC_SMPL_CYCLE_EXP)
0209 ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
020a ---- 7003                         ld          R7, #(ADI16_ADC_EN | ADI16_ADC_RESET_N)
020b ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
020c ---- fd47                         nop
020d ---- fb4c                         out         R7, [#IOP_ADISET_ADC]
020e ---- 1465                         jsr         AdiDdiRelease
               ;?
               ;? adcSelectGpioInput(AUXIO_A_ADC_INPUT7);
020f ---- 7000                         ld          R7, #0
0210 ---- 1642                         jsr         AdccompbSelectGpioInput
               ;? // Sample the analog sensor
               ;?
               ;? for(U16 n=0;n<SAMPLE_COUNT;n++){
0211 ---- 0000                         ld          R0, #0
               /id0302:
               ;?     adcGenManualTrigger();
0212 ---- 6403                             iobset      #0, [#IOP_ANAIF_ADCTRIG]
               ;?     adcReadFifo(output.adcValues[n]);
0213 ---- 101f                             ld          R1, #EVCTL_SCEEVSEL_ADC_FIFO_NOT_EMPTY
0214 ---- 9b2c                             out         R1, [#IOP_EVCTL_SCEWEVSEL]
0215 ---- fdb1                             wev1        #WEVSEL_PROG
0216 ---- 9902                             in          R1, [#IOP_ANAIF_ADCFIFO]
0217 ---- 2085                             ld          R2, #(adcLevelTrigger/output/adcValues + 0)
0218 ---- 9f3a                             st          R1, [R2+R0]
               ;?     output.adcVal7 +=output.adcValues[n];
0219 ---- 1085                             ld          R1, #(adcLevelTrigger/output/adcValues + 0)
021a ---- af19                             ld          R2, [R1+R0]
021b ---- 1884                             ld          R1, [#adcLevelTrigger/output/adcVal7]
021c ---- 9d22                             add         R1, R2
021d ---- 1c84                             st          R1, [#adcLevelTrigger/output/adcVal7]
               ;? }
021e ---- 8801                         add         R0, #1
021f ---- 8a08                         cmp         R0, #8
0220 ---- aef1                         bltu        /id0302
               ;? //average by dividing by 8
               ;? output.adcVal7 >>=3;
0221 ---- 0884                         ld          R0, [#adcLevelTrigger/output/adcVal7]
0222 ---- 8dab                         lsr         R0, #3
0223 ---- 0c84                         st          R0, [#adcLevelTrigger/output/adcVal7]
               ;? adcFlushFifo();
0224 ---- 6500                         iobset      #1, [#IOP_ANAIF_ADCCTL]
0225 ---- 4500                         iobclr      #1, [#IOP_ANAIF_ADCCTL]
               ;? // Disable the ADC
               ;? adcDisable();
0226 ---- 164f                         jsr         AdcDisable
               ;?
               ;? //store in array buffer
               ;? output.adcBuffer[0] = output.adcVal0;
0227 ---- 087d                         ld          R0, [#adcLevelTrigger/output/adcVal0]
0228 ---- 0c75                         st          R0, [#(adcLevelTrigger/output/adcBuffer + 0)]
               ;? output.adcBuffer[1] = output.adcVal1;
0229 ---- 087e                         ld          R0, [#adcLevelTrigger/output/adcVal1]
022a ---- 0c76                         st          R0, [#(adcLevelTrigger/output/adcBuffer + 1)]
               ;? output.adcBuffer[2] = output.adcVal2;
022b ---- 087f                         ld          R0, [#adcLevelTrigger/output/adcVal2]
022c ---- 0c77                         st          R0, [#(adcLevelTrigger/output/adcBuffer + 2)]
               ;? output.adcBuffer[3] = output.adcVal3;
022d ---- 0880                         ld          R0, [#adcLevelTrigger/output/adcVal3]
022e ---- 0c78                         st          R0, [#(adcLevelTrigger/output/adcBuffer + 3)]
               ;? output.adcBuffer[4] = output.adcVal4;
022f ---- 0881                         ld          R0, [#adcLevelTrigger/output/adcVal4]
0230 ---- 0c79                         st          R0, [#(adcLevelTrigger/output/adcBuffer + 4)]
               ;? output.adcBuffer[5] = output.adcVal5;
0231 ---- 0882                         ld          R0, [#adcLevelTrigger/output/adcVal5]
0232 ---- 0c7a                         st          R0, [#(adcLevelTrigger/output/adcBuffer + 5)]
               ;? output.adcBuffer[6] = output.adcVal6;
0233 ---- 0883                         ld          R0, [#adcLevelTrigger/output/adcVal6]
0234 ---- 0c7b                         st          R0, [#(adcLevelTrigger/output/adcBuffer + 6)]
               ;? output.adcBuffer[7] = output.adcVal7;
0235 ---- 0884                         ld          R0, [#adcLevelTrigger/output/adcVal7]
0236 ---- 0c7c                         st          R0, [#(adcLevelTrigger/output/adcBuffer + 7)]
               ;?
               ;? // Signal the application processor.
               ;? fwGenAlertInterrupt();
0237 ---- 086c                         ld          R0, [#fwCtrlInt/bvTaskIoAlert]
0238 ---- 8201                         or          R0, #(1 << 0)
0239 ---- 0c6c                         st          R0, [#fwCtrlInt/bvTaskIoAlert]
               ;?
               ;?
               adcLevelTrigger/executeDone:
023a ---- adb7                         rts




               adcLevelTrigger/terminate:
               ;?
               adcLevelTrigger/terminateDone:
023b ---- adb7                         rts
               .segment end "Task: adc level trigger"


               .segment begin "Procedure Library"
               ; 3 + 5 CPU cycles = 16 clock cycles = 0.66 microsecond are added to the specified delay (parameter
               ; loading and timer configuration)
               ;
               ; PARAMETERS:
               ;     R7 = Delay
               ;     R6 = Prescaler exponent
               ;
               ; CLOBBERS:
               ;     R6
               FwDelay:
                                       ; Set the delay
023c ---- fb0c                         out         R7, [#IOP_TIMER01_T0TARGET]

                                       ; Configure the timer (from clock, single-mode, prescaler exponent = R6)
023d ---- eda4                         lsl         R6, #4
023e ---- eb09                         out         R6, [#IOP_TIMER01_T0CFG]

                                       ; Start the timer, wait for it to trigger, and stop it
023f ---- 640b                         iobset      #0, [#IOP_TIMER01_T0CTL]
0240 ---- cdb1                         wev1        #WEVSEL_TIMER0
0241 ---- adb7                         rts




               ; PARAMETERS:
               ;     R7 = AUX I/O index (0-7)
               ;
               ; CLOBBERS:
               ;     R6, R7
               AdccompbSelectGpioInput:
                                       ; Make sure that the AUX I/O index is valid
0242 ---- f007                         and         R7, #0x0007

                                       ; Disconnect all signals
0243 ---- 1462                         jsr         AdiDdiAcquire
0244 86ff 63f8                         ld          R6, #(BV_ADI16_MUX2_ADCCOMPB_IN | BV_ADI16_MUX3_ADCCOMPB_IN)
0246 ---- eb51                         out         R6, [#IOP_ADICLR_MUX2_MUX3]

                                       ; Connect the specified GPIO
0247 8680 6000                         ld          R6, #ADI16_MUX3_ADCCOMPB_IN_AUXIO0
0249 ---- ed8f                         lsr         R6, R7
024a ---- eb49                         out         R6, [#IOP_ADISET_MUX2_MUX3]

                                       ; Ensure that it has taken effect
024b ---- fd47                         nop         ; Workaround for back-to-back ADI/DDI accesses
024c ---- eb49                         out         R6, [#IOP_ADISET_MUX2_MUX3]
024d ---- 1465                         jsr         AdiDdiRelease
024e ---- adb7                         rts




               ; CLOBBERS:
               ;     R7
               AdcDisable:
                                       ; Disable the ADC reference
024f ---- 1462                         jsr         AdiDdiAcquire
0250 ---- 7079                         ld          R7, #((ADI16_ADCREF_EN | ADI16_ADCREF_REF_ON_IDLE) | (ADI16_ADCREF_SRC | (ADI16_ADCREF_EXT | ADI16_ADCREF_IOMUX)))
0251 ---- fb55                         out         R7, [#IOP_ADICLR_ADCREF]

                                       ; Assert reset and disable the ADC
0252 ---- 71fb                         ld          R7, #((ADI16_ADC_EN | ADI16_ADC_RESET_N) | (BV_ADI16_ADC_SMPL_CYCLE_EXP | (BV_ADI16_ADC_SMPL_MODE | ADI16_ADC_SCALE_DIS)))
0253 ---- fb54                         out         R7, [#IOP_ADICLR_ADC]

                                       ; Ensure that it has taken effect
0254 ---- fd47                         nop         ; Workaround for back-to-back ADI/DDI accesses
0255 ---- fb54                         out         R7, [#IOP_ADICLR_ADC]
0256 ---- 1465                         jsr         AdiDdiRelease

                                       ; Disable the ADC clock (no need to wait since IOB_WUC_ADCCLKCTL_ACK goes low immediately)
0257 ---- 4431                         iobclr      #IOB_WUC_ADCCLKCTL_REQ, [#IOP_WUC_ADCCLKCTL]

                                       ; Disable the ADC data interface
0258 ---- 4400                         iobclr      #0, [#IOP_ANAIF_ADCCTL]

0259 ---- adb7                         rts
               .segment end "Procedure Library"


; Generated by DESKTOP-2L91N3E at 2024-05-26 06:26:20.714
