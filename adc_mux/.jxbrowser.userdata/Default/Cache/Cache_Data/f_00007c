<!DOCTYPE html><html><head>
    <meta charset="utf-8">
    <meta name="author" content="Max Wennerfeldt">
    <title>Sensor Controller Code Optimization and Custom Procedures</title>
<link rel="stylesheet" href="../../../web_support/strapdown/v/0.2/fonts/ubuntu-regular-woff.css"><link rel="stylesheet" href="../../../web_support/strapdown/v/0.2/fonts/glyphicons-halflings-regular.css"><link rel="stylesheet" href="../../../web_support/strapdown/v/0.2/themes/united2.min.css"><link rel="stylesheet" href="../../../web_support/strapdown/v/0.2/themes/bootstrap-responsive.min.css"><link rel="stylesheet" href="../../../web_support/strapdown/v/0.2/strapdown.css"><link rel="shortcut icon" type="image/x-icon" href="../../../.metadata/favicon.ico"></head>

<!-- START PRE -->






<!-- END PRE -->

<body style=""><div class="container"><nav class="navbar navbar-default navbar-static-top"><div class="container-fluid"> <div class="navbar-header">  <div id="headline" class="navbar-brand">Sensor Controller Code Optimization and Custom Procedures</div> </div> </div></nav><div class="container"><div class="row row-offcanvas row-offcanvas-left"><div class="col-xs-12 col-sm-9" id="content"><h1 class="body-heading" id="introduction">Introduction<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#introduction"></a></h1><p>Working with Sensor Controller Studio (SCS) you (should, by now) have been 
introduced to concepts such as resources and procedures. A resource defines as 
way to interface with a given set of software or hardware functions while a 
procedure is the functions that can be called from the Sensor Controller task 
code. While SCS provide a rich set of resources and procedures to interface with 
the Sensor Controller and the surrounding peripherals, there is sometimes a need
for tailormade procedures in order to make a specific task more efficient. This 
training will show you how to create and add customized resources and procedures 
to SCS.</p>
<p>In the training, a custom <code>Quadrature Decoder</code> resource will be implemented with 
a few custom procedures. We will see how we can improve execution speed using 
tailored procedures compared to implementing the <code>Quadrature Decoder</code> using 
the procedure set that is available from start.</p>
<p>It is highly recommended to first complete the training modules listed under 
<a href="#completed-material">Completed Material</a> before proceeding with this training.
It is also recommended to have a basic knowledge about how to interpret and 
write assembly code given an instruction set. </p>
<p>The training is expected to require roughly 3 hours to complete so consider 
splitting it into multiple sessions.</p>
<div class="bs-callout bs-callout-info "><h4><span class="glyphicon glyphicon-info-sign gi-2x" style="vertical-align: middle; margin-right: 0.2em;"></span><span style="vertical-align: middle;">Compatible SimpleLink MCU LaunchPad kits
</span></h4>
<p>  This workshop can be completed with any one of the SimpleLinkâ„¢
  Wireless MCU with Sensor Controller devices described in the table below.
  Install the associated SimpleLink software development kit matching your 
  device. For more details on LaunchPads please visit the <a href="https://www.ti.com/tools-software/launchpads/launchpads.html">LaunchPad
  overview page</a>.</p>
</div>
<h1 class="body-heading" id="prerequisites">Prerequisites<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#prerequisites"></a></h1><h2 class="body-heading" id="completed-material">Completed Material<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#completed-material"></a></h2><ul>
<li><a href="../sc_01_basic/sc_01_basic.html">Sensor Controller Basics - Getting Started</a></li>
<li><a href="../../rtos/tirtos_basics/tirtos_basics.html">TI-RTOS Basics Lab 1</a></li>
<li><a href="../sc_01_project_from_scratch/sc_01_project_from_scratch.html">Project from Scratch</a></li>
<li><a href="../sc_02_capacitive_sensing_and_runtime_logging/sc_capacitive_sensing_and_runtime_logging.html">Capacitive Touch</a></li>
</ul>
<h2 class="body-heading" id="software-for-desktop-development">Software for Desktop Development<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#software-for-desktop-development"></a></h2><p>In order to start with this training you will need to download the associated
Software Development Kit (SDK) for your LaunchPad.
This training covers the CC13x0, CC13xx, CC2640R2 and the CC26xx device families.</p>
<table class="table table-striped table-bordered">
<thead>
<tr>
<th>Device</th>
<th>SDK downloads</th>
</tr>
</thead>
<tbody>
<tr>
<td>CC13x0</td>
<td><a href="https://www.ti.com/tool/SIMPLELINK-CC13X0-SDK">SimpleLink CC13x0 Software Development Kit</a></td>
</tr>
<tr>
<td>CC2640R2</td>
<td><a href="https://www.ti.com/tool/SIMPLELINK-CC2640R2-SDK">SimpleLink CC2640R2 Software Development Kit</a></td>
</tr>
<tr>
<td>CC13xx/ CC26xx</td>
<td><a href="https://www.ti.com/tool/SIMPLELINK-CC13XX-CC26XX-SDK">SimpleLink CC13xx/ CC26xx Software Development Kit</a></td>
</tr>
</tbody>
</table>
<p>In addition to downloading the relevant SDK for your choice of Launchpad, you 
also need the following software:</p>
<ul>
<li><a href="https://www.ti.com/tool/SENSOR-CONTROLLER-STUDIO">Sensor Controller Studio</a> version 2.7.0 or later</li>
</ul>
<h2 class="body-heading" id="hardware">Hardware<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#hardware"></a></h2><p>One LaunchPad connected with a USB micro cable:</p>
<ul>
<li><a href="https://www.ti.com/tool/LAUNCHXL-CC1310">LAUNCHXL-CC1310</a>,</li>
<li><a href="https://www.ti.com/tool/LAUNCHXL-CC1312R1">LAUNCHXL-CC1312R1</a>,</li>
<li><a href="https://www.ti.com/tool/LAUNCHXL-CC1350">LAUNCHXL-CC1350</a>,</li>
<li><a href="https://www.ti.com/tool/LAUNCHXL-CC1352R1">LAUNCHXL-CC1352R1</a>,</li>
<li><a href="https://www.ti.com/tool/LAUNCHXL-CC1352P">LAUNCHXL-CC1352P</a>,</li>
<li><a href="https://www.ti.com/tool/LAUNCHXL-CC26X2R1">LAUNCHXL-CC26x2R1</a>,
or</li>
<li><a href="https://www.ti.com/tool/LAUNCHXL-CC2640R2">LAUNCHXL-CC2640R2</a>.</li>
</ul>
<h1 class="body-heading" id="getting-started">Getting started<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#getting-started"></a></h1><p>"What is a resource and what is a procedure in the context of Sensor Controller 
Studio?" you might be asking yourself by now. Let us start by explaining what a 
resource is. </p>
<h2 class="body-heading" id="resources">Resources<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#resources"></a></h2><p>A resource is as a gathering of procedures with a common purpose. If you are
familiar with C-language, you can think it as a library of functions. In 
Sensor Controller Studio (SCS), resources are selected in the <code>Task Resources</code> 
panel, controlling which features is made available in a given project. A 
resource typically contains information on:</p>
<ol>
<li>Procedures that will be enabled (available when writing task code) </li>
<li>Resource description and documentation</li>
<li>HW/SW modules, used to check for conflicts between resources both within and across tasks</li>
<li>I/O functions used by the resource</li>
<li>Resource specific constants and data structure members</li>
<li>Resource specific C source code to be included in the generated SCIF driver</li>
</ol>
<p>A basic resource example is the <code>Digital Output Pins</code> resource, which
enables one or more I/O pins with a given configuration:</p>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/scs_resource.png" alt="SCS resource" class="img-responsive"></div><p></p>
<p>By selecting this resource, the following set of procedures available in the 
task code editor:</p>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/scs_procedures.png" alt="SCS procedures" class="img-responsive"></div><p></p>
<p>Selecting the resource also adds 5 new constants to the project but (in this 
case) no data structure members:</p>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/scs_constants.png" alt="SCS constants" class="img-responsive"></div><p></p>
<div class="bs-callout bs-callout-info "><h4><span class="glyphicon glyphicon-info-sign gi-2x" style="vertical-align: middle; margin-right: 0.2em;"></span><span style="vertical-align: middle;">in this case?
</span></h4>
<p>    Not all resources require pre-defined data structure memebers. There is a 
    few standard resources in SCS that adds data structure members such as the 
    I2C Master, UART emulator and LCD controller resources.</p>
</div>
<h2 class="body-heading" id="procedures">Procedures<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#procedures"></a></h2><p>A procedure is the Sensor Controller equivalent of a function in the C 
programming language. Procedures are written in assembly using the Sensor 
Controller Engine instruction set and is always bound to a specific resource. </p>
<div class="bs-callout bs-callout-info "><h4><span class="glyphicon glyphicon-info-sign gi-2x" style="vertical-align: middle; margin-right: 0.2em;"></span><span style="vertical-align: middle;">Hey, where can I find the instruction set?
</span></h4>
<p>    The Sensor Controller instruction set is documented inside both 
    the Sensor Controller Studio help viewer under 
    <code>Assembly Language Reference</code> or in the Sensor Controller chapter of the
    <a href="#technical-reference-manuals">Technical Reference Manual</a>.</p>
</div>
<p>As we will look closer at how resources and procedures are implemented in
practice in the scope of this lab, we will not cover this in more detail right 
now.</p>
<h2 class="body-heading" id="software-setup">Software Setup<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#software-setup"></a></h2><p>Start by installing <a href="https://www.ti.com/tool/SENSOR-CONTROLLER-STUDIO">Sensor Controller Studio</a> and enable all patches. Patches
can be enabled by first clicking <code>Updates</code> â†’ <code>Check for Updates</code>. If any
new patches are available, click <code>Updates</code> â†’ <code>Manage Updates...</code> and
apply all new patches. Note that the picture below is only used as an example.
You may have a newer version, and there may be no patches available.
</p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/scs_patch.png" alt="SCS Patch" class="img-responsive"></div><p></p>
<p>Once SCS is up and running, connect the Launchpad to the computer and open up 
the <code>ADC Window Monitor</code> example. Try to start the "Run-Time Logging" to verify
that SCS and your LaunchPad works as expected before proceeding with the 
training.</p>
<h1 class="body-heading" id="task-1-ndash-create-and-setup-scs-project">Task 1 â€“ Create and Setup SCS Project<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#task-1-ndash-create-and-setup-scs-project"></a></h1><p>We will start with creating a new Sensor Controller project in SCS. To start 
with we only require a simple project with two digital input pins acting as
our <code>Quadrature Decoder</code> input, a debug output pin and run-time logging. 
In case this sounds unfamiliar, please see the 
<a href="../sc_01_project_from_scratch/sc_01_project_from_scratch.html">Project from Scratch</a> training which covers how to 
set up a project from scratch.</p>
<div class="bs-callout bs-callout-info "><h4><span class="glyphicon glyphicon-info-sign gi-2x" style="vertical-align: middle; margin-right: 0.2em;"></span><span style="vertical-align: middle;">SCS Documentation and Help
</span></h4>
<p>  At any time in SCS, <em>Help</em> â€“ <em>Sensor Controller Studio Help</em> or press
  <kbd>F1</kbd> for documentation and help.</p>
</div>
<p>We start with creating the project:</p>
<ul>
<li>Start SCS and open a new project, <em>File</em> â†’ <em>New Project</em> or <kbd>Ctrl+N</kbd>.</li>
<li>Set the <code>Project Name</code> to <code>SimpleLink Quadrature Decoder Training</code>.</li>
<li>Set the <code>Operating system</code> to <code>TI-RTOS</code>.</li>
<li>Set <code>Source code output directory</code> to <code>.</code>.</li>
<li>Set <code>Chip name</code> corresponding to the device in use, e.g.:<ul>
<li><code>CC2640R2F</code> if using CC2640R2F.</li>
<li><code>CC1352R1F3</code> if using CC1352R1.</li>
</ul>
</li>
<li>Set <code>Chip package</code> to <code>QFN48 7x7 RGZ</code>.</li>
<li>Add one task by clicking <code>Add new</code>, name it <code>Quadrature Decoder</code>.</li>
<li>Save the project, <em>File</em> â†’ <em>Save Project</em> or <kbd>Ctrl+S</kbd>.</li>
</ul>
<p>Refer to the screen shot below for the CC1352R LaunchPad.
</p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/scs_project_settings.png" alt="SCS Project Settings" class="img-responsive"></div><p></p>
<p>We now need to specify the resources to be used. Go to <code>Task Properties</code> for the
<code>quadrature decoder</code> task, which can be accessed by clicking on the task name in
the directory on the left hand side, above the <code>Initialization Code</code>. Select
the task resources in the list below.</p>
<ul>
<li><strong>Run-Time Logging</strong></li>
<li><strong>Digital Input Pins</strong><ul>
<li>Create two pins and name them <code>QD_INPUT_A</code> and <code>QD_INPUT_B</code> and configure
them as pull-ups (this as we will later use the LaunchPad buttons as input).
This does not yet include any physical I/O mapping, we will do this in the
upcoming step.</li>
</ul>
</li>
<li><strong>Digital Output Pins</strong><ul>
<li>Create one pin and name it <code>QD_OUTPUT_LED</code>.</li>
</ul>
</li>
<li><strong>RTC-Based Execution Scheduling</strong></li>
</ul>
<p>Make sure the <code>Task resource</code> settings match the screenshot below:
</p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/scs_task_resources.png" alt="Task Resource Settings" class="img-responsive"></div><p></p>
<h2 class="body-heading" id="i-o-mapping">I/O Mapping<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#i-o-mapping"></a></h2><p>Finally, we need to setup the <code>I/O Mapping</code> for our pins. The exact mapping is 
up to you as the reader to decide but the suggestion is to use the LaunchPad
buttons as <code>QD_INPUT_A</code> and <code>QD_INPUT_B</code> as well as one of the LEDs as 
<code>QD_OUTPUT_LED</code>. </p>
<p>For the CC1352R LaunchPad, this would result in a setup along the lines of:</p>
<ul>
<li>Digital input pin <code>QD_INPUT_A</code> to <code>DIO14</code> aka <code>BTN2</code>.</li>
<li>Digital input pin <code>QD_INPUT_B</code> to <code>DIO15</code> aka <code>BTN1</code>.</li>
<li>Digital output pin <code>QD_OUTPUT_LED</code> to <code>DIO6</code> aka <code>RED LED</code>.</li>
</ul>
<p>The pin order can vary. In the <code>I/O Mapping</code> view you can at the top select
which board you are using. For instance, select the <code>CC1352R1 LaunchPad</code> if you
are using a CC1352R1 LaunchPad. </p>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/scs_io_mapping.png" alt="SCS Project Settings" class="img-responsive"></div><p></p>
<div class="bs-callout bs-callout-warning "><h4><span class="glyphicon glyphicon-exclamation-sign gi-2x" style="vertical-align: middle; margin-right: 0.2em;"></span><span style="vertical-align: middle;">Hey, I can't assign the buttons for my LaunchPad!
</span></h4>
<p>    You are likely doing the training on a CC13x0 or CC26x0 LaunchPad device
    where the available set if I/Os is limited. If this is the case, the
    suggestion is to select any two available pins and connect these pins to the
    I/Os connected to the LaunchPad buttons using jumper wires.</p>
</div>
<h1 class="body-heading" id="task-2-ndash-initial-quadrature-decoder-implementation">Task 2 â€“ Initial Quadrature Decoder Implementation<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#task-2-ndash-initial-quadrature-decoder-implementation"></a></h1><p>Before looking into the actual implementation, we will quickly touch on what
a quadrature decoder is and what we will try to implement in software. We will 
only cover what is important for this training without going into to much detail. </p>
<h2 class="body-heading" id="quadrature-encoded-signals">Quadrature Encoded Signals<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#quadrature-encoded-signals"></a></h2><p>Quadrature encoded signals is typically used to measure angular displacement of 
mechanical devices such as a motor or water meter. The quadrature encoder has an incremental 
output type which means that it outputs "rotation step" instead of absolute 
position. By encoding the rotation onto the two output signals, A and B, with a
90 degrees phase shift, a gray coded signal is created as seen in the 
<span class="hinted" data-placement="auto top" data-toggle="tooltip" data-html="true" data-original-title="&lt;p&gt;&lt;strong&gt;jiff&lt;/strong&gt;&lt;/p&gt;
">GIF image</span> below.</p>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/qd_state_gif.gif" alt="Quadrature State Changes" class="img-responsive"></div><p></p>
<p>The <span class="hinted" data-placement="auto top" data-toggle="tooltip" data-html="true" data-original-title="&lt;p&gt;&lt;strong&gt;jiff&lt;/strong&gt;&lt;/p&gt;
">GIF image</span> showcase the four possible gray code states, labeled 
as <strong>0</strong>, <strong>1</strong>, <strong>2</strong> and <strong>3</strong>. By tracking state changes, the direction,
relative position and speed of the rotation can be determined. For example, 
consider a motor rotating in one direction where signal A leads signal B, the 
state changes would be <strong>0</strong> â†’ <strong>1</strong> â†’ <strong>3</strong> â†’ <strong>2</strong> â†’ <strong>0</strong>
â†’ <strong>1</strong> etc. If the motor were to rotate in the opposite direction then 
signal B would lead signal A and the state changes would be <strong>0</strong> â†’ <strong>2</strong> 
â†’ <strong>3</strong> â†’ <strong>1</strong> â†’ <strong>0</strong> â†’ <strong>2</strong> etc.</p>
<p>While tracking the state changes gives us information about the direction of the 
rotation as well as relative position, measuring the interval gives us 
information about velocity. To calculate the latter, one needs to know the 
numbers of state changes per full rotation. In this training we will focus on 
the direction and leave out relative position and velocity.</p>
<div class="bs-callout bs-callout-info "><h4><span class="glyphicon glyphicon-info-sign gi-2x" style="vertical-align: middle; margin-right: 0.2em;"></span><span style="vertical-align: middle;">Want a better explanation?
</span></h4>
<p>    To get a better understanding of quadrature encoders and decoders it is 
    recommended to use the search engine of your choice to find some additional 
    reading.</p>
</div>
<h2 class="body-heading" id="adding-data-structure-members">Adding Data Structure Members<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#adding-data-structure-members"></a></h2><p>Before we get to writing code, we need to first make a quick stop by the 
<code>Constants and Data Structures</code> view. We need three data structure members:</p>
<ul>
<li>One to track the current step count</li>
<li>One to track the last state</li>
<li>One to count the number of invalid state transitions</li>
</ul>
<div class="bs-callout bs-callout-info "><h4><span style="vertical-align: middle;">What is an "invalid state transition"?
</span></h4>
<p>  An invalid state transition is when both inputs change value.
  A valid state transition occur when only one input changes.</p>
</div>
<p>The first variable, named <code>currentStep</code>, belongs to the <code>output</code> data structure
while the second variable, named <code>lastState</code>, belongs to the <code>state</code> structure.
The remaining variable, <code>errors</code>, should also be placed in the <code>output</code> 
structure. If you are unsure on why we use the structures above, consider the 
table below (the same information can be found in the Sensor Controller Studio 
help section):</p>
<table class="table table-striped table-bordered">
<thead>
<tr>
<th>Data structure</th>
<th>Intended use</th>
</tr>
</thead>
<tbody>
<tr>
<td>cfg</td>
<td>Configuration of SC Task</td>
</tr>
<tr>
<td>input</td>
<td>Input data for SC Task</td>
</tr>
<tr>
<td>output</td>
<td>Output data from SC Task</td>
</tr>
<tr>
<td>state</td>
<td>Internal state of SC Task</td>
</tr>
</tbody>
</table>
<p>As we can expect rotation in two direction, the state count variable will need 
to be a signed variable. This as we either increment or decrement the count 
depending on the direction of the rotation. When done, you should have something 
along the lines of the picture below.</p>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/scs_data_structure_member.png" alt="SCS Data Structure Member" class="img-responsive"></div><p></p>
<h2 class="body-heading" id="initialization-code">Initialization Code<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#initialization-code"></a></h2><p>We can now start implementing our quadrature decoder application. In the first 
version we will only use the standard SCS procedure set and resources and have 
a look at the resulting code. </p>
<p>We start with the <code>Initialization Code</code> block which we use to setup the I/O 
configuration, read the initial input state and then schedule the first run 
of the<code>Execution Code</code> block. For the purpose of moving this training along
faster, a ready made code snippet is provided below. </p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_1')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_1" class="lang-c hljs cpp"><span class="hljs-comment">// Set pin mode</span>
gpioCfgMode(AUXIO_I_QD_INPUT_A, GPIO_MODE_INPUT);
gpioCfgMode(AUXIO_I_QD_INPUT_B, GPIO_MODE_INPUT);
gpioCfgMode(AUXIO_O_QD_OUTPUT_LED, GPIO_MODE_OUTPUT);

<span class="hljs-comment">// Enable input buffers on inputs</span>
gpioEnableInputBuf(AUXIO_I_QD_INPUT_A);
gpioEnableInputBuf(AUXIO_I_QD_INPUT_B);

<span class="hljs-comment">// Read initial state</span>
U16 inputA;
U16 inputB;
gpioGetInputValue(AUXIO_I_QD_INPUT_A; inputA);
gpioGetInputValue(AUXIO_I_QD_INPUT_B; inputB);

<span class="hljs-comment">// Convert to "last state", inputB should be bit1 and inputA bit0</span>
state.lastState = (inputB &lt;&lt; <span class="hljs-number">1</span>) | inputA;

<span class="hljs-comment">// Schedule first run of the Execution Code</span>
fwScheduleTask(<span class="hljs-number">1</span>);
</code></pre><span class="code-title"><p><strong>Initialization Code</strong> â€“ Initial pin configuration setup</p>
</span></div></div>
<h2 class="body-heading" id="execution-code">Execution Code<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#execution-code"></a></h2><p>The <code>Execution Code</code> block contains the main logic of our quadrature decoder 
implementation. For simplicity, we design the execution code to never return.
We do this to easier measure the execution speed of this and future versions 
of the quadrature decoder as it would correspond to the fastest possible sample
rate. </p>
<div class="bs-callout bs-callout-warning "><h4><span class="glyphicon glyphicon-exclamation-sign gi-2x" style="vertical-align: middle; margin-right: 0.2em;"></span><span style="vertical-align: middle;">Be careful with infinite loops!
</span></h4>
<p>      In this training we for simplicity use a never returning loop in out
      execution code block. A consequence of this is that the application
      cannot be stopped once started. </p>
<p>      In a "real" application, it is recommended to add a option for the user to 
      stop the loop. This can for example be done using a data structure 
      variable as the loop condition variable as it can be modified by the user
      from the system CPU side.</p>
</div>
<p>Taking all of this into consideration, the steps we need to cover during 
each loop itteration is:</p>
<ul>
<li>Read the current input value of <code>QD_INPUT_A</code> and <code>QD_INPUT_B</code></li>
<li>Convert input values to a state as described in <a href="#quadrature-encoded-signals">Quadrature Encoded Signals</a></li>
<li>Compare the new state with the last state to determine direction</li>
<li>Update output variables according to the state change</li>
<li>Update the value of <code>lastState</code> and schedule next reading</li>
<li>Log <code>output</code> and <code>state</code> structures using the Run-Time Logging</li>
<li>Toggle the output LED so that we can measure the loop execution time externally</li>
</ul>
<p>As in the case of the <code>Initialization Code</code>, a ready made code snippet is 
available below.</p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_2')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_2" class="lang-c hljs cpp">U16 end = <span class="hljs-number">0</span>;

<span class="hljs-keyword">do</span> {
    <span class="hljs-comment">// Read input values</span>
    U16 inputA;
    U16 inputB;
    gpioGetInputValue(AUXIO_I_QD_INPUT_A; inputA);
    gpioGetInputValue(AUXIO_I_QD_INPUT_B; inputB);

    <span class="hljs-comment">// Convert to "new state"</span>
    U16 newState = (inputB &lt;&lt; <span class="hljs-number">1</span>) | inputA;

    <span class="hljs-comment">// Check state transition</span>
    U16 lastState = state.lastState;
    <span class="hljs-keyword">if</span> (newState != lastState) {
      <span class="hljs-comment">// Assume a "negative" direction per default</span>
      U16 direction = <span class="hljs-number">0</span>;
      U16 error = <span class="hljs-number">0</span>;

      <span class="hljs-comment">// If last state was "0", valid transitions are to "1" or "2".</span>
      <span class="hljs-comment">// As negative direction is assumed, we do not need to check for "2"</span>
      <span class="hljs-keyword">if</span> (lastState == <span class="hljs-number">0</span>) {
          <span class="hljs-keyword">if</span> (newState == <span class="hljs-number">1</span>) {
              <span class="hljs-comment">// If state changes to "1" then the direction is "positive"</span>
              direction = <span class="hljs-number">1</span>;
          } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (newState == <span class="hljs-number">3</span>) {
              error = <span class="hljs-number">1</span>;
          }

      <span class="hljs-comment">// If last state was "1", valid transitions are to "3" or "0"</span>
      <span class="hljs-comment">// As negative direction is assumed, we do not need to check for "0"</span>
      } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (lastState == <span class="hljs-number">1</span>) {
          <span class="hljs-keyword">if</span> (newState == <span class="hljs-number">3</span>) {
              <span class="hljs-comment">// If state changes to "3" then the direction is "positive"</span>
              direction = <span class="hljs-number">1</span>;
          } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (newState == <span class="hljs-number">2</span>) {
              error = <span class="hljs-number">1</span>;
          }

      <span class="hljs-comment">// If last state was "2", valid transitions are to "0" or "3"</span>
      <span class="hljs-comment">// As negative direction is assumed, we do not need to check for "3"</span>
      } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (lastState == <span class="hljs-number">2</span>) {
          <span class="hljs-keyword">if</span> (newState == <span class="hljs-number">0</span>) {
              <span class="hljs-comment">// If state changes to "0" then the direction is "positive"</span>
              direction = <span class="hljs-number">1</span>;
          } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (newState == <span class="hljs-number">1</span>) {
              error = <span class="hljs-number">1</span>;
          }

      <span class="hljs-comment">// If last state was "3" (as it was not 0-2) , valid transitions are to "2" or "1"</span>
      <span class="hljs-comment">// As negative direction is assumed, we do not need to check for "1"</span>
      } <span class="hljs-keyword">else</span> {
          <span class="hljs-keyword">if</span> (newState == <span class="hljs-number">2</span>) {
              <span class="hljs-comment">// If state changes to "2" then the direction is "positive"</span>
              direction = <span class="hljs-number">1</span>;
          } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (newState == <span class="hljs-number">0</span>) {
              error = <span class="hljs-number">1</span>;
          }
      }

      <span class="hljs-comment">// Update output variables accordingly</span>
      <span class="hljs-keyword">if</span> (error == <span class="hljs-number">0</span>) {
          <span class="hljs-keyword">if</span> (direction == <span class="hljs-number">1</span>) {
              output.currentStep += <span class="hljs-number">1</span>;
          } <span class="hljs-keyword">else</span> {
              output.currentStep -= <span class="hljs-number">1</span>;
          }
      } <span class="hljs-keyword">else</span> {
          output.errors += <span class="hljs-number">1</span>;
      }

      <span class="hljs-comment">// Log structures</span>
      rtlLogStructs(BV_RTL_LOG_OUTPUT | BV_RTL_LOG_STATE);
    }

    <span class="hljs-comment">// Update last state</span>
    state.lastState = newState;

    <span class="hljs-comment">// Toggle debug LED</span>
    gpioToggleOutput(AUXIO_O_QD_OUTPUT_LED);

<span class="hljs-comment">// This loop will never break</span>
} <span class="hljs-keyword">while</span>(end == <span class="hljs-number">0</span>);
</code></pre><span class="code-title"><p><strong>Execution Code</strong> â€“ First quadrature decoder solution</p>
</span></div></div>
<p>Looking at the code, we can see that it is quite straightforward. We sample
each pin and then compare the new state with the old state. Ideally we would 
like to sample both inputs at the same time, but using the normal procedures, 
this is not possible. The notion of <strong>positive</strong> and <strong>negative</strong> direction in 
the code is in relation to the rotation direction disgusted in the
<a href="#quadrature-encoded-signals">Quadrature Encoded Signal</a> section.</p>
<div class="bs-callout bs-callout-info "><h4><span class="glyphicon glyphicon-info-sign gi-2x" style="vertical-align: middle; margin-right: 0.2em;"></span><span style="vertical-align: middle;">Why are we reading the lastState into a local variable?
</span></h4>
<p>    Some of you might have noted that we do not perform checks against 
    the <code>state.lastState</code> variable directly. Instead we read <code>state.lastState</code>
    into a local variable that we later use to check against. </p>
<p>    We do this to allow the compiler to make more efficient code as we need 
    to use the value more then once. This as using <code>state.lastState</code> directly
    would result in the compiler performing a "load and compare" operation each 
    time as the value is not in a register (and is considered volatile). If we 
    instead load the value into a local variable then the compiler can re-use 
    the same register for all subsequent checks, saving all the subsequent 
    "load" operations.</p>
</div>
<h2 class="body-heading" id="testing-the-code">Testing the Code<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#testing-the-code"></a></h2><p>It is now time to test the first version of our quadrature decoder application 
and we do this using the Run-Time Logging feature in SCS. It is expected that 
you are familiar with this from before, if not, take some time and look over the 
<a href="../sc_02_capacitive_sensing_and_runtime_logging/sc_capacitive_sensing_and_runtime_logging.html">Capacitive Touch</a> training module before proceeding.</p>
<p>In the Run-Time Logging view, select that "Log output?" and "Log state?" as
these are the two data structure currently we use in our project. Setup the 
<code>COM port</code> to match the LaunchPad you are currently using and leave the <code>RTC 
tick interval</code> with the default value as it is only used to trigger the first 
run of the <code>Execution Code</code> block. The setup should look like in the picture 
below.</p>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/scs_runtime_logging.png" alt="SCS runtime logging" class="img-responsive"></div><p></p>
<p>Now <code>Connect</code> (<kbd>F12</kbd>) to the device and <code>Start Run-Time Logging</code> 
(<kbd>F5</kbd>). If everything is working as expected, you will not see any 
structure updates happening. We can now start playing around with the push 
buttons to move between different states and see how the <code>currentStep</code> variable
counts either up or down. </p>
<div class="bs-callout bs-callout-warning "><h4><span class="glyphicon glyphicon-exclamation-sign gi-2x" style="vertical-align: middle; margin-right: 0.2em;"></span><span style="vertical-align: middle;">SCS test limitations
</span></h4>
<p>    The Sensor Controller task code should normally not run continuously in a 
    loop. If that is the case:</p>
<ul>
<li><p>Once the task is running, it cannot be stopped or restarted. Using the 
Stop and Restart commands will cause an error. </p>
</li>
<li><p>Once the task is running, any attempt to edit data structure member or 
using a configuration slider will cause an error.</p>
</li>
</ul>
</div>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/scs_runtime_logging_version1.png" alt="SCS runtime logging version 1" class="img-responsive"></div><p></p>
<div class="bs-callout bs-callout-warning "><h4><span class="glyphicon glyphicon-exclamation-sign gi-2x" style="vertical-align: middle; margin-right: 0.2em;"></span><span style="vertical-align: middle;">I can't seem to trigger any invalid state transitions
</span></h4>
<p>    By now you might have tried to perform an invalid state transition (e.g. moving
    from state "3" to state "0") but without any luck getting the error count to 
    increase. This is due to the execution speed of our loop and the fact that the 
    manual button presses are unlikely to be synchronized with each other.</p>
<p>    If you would like to verify that you can actually catch invalid states
    you can mount a jumper on the two DIOs representing the button inputs 
    to trigger a "synchronized" state change.</p>
</div>
<h2 class="body-heading" id="digging-into-the-assembly-code">Digging into the Assembly Code<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#digging-into-the-assembly-code"></a></h2><p>Now that we have verified that our initial attempt to create a quadrature decoder 
works, let us look closer at the limitations with this solution and why it is not
the most efficient solution. To do this we need to have a look at the resulting 
assembly code that is generated based on the code we have written. The easiest 
way to do so is to look at the listing file generated by SCS when using the 
<code>Code Generator</code> feature.</p>
<p>To find the listing file, you first need to perform a code generation by 
clicking the the <code>Output SCIF driver files</code> button in the <code>Code Generator</code> view.
Once the output has been generated, the output directory can be opened by 
clicking the <code>View output directory</code> button. In this folder there should be a 
file named <code>sce.lst</code> which is the file we want to look closer at.</p>
<p>At a first glance we can see that there is a lot of "framework" code that is
automatically added to the output but that is not part of our code segments.
We will not spend time making sense of this but instead navigate to the
the line where the <code>Execution Code</code> block starts. An easy way to find
this is searching for "quadratureDecoder/execute". A small snippet of what you
can expect to find is seen below.</p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_3')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_3" class="hljs php">  ...

  quadratureDecoder/execute:
                ;? U16 end = <span class="hljs-number">0</span>;
  <span class="hljs-number">00</span>d8 ---- <span class="hljs-number">0000</span>                         ld          R0, <span class="hljs-comment">#0</span>
                ;?
                ;? <span class="hljs-keyword">do</span> {
                /id0068:
                ;?     <span class="hljs-comment">// Read input values</span>
                ;?     U16 inputA;
                ;?     U16 inputB;
                ;?     gpioGetInputValue(AUXIO_I_QD_INPUT_A; inputA);
  <span class="hljs-number">00</span>d9 ---- <span class="hljs-number">7004</span>                             ld          R7, <span class="hljs-comment">#4</span>
  <span class="hljs-number">00</span>da ---- <span class="hljs-number">1527</span>                             jsr         gpioGetInputValue
  <span class="hljs-number">00</span>db ---- <span class="hljs-number">9</span>d47                             ld          R1, R7
                ;?     gpioGetInputValue(AUXIO_I_QD_INPUT_B; inputB);
  <span class="hljs-number">00</span>dc ---- <span class="hljs-number">7003</span>                             ld          R7, <span class="hljs-comment">#3</span>
  <span class="hljs-number">00</span>dd ---- <span class="hljs-number">1527</span>                             jsr         gpioGetInputValue
                ;?
                ;?     <span class="hljs-comment">// Convert to "new state"</span>
                ;?     U16 newState = (inputB &lt;&lt; <span class="hljs-number">1</span>) | inputA;
  <span class="hljs-number">00</span>de ---- ed47                             ld          R6, R7
  <span class="hljs-number">00</span>df ---- eda1                             lsl         R6, <span class="hljs-comment">#1</span>
  <span class="hljs-number">00e0</span> ---- ed09                             <span class="hljs-keyword">or</span>          R6, R1

  ...
</code></pre><span class="code-title"><p><strong>Generated assembly output</strong></p>
</span></div></div>
<p>As seen in the snippet above, one can easily correlate our "task code"
(marked with a "<strong>;?</strong>" in the start of the line) and the resulting assembly code 
which was produced as a result of this. In the snippet below we can for example
see that reading input A results in two "load" (ld) instructions as well as a 
"jump to subroutine" (jsr) instruction.</p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_4')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_4" class="hljs sql">                ;?     // Read input values
                ;?     U16 inputA;
                ;?     U16 inputB;
                ;?     gpioGetInputValue(AUXIO_I_QD_INPUT_A; inputA);
  00d9 <span class="hljs-comment">---- 7004                             ld          R7, #4</span>
  00da <span class="hljs-comment">---- 1527                             jsr         gpioGetInputValue</span>
  00db <span class="hljs-comment">---- 9d47                             ld          R1, R7</span>
</code></pre><span class="code-title"><p><strong>Correlation between task code and resulting assembly, part 1</strong></p>
</span></div></div>
<p>Let us analyze how many instructions that is actually needed to read the input.
To do this we need to search for "gpioGetInputValue" in the file to see how the 
subroutine is written:</p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_5')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_5" class="hljs perl">  ; PARAMETERS:
  ;     R7 = AUX I/O <span class="hljs-keyword">index</span>
  ;
  ; CLOBBERS:
  ;     R6, R7
  gpioGetInputValue:
                          ; Calculate the I/O bit <span class="hljs-keyword">index</span>
  <span class="hljs-number">0127</span> ---- ed47                         ld          R6, R7
  <span class="hljs-number">012</span>8 ---- e007                         <span class="hljs-keyword">and</span>         R6, <span class="hljs-comment">#0x0007</span>

                          ; Calculate the I/O register address
  <span class="hljs-number">012</span>9 ---- fdab                         lsr         R7, <span class="hljs-comment">#3</span>
  <span class="hljs-number">012</span>a <span class="hljs-number">8600</span> f8be                         add         R7, <span class="hljs-comment">#IOP_AIODIO0_GPIODIN</span>

                          ; Move the desired GPIO pin value into bit <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> mask
  <span class="hljs-number">012</span>c ---- ff07                         in          R7, [R7]
  <span class="hljs-number">012</span>d ---- fd8e                         lsr         R7, R6
  <span class="hljs-number">012</span>e ---- f001                         <span class="hljs-keyword">and</span>         R7, <span class="hljs-comment">#0x0001</span>
  <span class="hljs-number">012</span>f ---- adb7                         rts
</code></pre><span class="code-title"><p><strong>Correlation between task code and resulting assembly, part 2</strong></p>
</span></div></div>
<p>Counting the instructions in the <code>gpioGetInputValue</code> subroutine, we can see that
it requires 8 instructions in total including the subroutine return (rts).
If we add in the two instructions surrounding the initial <strong>jsr</strong> call we get a 
total of 10 instructions to read an input. Finally, we account for the prefixed 
instructions which means we get a final value of 11 instructions. What does this 
mean for our application? To understand this we need to consider the number of 
clock cycles it takes to execute a typical instruction on the Sensor Controller. </p>
<p>Most Sensor Controller instructions use two clock cycles. This means that the 
efficient instruction execution rate is more or less half that of the clock that
drives the Sensor Controller Engine. There is some exception from this rule 
where accesses to ADI and DDI registers, prefixed instructions, and wait 
instructions require additional cycles. For detailed information on this, please 
refer to the <a href="#technical-reference-manuals">Technical Reference Manual</a> or the 
SCS help section.</p>
<div class="bs-callout bs-callout-warning "><h4><span class="glyphicon glyphicon-exclamation-sign gi-2x" style="vertical-align: middle; margin-right: 0.2em;"></span><span style="vertical-align: middle;">Prefixed instruction?
</span></h4>
<p>  A "prefixed" instruction can be spotted by looking at the second column to the
  left in the listing file. A prefixed instruction require additional clock 
  cycles to complete which means we count it as two instruction worth of 
  execution time.</p>
</div>
<p>In the current application, the Sensor Controller operates in <code>Active Mode</code>
which means the Sensor Controller executes (up to) 12 instructions per 
microsecond. If we convert this to time it means each instruction takes roughly 
83.3 ns to execute and that 11 instructions require roughly 916.3 ns of 
execution time. </p>
<p>While this might not seem like a lot if time, we want to sample the two inputs
with as little delay as possible to avoid errors. We also need to consider that 
that this time impacts how fast our application loop will run, directly relating 
to the maximum state change rate that the implementation can potentially handle. 
We will revisit this in a bit but for now we will continue on and analyze the 
rest of the loop. As we have already looked over the assembly relating to
reading the inputs, lets now look over the part responsible for checking the 
state and incrementing the counter. </p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_6')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_6" class="hljs ruby">              ;?     <span class="hljs-regexp">//</span> <span class="hljs-constant">Convert</span> to <span class="hljs-string">"new state"</span>
              ;?     <span class="hljs-constant">U16</span> newState = (inputB &lt;&lt; <span class="hljs-number">1</span>) | inputA;
<span class="hljs-number">00</span>de ---- ed47                             ld          <span class="hljs-constant">R6</span>, <span class="hljs-constant">R7</span>
<span class="hljs-number">00</span>df ---- eda1                             lsl         <span class="hljs-constant">R6</span>, <span class="hljs-comment">#1</span>
<span class="hljs-number">00</span>e<span class="hljs-number">0</span> ---- ed09                             <span class="hljs-keyword">or</span>          <span class="hljs-constant">R6</span>, <span class="hljs-constant">R1</span>
              ;?
              ;?     <span class="hljs-regexp">//</span> <span class="hljs-constant">Check</span> state transition
              ;?     <span class="hljs-constant">U16</span> lastState = state.lastState;
<span class="hljs-number">00</span>e1 ---- <span class="hljs-number">18</span>bb                             ld          <span class="hljs-constant">R1</span>, [<span class="hljs-comment">#quadratureDecoder/state/lastState]</span>
              ;?     <span class="hljs-keyword">if</span> (newState != lastState) {
<span class="hljs-number">00</span>e2 ---- ed29                             cmp         <span class="hljs-constant">R6</span>, <span class="hljs-constant">R1</span>
<span class="hljs-number">00</span>e3 ---- b63a                             beq         /id008<span class="hljs-number">0</span>
              ;?       <span class="hljs-regexp">//</span> <span class="hljs-constant">Assume</span> a <span class="hljs-string">"negative"</span> direction per default
              ;?       <span class="hljs-constant">U16</span> direction = <span class="hljs-number">0</span>;
<span class="hljs-number">00</span>e4 ---- <span class="hljs-number">7000</span>                               ld          <span class="hljs-constant">R7</span>, <span class="hljs-comment">#0</span>
              ;?       <span class="hljs-constant">U16</span> error = <span class="hljs-number">0</span>;
<span class="hljs-number">00</span>e5 ---- <span class="hljs-number">2000</span>                               ld          <span class="hljs-constant">R2</span>, <span class="hljs-comment">#0</span>
              ;?
              ;?       <span class="hljs-regexp">//</span> <span class="hljs-constant">If</span> last state was <span class="hljs-string">"0"</span>, valid transitions are to <span class="hljs-string">"1"</span> <span class="hljs-keyword">or</span> <span class="hljs-string">"2"</span>
              ;?       <span class="hljs-keyword">if</span> (lastState == <span class="hljs-number">0</span>) {
<span class="hljs-number">00</span>e6 ---- <span class="hljs-number">9</span>a0<span class="hljs-number">0</span>                               cmp         <span class="hljs-constant">R1</span>, <span class="hljs-comment">#0</span>
<span class="hljs-number">00</span>e7 ---- be08                               bneq        /id0085
              ;?           <span class="hljs-keyword">if</span> (newState == <span class="hljs-number">1</span>) {
<span class="hljs-number">00</span>e8 ---- ea01                                   cmp         <span class="hljs-constant">R6</span>, <span class="hljs-comment">#1</span>
<span class="hljs-number">00</span>e9 ---- be02                                   bneq        /id0088
              ;?               <span class="hljs-regexp">//</span> <span class="hljs-constant">If</span> state changes to <span class="hljs-string">"1"</span> <span class="hljs-keyword">then</span> the direction is <span class="hljs-string">"positive"</span>
              ;?               direction = <span class="hljs-number">1</span>;
<span class="hljs-number">00</span>ea ---- <span class="hljs-number">7001</span>                                       ld          <span class="hljs-constant">R7</span>, <span class="hljs-comment">#1</span>
              ;?           } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (newState == <span class="hljs-number">3</span>) {
<span class="hljs-number">00</span>eb ---- <span class="hljs-number">04</span>ef                                   jmp         /id009<span class="hljs-number">0</span>
              /<span class="hljs-symbol">id0088:</span>
<span class="hljs-number">00</span>ec ---- ea03                                   cmp         <span class="hljs-constant">R6</span>, <span class="hljs-comment">#3</span>
<span class="hljs-number">00</span>ed ---- be01                                   bneq        /id0092
              ;?               error = <span class="hljs-number">1</span>;
<span class="hljs-number">00</span>ee ---- <span class="hljs-number">2001</span>                                       ld          <span class="hljs-constant">R2</span>, <span class="hljs-comment">#1</span>
              ;?           }
              /<span class="hljs-symbol">id0092:</span>
              /<span class="hljs-symbol">id0090:</span>
              ;?
              ;?       <span class="hljs-regexp">//</span> <span class="hljs-constant">If</span> last state was <span class="hljs-string">"1"</span>, valid transitions are to <span class="hljs-string">"3"</span> <span class="hljs-keyword">or</span> <span class="hljs-string">"0"</span>
              ;?       <span class="hljs-regexp">//</span> <span class="hljs-constant">As</span> negative direction is assumed, we <span class="hljs-keyword">do</span> <span class="hljs-keyword">not</span> need to check <span class="hljs-keyword">for</span> <span class="hljs-string">"0"</span>
              ;?       } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (lastState == <span class="hljs-number">1</span>) {
<span class="hljs-number">00</span>ef ---- <span class="hljs-number">050</span>b                               jmp         /id0087
              /<span class="hljs-symbol">id0085:</span>
<span class="hljs-number">00</span>f<span class="hljs-number">0</span> ---- <span class="hljs-number">9</span>a01                               cmp         <span class="hljs-constant">R1</span>, <span class="hljs-comment">#1</span>
<span class="hljs-number">00</span>f1 ---- be08                               bneq        /id0095
              ;?           <span class="hljs-keyword">if</span> (newState == <span class="hljs-number">3</span>) {
<span class="hljs-number">00</span>f2 ---- ea03                                   cmp         <span class="hljs-constant">R6</span>, <span class="hljs-comment">#3</span>
<span class="hljs-number">00</span>f3 ---- be02                                   bneq        /id0098
              ;?               <span class="hljs-regexp">//</span> <span class="hljs-constant">If</span> state changes to <span class="hljs-string">"3"</span> <span class="hljs-keyword">then</span> the direction is <span class="hljs-string">"positive"</span>
              ;?               direction = <span class="hljs-number">1</span>;
<span class="hljs-number">00</span>f4 ---- <span class="hljs-number">7001</span>                                       ld          <span class="hljs-constant">R7</span>, <span class="hljs-comment">#1</span>
              ;?           } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (newState == <span class="hljs-number">2</span>) {
<span class="hljs-number">00</span>f5 ---- <span class="hljs-number">04</span>f9                                   jmp         /id010<span class="hljs-number">0</span>
              /<span class="hljs-symbol">id0098:</span>
<span class="hljs-number">00</span>f6 ---- ea02                                   cmp         <span class="hljs-constant">R6</span>, <span class="hljs-comment">#2</span>
<span class="hljs-number">00</span>f7 ---- be01                                   bneq        /id0102
              ;?               error = <span class="hljs-number">1</span>;
<span class="hljs-number">00</span>f8 ---- <span class="hljs-number">2001</span>                                       ld          <span class="hljs-constant">R2</span>, <span class="hljs-comment">#1</span>
              ;?           }
              /<span class="hljs-symbol">id0102:</span>
              /<span class="hljs-symbol">id0100:</span>
              ;?
              ;?       <span class="hljs-regexp">//</span> <span class="hljs-constant">If</span> last state was <span class="hljs-string">"2"</span>, valid transitions are to <span class="hljs-string">"0"</span> <span class="hljs-keyword">or</span> <span class="hljs-string">"3"</span>
              ;?       } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (lastState == <span class="hljs-number">2</span>) {
<span class="hljs-number">00</span>f9 ---- <span class="hljs-number">050</span>b                               jmp         /id0097
              /<span class="hljs-symbol">id0095:</span>
<span class="hljs-number">00</span>fa ---- <span class="hljs-number">9</span>a02                               cmp         <span class="hljs-constant">R1</span>, <span class="hljs-comment">#2</span>
<span class="hljs-number">00</span>fb ---- be08                               bneq        /id0105
              ;?           <span class="hljs-keyword">if</span> (newState == <span class="hljs-number">0</span>) {
<span class="hljs-number">00</span>fc ---- ea0<span class="hljs-number">0</span>                                   cmp         <span class="hljs-constant">R6</span>, <span class="hljs-comment">#0</span>
<span class="hljs-number">00</span>fd ---- be02                                   bneq        /id0108
              ;?               <span class="hljs-regexp">//</span> <span class="hljs-constant">If</span> state changes to <span class="hljs-string">"0"</span> <span class="hljs-keyword">then</span> the direction is <span class="hljs-string">"positive"</span>
              ;?               direction = <span class="hljs-number">1</span>;
<span class="hljs-number">00</span>fe ---- <span class="hljs-number">7001</span>                                       ld          <span class="hljs-constant">R7</span>, <span class="hljs-comment">#1</span>
              ;?           } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (newState == <span class="hljs-number">1</span>) {
<span class="hljs-number">00</span>ff ---- <span class="hljs-number">0503</span>                                   jmp         /id011<span class="hljs-number">0</span>
              /<span class="hljs-symbol">id0108:</span>
<span class="hljs-number">0100</span> ---- ea01                                   cmp         <span class="hljs-constant">R6</span>, <span class="hljs-comment">#1</span>
<span class="hljs-number">0101</span> ---- be01                                   bneq        /id0112
              ;?               error = <span class="hljs-number">1</span>;
<span class="hljs-number">0102</span> ---- <span class="hljs-number">2001</span>                                       ld          <span class="hljs-constant">R2</span>, <span class="hljs-comment">#1</span>
              ;?           }
              /<span class="hljs-symbol">id0112:</span>
              /<span class="hljs-symbol">id0110:</span>
              ;?
              ;?       <span class="hljs-regexp">//</span> <span class="hljs-constant">If</span> last state was <span class="hljs-string">"3"</span> (as it was <span class="hljs-keyword">not</span> <span class="hljs-number">0</span>-<span class="hljs-number">2</span>) , valid transitions are to <span class="hljs-string">"2"</span> <span class="hljs-keyword">or</span> <span class="hljs-string">"1"</span>
              ;?       } <span class="hljs-keyword">else</span> {
<span class="hljs-number">0103</span> ---- <span class="hljs-number">050</span>b                               jmp         /id0107
              /<span class="hljs-symbol">id0105:</span>
              ;?           <span class="hljs-keyword">if</span> (newState == <span class="hljs-number">2</span>) {
<span class="hljs-number">0104</span> ---- ea02                                   cmp         <span class="hljs-constant">R6</span>, <span class="hljs-comment">#2</span>
<span class="hljs-number">0105</span> ---- be02                                   bneq        /id0115
              ;?               <span class="hljs-regexp">//</span> <span class="hljs-constant">If</span> state changes to <span class="hljs-string">"2"</span> <span class="hljs-keyword">then</span> the direction is <span class="hljs-string">"positive"</span>
              ;?               direction = <span class="hljs-number">1</span>;
<span class="hljs-number">0106</span> ---- <span class="hljs-number">7001</span>                                       ld          <span class="hljs-constant">R7</span>, <span class="hljs-comment">#1</span>
              ;?           } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (newState == <span class="hljs-number">0</span>) {
<span class="hljs-number">0107</span> ---- <span class="hljs-number">050</span>b                                   jmp         /id0117
              /<span class="hljs-symbol">id0115:</span>
<span class="hljs-number">010</span>8 ---- ea0<span class="hljs-number">0</span>                                   cmp         <span class="hljs-constant">R6</span>, <span class="hljs-comment">#0</span>
<span class="hljs-number">010</span>9 ---- be01                                   bneq        /id0119
              ;?               error = <span class="hljs-number">1</span>;
<span class="hljs-number">010</span>a ---- <span class="hljs-number">2001</span>                                       ld          <span class="hljs-constant">R2</span>, <span class="hljs-comment">#1</span>
              ;?           }
              /<span class="hljs-symbol">id0119:</span>
              /<span class="hljs-symbol">id0117:</span>
              ;?       }
              /<span class="hljs-symbol">id0107:</span>
              /<span class="hljs-symbol">id0097:</span>
              /<span class="hljs-symbol">id0087:</span>
              ;?
              ;?       <span class="hljs-regexp">//</span> <span class="hljs-constant">Update</span> output variables accordingly
              ;?       <span class="hljs-keyword">if</span> (error == <span class="hljs-number">0</span>) {
<span class="hljs-number">010</span>b ---- aa0<span class="hljs-number">0</span>                               cmp         <span class="hljs-constant">R2</span>, <span class="hljs-comment">#0</span>
<span class="hljs-number">010</span>c ---- be0a                               bneq        /id0122
              ;?           <span class="hljs-keyword">if</span> (direction == <span class="hljs-number">1</span>) {
<span class="hljs-number">010</span>d ---- fa01                                   cmp         <span class="hljs-constant">R7</span>, <span class="hljs-comment">#1</span>
<span class="hljs-number">010</span>e ---- be04                                   bneq        /id0125
              ;?               output.currentStep += <span class="hljs-number">1</span>;
<span class="hljs-number">010</span>f ---- <span class="hljs-number">18</span>b8                                       ld          <span class="hljs-constant">R1</span>, [<span class="hljs-comment">#quadratureDecoder/output/currentStep]</span>
<span class="hljs-number">0110</span> ---- <span class="hljs-number">9801</span>                                       add         <span class="hljs-constant">R1</span>, <span class="hljs-comment">#1</span>
<span class="hljs-number">0111</span> ---- <span class="hljs-number">1</span>cb8                                       st          <span class="hljs-constant">R1</span>, [<span class="hljs-comment">#quadratureDecoder/output/currentStep]</span>
              ;?           } <span class="hljs-keyword">else</span> {
<span class="hljs-number">0112</span> ---- <span class="hljs-number">0516</span>                                   jmp         /id0127
              /<span class="hljs-symbol">id0125:</span>
              ;?               output.currentStep -= <span class="hljs-number">1</span>;
<span class="hljs-number">0113</span> ---- <span class="hljs-number">18</span>b8                                       ld          <span class="hljs-constant">R1</span>, [<span class="hljs-comment">#quadratureDecoder/output/currentStep]</span>
<span class="hljs-number">0114</span> ---- <span class="hljs-number">98</span>ff                                       add         <span class="hljs-constant">R1</span>, <span class="hljs-comment">#-1</span>
<span class="hljs-number">0115</span> ---- <span class="hljs-number">1</span>cb8                                       st          <span class="hljs-constant">R1</span>, [<span class="hljs-comment">#quadratureDecoder/output/currentStep]</span>
              ;?            }
              /<span class="hljs-symbol">id0127:</span>
              ;?       } <span class="hljs-keyword">else</span> {
<span class="hljs-number">0116</span> ---- <span class="hljs-number">051</span>a                             jmp         /id0124
              /<span class="hljs-symbol">id0122:</span>
              ;?           output.errors += <span class="hljs-number">1</span>;
<span class="hljs-number">0117</span> ---- <span class="hljs-number">18</span>b9                                   ld          <span class="hljs-constant">R1</span>, [<span class="hljs-comment">#quadratureDecoder/output/errors]</span>
<span class="hljs-number">011</span>8 ---- <span class="hljs-number">9801</span>                                   add         <span class="hljs-constant">R1</span>, <span class="hljs-comment">#1</span>
<span class="hljs-number">011</span>9 ---- <span class="hljs-number">1</span>cb9                                   st          <span class="hljs-constant">R1</span>, [<span class="hljs-comment">#quadratureDecoder/output/errors]</span>
              ;?       }
              /<span class="hljs-symbol">id0124:</span>
              ;?
              ;?       <span class="hljs-regexp">//</span> <span class="hljs-constant">Log</span> structures
              ;?       rtlLogStructs(<span class="hljs-constant">BV_RTL_LOG_OUTPUT</span> | <span class="hljs-constant">BV_RTL_LOG_STATE</span>);
<span class="hljs-number">011</span>a ---- <span class="hljs-number">100</span>c                               ld          <span class="hljs-constant">R1</span>, <span class="hljs-comment">#12</span>
<span class="hljs-number">011</span>b ---- <span class="hljs-number">28</span>ab                               ld          <span class="hljs-constant">R2</span>, [<span class="hljs-comment">#(pRtlTaskLogMaskTable + 0)]</span>
<span class="hljs-number">011</span>c ---- <span class="hljs-number">9</span>d02                               <span class="hljs-keyword">and</span>         <span class="hljs-constant">R1</span>, <span class="hljs-constant">R2</span>
<span class="hljs-number">011</span>d ---- <span class="hljs-number">1</span>caa                               st          <span class="hljs-constant">R1</span>, [<span class="hljs-comment">#(pRtlTaskLogReqTable + 0)]</span>
              ;?     }
              /<span class="hljs-symbol">id0080:</span>
              ;?
              ;?     <span class="hljs-regexp">//</span> <span class="hljs-constant">Update</span> last state
              ;?     state.lastState = newState;
<span class="hljs-number">011</span>e ---- <span class="hljs-number">6</span>cbb                             st          <span class="hljs-constant">R6</span>, [<span class="hljs-comment">#quadratureDecoder/state/lastState]</span>
              ;?
              ;?     <span class="hljs-regexp">//</span> <span class="hljs-constant">Toogle</span> debug <span class="hljs-constant">LED</span>
              ;?     gpioToggleOutput(<span class="hljs-constant">AUXIO_O_QD_OUTPUT_LED</span>);
<span class="hljs-number">011</span>f ---- <span class="hljs-number">74</span>cb                             iobset      <span class="hljs-comment">#(12 &amp; 0x7), [#(IOP_AIODIO0_GPIODOUTTGL + (12 &gt;&gt; 3))]</span>
              ;?
              ;?     <span class="hljs-regexp">//</span> <span class="hljs-constant">This</span> loop will never <span class="hljs-keyword">break</span>
              ;? } <span class="hljs-keyword">while</span>(<span class="hljs-keyword">end</span> == <span class="hljs-number">0</span>);
<span class="hljs-number">0120</span> ---- <span class="hljs-number">8</span>a0<span class="hljs-number">0</span>                         cmp         <span class="hljs-constant">R0</span>, <span class="hljs-comment">#0</span>
<span class="hljs-number">0121</span> ---- b6b7                         beq         /id007<span class="hljs-number">0</span>
</code></pre><span class="code-title"><p><strong>Correlation between task code and resulting assembly, part 3</strong></p>
</span></div></div>
<p>At a first glance it might look like a lot but if we limit our analyzing to find
out the worst case execution path, we can ignore the three first if-statements.
We can do this as the worst case execution time is when the last state was "3"
and the initial "last state checks" return false. This means the worst case 
assembly path can be condensed down to:</p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_7')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_7" class="hljs ruby">                ;?     <span class="hljs-regexp">//</span> <span class="hljs-constant">Convert</span> to <span class="hljs-string">"new state"</span>
                ;?     <span class="hljs-constant">U16</span> newState = (inputB &lt;&lt; <span class="hljs-number">1</span>) | inputA;
  <span class="hljs-number">00</span>de ---- ed47                             ld          <span class="hljs-constant">R6</span>, <span class="hljs-constant">R7</span>
  <span class="hljs-number">00</span>df ---- eda1                             lsl         <span class="hljs-constant">R6</span>, <span class="hljs-comment">#1</span>
  <span class="hljs-number">00</span>e<span class="hljs-number">0</span> ---- ed09                             <span class="hljs-keyword">or</span>          <span class="hljs-constant">R6</span>, <span class="hljs-constant">R1</span>
                ;?
                ;?     <span class="hljs-regexp">//</span> <span class="hljs-constant">Check</span> state transition
                ;?     <span class="hljs-constant">U16</span> lastState = state.lastState;
  <span class="hljs-number">00</span>e1 ---- <span class="hljs-number">18</span>bb                             ld          <span class="hljs-constant">R1</span>, [<span class="hljs-comment">#quadratureDecoder/state/lastState]</span>
                ;?     <span class="hljs-keyword">if</span> (newState != lastState) {
  <span class="hljs-number">00</span>e2 ---- ed29                             cmp         <span class="hljs-constant">R6</span>, <span class="hljs-constant">R1</span>
  <span class="hljs-number">00</span>e3 ---- b63b                             beq         /id008<span class="hljs-number">0</span>
                ;?         <span class="hljs-regexp">//</span> <span class="hljs-constant">Assume</span> a <span class="hljs-string">"negative"</span> direction per default
                ;?         <span class="hljs-constant">U16</span> direction = <span class="hljs-number">0</span>;
  <span class="hljs-number">00</span>e4 ---- <span class="hljs-number">7000</span>                                 ld          <span class="hljs-constant">R7</span>, <span class="hljs-comment">#0</span>
                ;?         <span class="hljs-constant">U16</span> error = <span class="hljs-number">0</span>;
  <span class="hljs-number">00</span>e5 ---- <span class="hljs-number">2000</span>                                 ld          <span class="hljs-constant">R2</span>, <span class="hljs-comment">#0</span>
                ;?
                ;?         <span class="hljs-regexp">//</span> <span class="hljs-constant">If</span> last state was <span class="hljs-string">"0"</span>, valid transitions are to <span class="hljs-string">"1"</span> <span class="hljs-keyword">or</span> <span class="hljs-string">"2"</span>
                ;?         <span class="hljs-keyword">if</span> (lastState == <span class="hljs-number">0</span>) {
  <span class="hljs-number">00</span>e5 ---- <span class="hljs-number">9</span>a0<span class="hljs-number">0</span>                                 cmp         <span class="hljs-constant">R1</span>, <span class="hljs-comment">#0</span>
  <span class="hljs-number">00</span>e6 ---- be0a                                 bneq        /id0085

  ...

                ;?         <span class="hljs-regexp">//</span> <span class="hljs-constant">If</span> last state was <span class="hljs-string">"1"</span>, valid transitions are to <span class="hljs-string">"3"</span> <span class="hljs-keyword">or</span> <span class="hljs-string">"0"</span>
                ;?         } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (lastState == <span class="hljs-number">1</span>) {
                  ...
                /<span class="hljs-symbol">id0085:</span>
  <span class="hljs-number">00</span>f1 ---- <span class="hljs-number">9</span>a01                                 cmp         <span class="hljs-constant">R1</span>, <span class="hljs-comment">#1</span>
  <span class="hljs-number">00</span>f2 ---- be0a                                 bneq        /id0095

  ...

                ;?         <span class="hljs-regexp">//</span> <span class="hljs-constant">If</span> last state was <span class="hljs-string">"2"</span>, valid transitions are to <span class="hljs-string">"0"</span> <span class="hljs-keyword">or</span> <span class="hljs-string">"3"</span>
                ;?         } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (lastState == <span class="hljs-number">2</span>) {
                  ...
                /<span class="hljs-symbol">id0095:</span>
  <span class="hljs-number">00</span>fd ---- <span class="hljs-number">9</span>a02                                 cmp         <span class="hljs-constant">R1</span>, <span class="hljs-comment">#2</span>
  <span class="hljs-number">00</span>fe ---- be0a                                 bneq        /id0105

  ...

                ;?         <span class="hljs-regexp">//</span> <span class="hljs-constant">If</span> last state was <span class="hljs-string">"3"</span> (as it was <span class="hljs-keyword">not</span> <span class="hljs-number">0</span>-<span class="hljs-number">2</span>) , valid transitions are to <span class="hljs-string">"2"</span> <span class="hljs-keyword">or</span> <span class="hljs-string">"1"</span>
                ;?         } <span class="hljs-keyword">else</span> {
                  ...
                /<span class="hljs-symbol">id0105:</span>
                ;?             <span class="hljs-keyword">if</span> (newState == <span class="hljs-number">2</span>) {
  <span class="hljs-number">010</span>9 ---- ea02                                     cmp         <span class="hljs-constant">R6</span>, <span class="hljs-comment">#2</span>
  <span class="hljs-number">010</span>a ---- be02                                     bneq        /id0115
                ;?                 <span class="hljs-regexp">//</span> <span class="hljs-constant">If</span> state changes to <span class="hljs-string">"2"</span> <span class="hljs-keyword">then</span> the direction is <span class="hljs-string">"positive"</span>
                ;?                 direction = <span class="hljs-number">1</span>;
  <span class="hljs-number">0106</span> ---- <span class="hljs-number">7001</span>                                         ld          <span class="hljs-constant">R7</span>, <span class="hljs-comment">#1</span>
                ;?             } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (newState == <span class="hljs-number">0</span>) {
  <span class="hljs-number">0107</span> ---- <span class="hljs-number">050</span>b                                     jmp         /id0117

  ...

                /<span class="hljs-symbol">id0117:</span>
                ;?         <span class="hljs-regexp">//</span> <span class="hljs-constant">Update</span> output variables accordingly
                ;?         <span class="hljs-keyword">if</span> (error == <span class="hljs-number">0</span>) {
  <span class="hljs-number">010</span>b ---- aa0<span class="hljs-number">0</span>                                 cmp         <span class="hljs-constant">R2</span>, <span class="hljs-comment">#0</span>
  <span class="hljs-number">010</span>c ---- be0a                                 bneq        /id0122
                ;?          <span class="hljs-keyword">if</span> (direction == <span class="hljs-number">1</span>) {
  <span class="hljs-number">0112</span> ---- fa01                                  cmp         <span class="hljs-constant">R7</span>, <span class="hljs-comment">#1</span>
  <span class="hljs-number">0113</span> ---- be04                                  bneq        /id0125
                ;?             output.currentStep += <span class="hljs-number">1</span>;
  <span class="hljs-number">0114</span> ---- <span class="hljs-number">18</span>b8                                     ld          <span class="hljs-constant">R1</span>, [<span class="hljs-comment">#quadratureDecoder/output/currentStep]</span>
  <span class="hljs-number">0115</span> ---- <span class="hljs-number">9801</span>                                     add         <span class="hljs-constant">R1</span>, <span class="hljs-comment">#1</span>
  <span class="hljs-number">0116</span> ---- <span class="hljs-number">1</span>cb8                                     st          <span class="hljs-constant">R1</span>, [<span class="hljs-comment">#quadratureDecoder/output/currentStep]</span>
                ;?         } <span class="hljs-keyword">else</span> {
  <span class="hljs-number">0117</span> ---- <span class="hljs-number">051</span>b                                 jmp         /id0127

  ...

                /<span class="hljs-symbol">id0127:</span>
               ;?         } <span class="hljs-keyword">else</span> {
  <span class="hljs-number">0116</span> ---- <span class="hljs-number">051</span>a                                 jmp         /id0124

 ....

               /<span class="hljs-symbol">id0124:</span>
               ;?
               ;?         <span class="hljs-regexp">//</span> <span class="hljs-constant">Log</span> structures
               ;?         rtlLogStructs(<span class="hljs-constant">BV_RTL_LOG_OUTPUT</span> | <span class="hljs-constant">BV_RTL_LOG_STATE</span>);
<span class="hljs-number">011</span>b ---- <span class="hljs-number">100</span>c                                 ld          <span class="hljs-constant">R1</span>, <span class="hljs-comment">#12</span>
<span class="hljs-number">011</span>c ---- <span class="hljs-number">78</span>ab                                 ld          <span class="hljs-constant">R7</span>, [<span class="hljs-comment">#(pRtlTaskLogMaskTable + 0)]</span>
<span class="hljs-number">011</span>d ---- <span class="hljs-number">9</span>d07                                 <span class="hljs-keyword">and</span>         <span class="hljs-constant">R1</span>, <span class="hljs-constant">R7</span>
<span class="hljs-number">011</span>e ---- <span class="hljs-number">1</span>caa                                 st          <span class="hljs-constant">R1</span>, [<span class="hljs-comment">#(pRtlTaskLogReqTable + 0)]</span>
               ;?     }
               /<span class="hljs-symbol">id0080:</span>
               ;?
               ;?     <span class="hljs-regexp">//</span> <span class="hljs-constant">Update</span> last state
               ;?     state.lastState = newState;
<span class="hljs-number">011</span>f ---- <span class="hljs-number">6</span>cbb                             st          <span class="hljs-constant">R6</span>, [<span class="hljs-comment">#quadratureDecoder/state/lastState]</span>
               ;?
               ;?     <span class="hljs-regexp">//</span> <span class="hljs-constant">Toogle</span> debug <span class="hljs-constant">LED</span>
               ;?     gpioToggleOutput(<span class="hljs-constant">AUXIO_O_QD_OUTPUT_LED</span>);
<span class="hljs-number">0120</span> ---- <span class="hljs-number">74</span>cb                             iobset      <span class="hljs-comment">#(12 &amp; 0x7), [#(IOP_AIODIO0_GPIODOUTTGL + (12 &gt;&gt; 3))]</span>
               ;?
               ;?     <span class="hljs-regexp">//</span> <span class="hljs-constant">This</span> loop will never <span class="hljs-keyword">break</span>
               ;? } <span class="hljs-keyword">while</span>(<span class="hljs-keyword">end</span> == <span class="hljs-number">0</span>);
<span class="hljs-number">0121</span> ---- <span class="hljs-number">8</span>a0<span class="hljs-number">0</span>                         cmp         <span class="hljs-constant">R0</span>, <span class="hljs-comment">#0</span>
<span class="hljs-number">0122</span> ---- b6b6                         beq         /id007<span class="hljs-number">0</span>
</code></pre><span class="code-title"><p><strong>Condensed worst case execution path</strong></p>
</span></div></div>
<p>Looking at the condensed assembly, we can see that the second part of our 
application loop (our <a href="#execution-code">Execution Code</a> do-while loop) 
requires at most 35 instructions to run. If we add to this the 22 instructions
required to sample the input pins in the top of the loop, we have a total of 57 
instructions. This means our initial attempt at an quadrature decoder application
results in execution time of roughly 4.75us for the worst case scenario.</p>
<div class="bs-callout bs-callout-success "><h4><span class="glyphicon glyphicon-ok-sign gi-2x" style="vertical-align: middle; margin-right: 0.2em;"></span><span style="vertical-align: middle;">Well that is not too shabby, let us wrap up?
</span></h4>
<p>      While this might sound like a reasonable execution speed, we are not 
      yet done. </p>
<p>      First of all, we want to be more efficient, we want to go faster!
      We are also concerned about the delay between the sampling of the
      two input pins. It is time to create our first custom procedure!</p>
</div>
<h1 class="body-heading" id="task-3-ndash-adding-procedures-to-existing-resources">Task 3 â€“ Adding Procedures to Existing Resources<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#task-3-ndash-adding-procedures-to-existing-resources"></a></h1><p>The first thing we can improve in our initial application is the input pin 
sampling which right now takes 22 cycles. From an application point of view, 
we want to be able to sample the differential state of two inputs as fast as
possible. Unfortunately there is no such procedure available, we will need to 
address that.</p>
<p>We could at this point choose to add both a new resource and a new procedure,
or we could extend an existing resource with a new procedure. We will go with 
option two and "only" add a new I/O procedure to read differential inputs. This 
means we can focus on the procedure files for now.  </p>
<h2 class="body-heading" id="creating-a-procedure-file">Creating a Procedure File<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#creating-a-procedure-file"></a></h2><p>During the SCS installation, a local user folder is created in the local users
<code>Document</code> directory: 
<code>C:\Users\&lt;WIN_USER&gt;\Documents\Texas Instruments\Sensor Controller Studio</code>.
Here we can add, among other things, our own procedures and resources. We will 
start by creating a new procedure file inside the <code>proc_def</code> subfolder named 
<code>gpio_get_input_pair_state.prd</code>:
<code>C:\Users\&lt;WIN_USER&gt;\Documents\Texas Instruments\Sensor Controller Studio\proc_def\gpio_get_input_pair_state.prd</code>
and open it up in the text editor of your choice.</p>
<div class="bs-callout bs-callout-info "><h4><span class="glyphicon glyphicon-info-sign gi-2x" style="vertical-align: middle; margin-right: 0.2em;"></span><span style="vertical-align: middle;">Procedure file-ending
</span></h4>
<p>    As can be seen in the file name above, the file-ending for a procedure file
    is <code>.prd</code>.</p>
</div>
<p>Before we can put any content in the file, we need to open up the 
"procedure definition" file which contains the information we need to write a
procedure file. This file is called <code>proc_def.dtd</code> and is found inside the 
<code>proc_def</code> folder of the SCS installation path, e.g: 
<code>C:\Program Files (x86)\Texas Instruments\Sensor Controller Studio\proc_defs\proc_def.dtd</code>.</p>
<div class="bs-callout bs-callout-warning "><h4><span class="glyphicon glyphicon-exclamation-sign gi-2x" style="vertical-align: middle; margin-right: 0.2em;"></span><span style="vertical-align: middle;">Hey wait, is there multiple proc_def folders?
</span></h4>
<p>    Yes! There is one <code>proc_def</code> folder inside the SCS installation directory 
    which contains all pre-defined procedures like those used in Task 2.
    The <code>proc_def</code> folder found in the user document directory is meant for 
    users that need to extend on the existing set of procedures in order to 
    keep the installation directory clean.</p>
</div>
<p>With both of these files open, it is time for us to add content to our new 
procedure. We start by specify the XML version and document type at the top
of our procedure file:</p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_8')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_8" class="hljs xml"><span class="hljs-pi">&lt;?xml version="1.0" encoding="ISO-8859-15"?&gt;</span>
<span class="hljs-doctype">&lt;!DOCTYPE proc_def SYSTEM "proc_def.dtd"[]&gt;</span>
</code></pre><span class="code-title"><p><strong>gpio_get_input_pair_state.prd</strong> â€“ Common procedure file header</p>
</span></div></div>
<p>We can now follow the documentation found inside <code>proc_def.dtd</code> to build up our 
procedure from the grounds up. It is recommended to take the time to read over 
this documentation before continuing.</p>
<div class="bs-callout bs-callout-warning "><h4><span class="glyphicon glyphicon-exclamation-sign gi-2x" style="vertical-align: middle; margin-right: 0.2em;"></span><span style="vertical-align: middle;">How do I make any sense of this file?!
</span></h4>
<p>    The <code>proc_def.dtd</code> is a XML Document Type Definition (DTD) file and reads as such.
    This training will not cover the details on DTD syntax but further reading
    can be found <a href="https://www.w3schools.com/xml/xml_dtd_intro.asp">here</a>.</p>
</div>
<p>For the reminder of the task, we will be referring to the <code>proc_def.dtd</code> as the 
<strong>"DTD file"</strong>.</p>
<h2 class="body-heading" id="adding-the-proc_def-element">Adding the "proc_def" Element<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#adding-the-proc_def-element"></a></h2><p>The first element we need to add to our procedure file is the <code>proc_def</code> 
element. Looking at the DTD file we see that it <strong>needs</strong> to include the following 
child elements:</p>
<table class="table table-striped table-bordered">
<thead>
<tr>
<th>Element</th>
<th>Used for</th>
<th>Number of occurrences</th>
</tr>
</thead>
<tbody>
<tr>
<td>desc</td>
<td>Procedure description/documentation</td>
<td>Once only</td>
</tr>
<tr>
<td>task_resource_ref</td>
<td>Linking the procedure with resources</td>
<td>Minimum of one</td>
</tr>
</tbody>
</table>
<p>We also see that it allows the following <strong>optional</strong> child elements:</p>
<table class="table table-striped table-bordered">
<thead>
<tr>
<th>Element</th>
<th>Used for</th>
<th>Number of occurrences</th>
</tr>
</thead>
<tbody>
<tr>
<td>chip_family_migration</td>
<td>Chip migration specific filtering</td>
<td>Zero or once only</td>
</tr>
<tr>
<td>run_time_logging</td>
<td>Procedures using to run-time logging</td>
<td>Zero or once only</td>
</tr>
<tr>
<td>impl</td>
<td>Procedure functional implementation</td>
<td>Any number</td>
</tr>
<tr>
<td>param</td>
<td>Input arguments to procedure</td>
<td>Any number</td>
</tr>
<tr>
<td>return</td>
<td>Procedure return values</td>
<td>Any number</td>
</tr>
<tr>
<td>internal</td>
<td>Internal procedure working variables</td>
<td>Any number</td>
</tr>
<tr>
<td>code</td>
<td>Procedure assembly code</td>
<td>Zero or once / impl</td>
</tr>
<tr>
<td>asm_file_dep</td>
<td>External assembly file references</td>
<td>Any number</td>
</tr>
</tbody>
</table>
<p>We also see that the <code>proc_def</code> element <strong>requires</strong> the following attributes:</p>
<table class="table table-striped table-bordered">
<thead>
<tr>
<th>Element</th>
<th>Used for</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>Defining procedure name</td>
</tr>
<tr>
<td>version</td>
<td>Procedure version</td>
</tr>
</tbody>
</table>
<p>The <code>name</code> attribute equals to the task code API name we want for our new
procedure. Let us add this element to our new procedure file and give it the 
name <code>gpioGetInputPairState</code> and version <code>1.0.0</code>:</p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_9')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_9" class="hljs xml"><span class="hljs-pi">&lt;?xml version="1.0" encoding="ISO-8859-15"?&gt;</span>
<span class="hljs-doctype">&lt;!DOCTYPE proc_def SYSTEM "proc_def.dtd"[]&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">proc_def</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"gpioGetInputPairState"</span> <span class="hljs-attribute">version</span>=<span class="hljs-value">"1.0.0"</span>&gt;</span>
  ...
<span class="hljs-tag">&lt;/<span class="hljs-title">proc_def</span>&gt;</span>
</code></pre><span class="code-title"><p><strong>gpio_get_input_pair_state.prd</strong> â€“ Added proc_def element</p>
</span></div></div>
<h2 class="body-heading" id="adding-the-desc-child">Adding the "desc" Child<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#adding-the-desc-child"></a></h2><p>We now <strong>need</strong> to add the required <code>desc</code> child element. In the DTD 
file we can see that it will contain parsed character data (PCDATA). The
<code>desc</code> child element provides the procedure description/documentation to the 
SCS IDE. The description can be written in basic HTML, typically using <code>p</code>, <code>b</code>, 
<code>i</code>, <code>tt</code>, <code>ul</code> and <code>li</code> tags.</p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_10')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_10" class="hljs xml"><span class="hljs-pi">&lt;?xml version="1.0" encoding="ISO-8859-15"?&gt;</span>
<span class="hljs-doctype">&lt;!DOCTYPE proc_def SYSTEM "proc_def.dtd"[]&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">proc_def</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"gpioGetInputPairState"</span> <span class="hljs-attribute">version</span>=<span class="hljs-value">"1.0.0"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">desc</span>&gt;</span>
    <span class="hljs-cdata">&lt;![CDATA[
        &lt;p&gt;
        Returns the state of a given pin pair A and B.
        &lt;/p&gt; &lt;p&gt;
        The state is the combined value of input A and B where input A is bit 0 and input B is bit 1.
        This means possible state values are 0, 1, 2 or 3.
        &lt;/p&gt;
    ]]&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">desc</span>&gt;</span>
  ...
<span class="hljs-tag">&lt;/<span class="hljs-title">proc_def</span>&gt;</span>
</code></pre><span class="code-title"><p><strong>gpio_get_input_pair_state.prd</strong> â€“ Added procedure description</p>
</span></div></div>
<h2 class="body-heading" id="adding-the-task_resource_ref-child">Adding the "task_resource_ref" Child<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#adding-the-task_resource_ref-child"></a></h2><p>Now we need to add at least one <code>task_resource_ref</code> child element. The 
<code>task_resource_ref</code> connects the procedure to a resource. In short terms, it
specifies for which resource this procedure should be made available. As we aim 
to extend the existing set of "I/O procedures" we should make our new procedure 
available for the following task resources:</p>
<ul>
<li>Digital Input Pins</li>
<li>Digital Open-Drain Pins</li>
<li>Digital Open-Source Pins</li>
</ul>
<p>The resource name writes as it reads in SCS which means and adding these to our
procedure file gives us:</p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_11')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_11" class="hljs xml"><span class="hljs-pi">&lt;?xml version="1.0" encoding="ISO-8859-15"?&gt;</span>
<span class="hljs-doctype">&lt;!DOCTYPE proc_def SYSTEM "proc_def.dtd"[]&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">proc_def</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"gpioGetInputPairState"</span> <span class="hljs-attribute">version</span>=<span class="hljs-value">"1.0.0"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">desc</span>&gt;</span>
    <span class="hljs-cdata">&lt;![CDATA[
        &lt;p&gt;
        Returns the state of a given pin pair A and B.
        &lt;/p&gt; &lt;p&gt;
        The state is the combined value of input A and B where input A is bit 0 and input B is bit 1.
        This means possible state values is 0, 1, 2 or 3.
        &lt;/p&gt;
    ]]&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">desc</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">task_resource_ref</span>&gt;</span>Digital Input Pins<span class="hljs-tag">&lt;/<span class="hljs-title">task_resource_ref</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">task_resource_ref</span>&gt;</span>Digital Open-Drain Pins<span class="hljs-tag">&lt;/<span class="hljs-title">task_resource_ref</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">task_resource_ref</span>&gt;</span>Digital Open-Source Pins<span class="hljs-tag">&lt;/<span class="hljs-title">task_resource_ref</span>&gt;</span>
  ...
<span class="hljs-tag">&lt;/<span class="hljs-title">proc_def</span>&gt;</span>
</code></pre><span class="code-title"><p><strong>gpio_get_input_pair_state.prd</strong> â€“ Added resource references</p>
</span></div></div>
<h2 class="body-heading" id="adding-the-impl-child">Adding the "impl" Child<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#adding-the-impl-child"></a></h2><p>Following the list of child elements presented above, we see that the next 
potential children are <code>chip_family_migration</code> and <code>run_time_logging</code>. We do not
expect any special requirements when migrating between chip families so we do 
not need to provide a <code>chip_family_migration</code> element. Furthermore, as the 
procedure does not relate to <code>Run-Time Logging</code>, we also do not need this 
element.</p>
<p>This brings us to the <code>impl</code> child element which makes up the procedure 
functional implementation. Looking at the DTD file we find that the <code>impl</code> has 
children of its own:</p>
<table class="table table-striped table-bordered">
<thead>
<tr>
<th>Element</th>
<th>Used for</th>
<th>Number of occurrences</th>
</tr>
</thead>
<tbody>
<tr>
<td>param</td>
<td>Input arguments to procedure</td>
<td>Any number</td>
</tr>
<tr>
<td>return</td>
<td>Procedure return values</td>
<td>Any number</td>
</tr>
<tr>
<td>internal</td>
<td>Internal procedure working variables</td>
<td>Any number</td>
</tr>
<tr>
<td>code</td>
<td>Procedure assembly code</td>
<td>Zero or once / impl</td>
</tr>
<tr>
<td>asm_file_dep</td>
<td>External assembly file references</td>
<td>Any number   </td>
</tr>
</tbody>
</table>
<p>We also see that <code>impl</code> contains a <code>chip_family</code> attribute, which specifies the 
chip family or families that the implementation is valid for 
("0" for CC13x0/CC26x0, "1" for CC13xx/CC26xx). For some procedures only one 
chip family is supported, or different implementations are required for each 
chip family. In our case it will be valid for both, so we use "0,1". It is 
possible to have multiple implementations that take different combinations 
of input parameters. </p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_12')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_12" class="hljs xml"><span class="hljs-pi">&lt;?xml version="1.0" encoding="ISO-8859-15"?&gt;</span>
<span class="hljs-doctype">&lt;!DOCTYPE proc_def SYSTEM "proc_def.dtd"[]&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">proc_def</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"gpioGetInputPairState"</span> <span class="hljs-attribute">version</span>=<span class="hljs-value">"1.0.0"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">desc</span>&gt;</span>
    <span class="hljs-cdata">&lt;![CDATA[
        &lt;p&gt;
        Returns the state of a given pin pair A and B.
        &lt;/p&gt; &lt;p&gt;
        The state is the combined value of input A and B where input A is bit 0 and input B is bit 1.
        This means possible state values is 0, 1, 2 or 3.
        &lt;/p&gt;
    ]]&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">desc</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">task_resource_ref</span>&gt;</span>Digital Input Pins<span class="hljs-tag">&lt;/<span class="hljs-title">task_resource_ref</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">task_resource_ref</span>&gt;</span>Digital Open-Drain Pins<span class="hljs-tag">&lt;/<span class="hljs-title">task_resource_ref</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">task_resource_ref</span>&gt;</span>Digital Open-Source Pins<span class="hljs-tag">&lt;/<span class="hljs-title">task_resource_ref</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">impl</span> <span class="hljs-attribute">chip_family</span>=<span class="hljs-value">"0,1"</span>&gt;</span>
    ...
  <span class="hljs-tag">&lt;/<span class="hljs-title">impl</span>&gt;</span>
  ...
<span class="hljs-tag">&lt;/<span class="hljs-title">proc_def</span>&gt;</span>
</code></pre><span class="code-title"><p><strong>gpio_get_input_pair_state.prd</strong> â€“ Added implementation child</p>
</span></div></div>
<h2 class="body-heading" id="defining-procedure-input-and-output-arguments">Defining Procedure Input and Output Arguments<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#defining-procedure-input-and-output-arguments"></a></h2><p>We now need to specify the input arguments to the procedure. These arguments 
will contribute to the final task code prototype: 
<code>procedureName(input params; output return);</code>.</p>
<p>As the goal of our procedure is to sample differential input pins, we need two 
input arguments, one for each input pin. A input argument is defined in the 
procedure file by adding a <code>param</code> child element to the <code>impl</code> element. Looking 
at the DTD file, we see that <code>param</code> has the following attributes:</p>
<ul>
<li>type</li>
<li>name</li>
<li>reg</li>
</ul>
<p>The default <code>type</code> is <code>reg</code> which means the parameter is passed into the 
procedure via a register. This allows the input parameter to be either a local
task code variable or a constant. The other <code>type</code> is <code>imm</code> which means the 
parameter is a fixed immediate value which can be hardcoded during compile time. 
In our procedure we will use the <code>imm</code> type as the input parameters are the pin 
numbers which we consider to be constant. Using immediate value parameters can 
often be more efficient than register value parameters.</p>
<p>The <code>name</code> attribute is required and specifies the name of the input parameter.
The <code>reg</code> attribute is optional and can be used when <code>type</code> is set to <code>reg</code> to
specify which register (R0-R7) to use. This is normally only needed when calling
subroutines in external assembly files, where all register usage is hardcoded. 
If not specified, the compiler can choose freely which register to use.
As we use the <code>imm</code> type, this is not applicable.</p>
<p>Our procedure file after adding two input parameters named <code>auxioA</code> and <code>auxioB</code>:</p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_13')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_13" class="hljs xml"><span class="hljs-pi">&lt;?xml version="1.0" encoding="ISO-8859-15"?&gt;</span>
<span class="hljs-doctype">&lt;!DOCTYPE proc_def SYSTEM "proc_def.dtd"[]&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">proc_def</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"gpioGetInputPairState"</span> <span class="hljs-attribute">version</span>=<span class="hljs-value">"1.0.0"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">desc</span>&gt;</span>
    <span class="hljs-cdata">&lt;![CDATA[
        &lt;p&gt;
        Returns the state of a given pin pair A and B.
        &lt;/p&gt; &lt;p&gt;
        The state is the combined value of input A and B where input A is bit 0 and input B is bit 1.
        This means possible state values is 0, 1, 2 or 3.
        &lt;/p&gt;
    ]]&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">desc</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">task_resource_ref</span>&gt;</span>Digital Input Pins<span class="hljs-tag">&lt;/<span class="hljs-title">task_resource_ref</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">task_resource_ref</span>&gt;</span>Digital Open-Drain Pins<span class="hljs-tag">&lt;/<span class="hljs-title">task_resource_ref</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">task_resource_ref</span>&gt;</span>Digital Open-Source Pins<span class="hljs-tag">&lt;/<span class="hljs-title">task_resource_ref</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">impl</span> <span class="hljs-attribute">chip_family</span>=<span class="hljs-value">"0,1"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">param</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"imm"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"auxioA"</span>&gt;</span>GPIO pin A in the pair (index of AUX I/O pin)<span class="hljs-tag">&lt;/<span class="hljs-title">param</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">param</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"imm"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"auxioB"</span>&gt;</span>GPIO pin B in the pair (index of AUX I/O pin)<span class="hljs-tag">&lt;/<span class="hljs-title">param</span>&gt;</span>
    ...
  <span class="hljs-tag">&lt;/<span class="hljs-title">impl</span>&gt;</span>
  ...
<span class="hljs-tag">&lt;/<span class="hljs-title">proc_def</span>&gt;</span>
</code></pre><span class="code-title"><p><strong>gpio_get_input_pair_state.prd</strong> â€“ Added input parameters</p>
</span></div></div>
<p>Now that we have added our input arguments, we also need to add a return 
element by adding a <code>return</code> child element to our procedure file. This is 
required so that the procedure can pass the new state back to the task code. 
A <code>return</code> element follows the same logic as a <code>param</code> element with the 
exception that it has no <code>type</code> attribute as it must always be a register. Adding
a <code>state</code> return element to out procedure file gives us:</p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_14')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_14" class="hljs xml"><span class="hljs-pi">&lt;?xml version="1.0" encoding="ISO-8859-15"?&gt;</span>
<span class="hljs-doctype">&lt;!DOCTYPE proc_def SYSTEM "proc_def.dtd"[]&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">proc_def</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"gpioGetInputPairState"</span> <span class="hljs-attribute">version</span>=<span class="hljs-value">"1.0.0"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">desc</span>&gt;</span>
    <span class="hljs-cdata">&lt;![CDATA[
        &lt;p&gt;
        Returns the state of a given pin pair A and B.
        &lt;/p&gt; &lt;p&gt;
        The state is the combined value of input A and B where input A is bit 0 and input B is bit 1.
        This means possible state values is 0, 1, 2 or 3.
        &lt;/p&gt;
    ]]&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">desc</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">task_resource_ref</span>&gt;</span>Digital Input Pins<span class="hljs-tag">&lt;/<span class="hljs-title">task_resource_ref</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">task_resource_ref</span>&gt;</span>Digital Open-Drain Pins<span class="hljs-tag">&lt;/<span class="hljs-title">task_resource_ref</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">task_resource_ref</span>&gt;</span>Digital Open-Source Pins<span class="hljs-tag">&lt;/<span class="hljs-title">task_resource_ref</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">impl</span> <span class="hljs-attribute">chip_family</span>=<span class="hljs-value">"0,1"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">param</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"imm"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"auxioA"</span>&gt;</span>GPIO pin A in the pair (index of AUX I/O pin)<span class="hljs-tag">&lt;/<span class="hljs-title">param</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">param</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"imm"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"auxioB"</span>&gt;</span>GPIO pin B in the pair (index of AUX I/O pin)<span class="hljs-tag">&lt;/<span class="hljs-title">param</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">return</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"state"</span>&gt;</span>The GPIO pin pair state value (3, 2, 1, 0)<span class="hljs-tag">&lt;/<span class="hljs-title">return</span>&gt;</span>
    ...
  <span class="hljs-tag">&lt;/<span class="hljs-title">impl</span>&gt;</span>
  ...
<span class="hljs-tag">&lt;/<span class="hljs-title">proc_def</span>&gt;</span>
</code></pre><span class="code-title"><p><strong>gpio_get_input_pair_state.prd</strong> â€“ Added return parameters</p>
</span></div></div>
<p>Before we get to writing the assembly code of our procedure, lets
briefly touch on the next potential child element, <code>internal</code>. This element is
similar to the <code>return</code> element in that it always uses a register. The 
<code>internal</code> element is used when you need additional working registers in the 
assembly code but don't want these to be input/output arguments to the procedure.</p>
<h2 class="body-heading" id="writing-mockup-assembly">Writing Mockup Assembly<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#writing-mockup-assembly"></a></h2><p>We have now reached the assembly code section of the procedure file (or the <code>code</code>
child element of the <code>impl</code> element to be precise). We will use 4 different 
assembly instructions when implementing our new procedure:</p>
<ul>
<li><strong>ld</strong> â€“ Read as "load". Used to set initial return state</li>
<li><strong>iobtst</strong> â€“ Read as "I/O bit test". Used to test an input bit</li>
<li><strong>biob0</strong> â€“ Read as "Branch on IO test 0". Used to conditional branch based on the <strong>iobtst</strong> result</li>
<li><strong>or</strong> â€“ To update return state based on input</li>
</ul>
<p>Using this set of instructions, we start by putting together some mockup
assembly for reading the differential input state. Note that the use of 
registers are arbitrary in the code below. </p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_15')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_15" class="hljs bash">; Reset <span class="hljs-built_in">return</span> state to <span class="hljs-string">"0"</span>
ld          R0, <span class="hljs-comment">#0</span>

; Test input A
iobtst      <span class="hljs-comment">#(INPUT_A_PIN_NUMBER &amp; 0x7), [#(IOP_AIODIO0_GPIODIN + (INPUT_A_PIN_NUMBER &gt;&gt; 3))]</span>
biob0       /<span class="hljs-keyword">if</span>InputAIsNotSet
    ; Input A was <span class="hljs-built_in">set</span>, <span class="hljs-built_in">set</span> the corresponding but <span class="hljs-keyword">in</span> the output state register
    or        R0, <span class="hljs-comment">#1</span>

/<span class="hljs-keyword">if</span>InputAIsNotSet:
; Test input B
iobtst      <span class="hljs-comment">#(INPUT_B_PIN_NUMBER &amp; 0x7), [#(IOP_AIODIO0_GPIODIN + (INPUT_B_PIN_NUMBER &gt;&gt; 3))]</span>
biob0       /<span class="hljs-keyword">if</span>InputBIsNotSet
    ; Input B was <span class="hljs-built_in">set</span>, <span class="hljs-built_in">set</span> the corresponding but <span class="hljs-keyword">in</span> the output state register
    or        R0, <span class="hljs-comment">#2</span>

/<span class="hljs-keyword">if</span>InputBIsNotSet:
</code></pre><span class="code-title"><p><strong>Mockup assembly code</strong></p>
</span></div></div>
<p>While most of the mockup assembly code might be relative easy to understand, let
us quickly touch on the <code>iobtst</code> instruction part. This instruction allows us to
test any of the 8 LSBs of a register. In the Sensor Controller, I/O input and 
output register is assigned in groups of 8, for example:</p>
<ul>
<li>IOP_AIODIO0_GPIODIN â€“ pin 0 - 7</li>
<li>IOP_AIODIO1_GPIODIN â€“ pin 8 - 15</li>
<li>IOP_AIODIO2_GPIODIN â€“ pin 16 - 23</li>
<li>IOP_AIODIO3_GPIODIN â€“ pin 24 - 31</li>
</ul>
<p>This allows the user to use instructions such as <code>iobtst</code> to for example test 
the input value of a given pin. The total number of registers depend on the 
number of I/Os that is available which varies between device families. For 
example, in the case of the CC13xx/CC26xx chip family, there is a total of four 
registers (as seen above) for a total of 32 I/Os.</p>
<p>These registers are linearly mapped in memory which is why we can test the input 
of any given input pin using the following code:</p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_16')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_16" class="hljs nginx"><span class="hljs-title">iobtst</span>      <span class="hljs-comment">#(INPUT_A_PIN_NUMBER &amp; 0x7), [#(IOP_AIODIO0_GPIODIN + (INPUT_A_PIN_NUMBER &gt;&gt; 3))]</span>
</code></pre><span class="code-title"><p><strong>iobtst</strong> â€“ Testing input puns</p>
</span></div></div>
<p>By shifting the input pin number right 3 steps, we get the register offset which
is then added to the first of register address. For example, if 
<code>INPUT_A_PIN_NUMBER</code> was pin number 5, we would get 
<code>IOP_AIODIO0_GPIODIN + (0)</code> as 5 right shifted by three is 0. If the pin
number was instead 10, we would get <code>IOP_AIODIO0_GPIODIN + (1)</code> which is the same
as <code>IOP_AIODIO1_GPIODIN</code> which is the register containing the pin number 10 
input value.</p>
<div class="bs-callout bs-callout-info "><h4><span class="glyphicon glyphicon-info-sign gi-2x" style="vertical-align: middle; margin-right: 0.2em;"></span><span style="vertical-align: middle;">Where can I find these register definitions?!
</span></h4>
<p>    Register definitions can be found in the <code>fw_template</code> subfolder inside the 
    SCS installation directory. </p>
<p>    The file <code>reg_defs__X.asm</code> contains most common register definitions and
    bit-masks. The <code>X</code> is either <code>0</code> or <code>1</code> depending on the chip family where
    <code>0</code> is defines for the CC13x0 / CC26x0 family and <code>1</code> is defines for the
    CC13xx / CC26xx family. </p>
<p>    Beside from the <code>reg_defs__X.asm</code> file, there are several other definition 
    files available in the <code>fw_template</code> folder which might be useful depending 
    on which register space you want to access (AUX, ADI, DDI). </p>
<p>    Common for all of these is that they map to the device register according
    to the <code>Alias Address</code> given in the <a href="#technical-reference-manuals">Technical Reference Manual</a>.
    For example, <code>IOP_AIODIO0_GPIODIN</code> has the original address of 
    <strong>0x400C C010</strong> and the <code>Alias Address</code> <strong>190</strong>. The latter is what is used
    together with the Sensor Controller instruction set.</p>
</div>
<h2 class="body-heading" id="going-from-mockup-assembly-to-procedure-assembly">Going from Mockup Assembly to Procedure Assembly<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#going-from-mockup-assembly-to-procedure-assembly"></a></h2><p>With our mockup assembly code in place, we can now work to put it into our
procedure file. In order to do this there is a few modifications we need to 
do in order to follow procedure file "syntax". </p>
<p>Reading the "INLINE ASSEMBLY CODE" section of the DTD file we can see that 
register access need to be annotated in terms of usage. What this means is that
we need to annotate each register access as a "get", "modify" or "set". Doing this
allows for the compiler to optimize the task code during compilation and to 
ensure that there is no unexpected register usages. </p>
<p>The annotation of register accesses is done using the RG{x} (get) RM{x} (modify) 
and RS{x} set markers. The "x" needs to be replaced with the name of the parameter 
which is getting accessed. This means that in our mockup assembly code where we
want to return the parameter named <code>state</code>, we replace "R0" with "state" and add
the suiting access marker:</p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_17')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_17" class="hljs bash">; Reset <span class="hljs-built_in">return</span> state to <span class="hljs-string">"0"</span>
ld          RS{state}, <span class="hljs-comment">#0 ; We "set" the value</span>

; Test input A
iobtst      <span class="hljs-comment">#(INPUT_A_PIN_NUMBER &amp; 0x7), [#(IOP_AIODIO0_GPIODIN + (INPUT_A_PIN_NUMBER &gt;&gt; 3))]</span>
biob0       /<span class="hljs-keyword">if</span>InputAIsNotSet
    ; Input A was <span class="hljs-built_in">set</span>, <span class="hljs-built_in">set</span> the corresponding but <span class="hljs-keyword">in</span> the output state register
    or        RM{state}, <span class="hljs-comment">#1 ; We "modify" the value</span>

/<span class="hljs-keyword">if</span>InputAIsNotSet:
; Test input B
iobtst      <span class="hljs-comment">#(INPUT_B_PIN_NUMBER &amp; 0x7), [#(IOP_AIODIO0_GPIODIN + (INPUT_B_PIN_NUMBER &gt;&gt; 3))]</span>
biob0       /<span class="hljs-keyword">if</span>InputBIsNotSet
    ; Input B was <span class="hljs-built_in">set</span>, <span class="hljs-built_in">set</span> the corresponding but <span class="hljs-keyword">in</span> the output state register
    or        RM{state}, <span class="hljs-comment">#2 ; We "modify" the value</span>

/<span class="hljs-keyword">if</span>InputBIsNotSet:
</code></pre><span class="code-title"><p><strong>Mockup assembly code</strong> - Register access markers added</p>
</span></div></div>
<p>In the same DTD section, we also find that in the procedure files, labels need 
to be annotated with a L{x} marker. This to prevent name conflicts if calling
the procedure multiple times, or if another procedure use the same label names.</p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_18')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_18" class="hljs bash">; Reset <span class="hljs-built_in">return</span> state to <span class="hljs-string">"0"</span>
ld          RS{state}, <span class="hljs-comment">#0 ; We "set" the value</span>

; Test input A
iobtst      <span class="hljs-comment">#(INPUT_A_PIN_NUMBER &amp; 0x7), [#(IOP_AIODIO0_GPIODIN + (INPUT_A_PIN_NUMBER &gt;&gt; 3))]</span>
biob0       L{<span class="hljs-keyword">if</span>InputAIsNotSet}
    ; Input A was <span class="hljs-built_in">set</span>, <span class="hljs-built_in">set</span> the corresponding but <span class="hljs-keyword">in</span> the output state register
    or        RM{state}, <span class="hljs-comment">#1 ; We "modify" the value</span>

L{<span class="hljs-keyword">if</span>InputAIsNotSet}:
; Test input B
iobtst      <span class="hljs-comment">#(INPUT_B_PIN_NUMBER &amp; 0x7), [#(IOP_AIODIO0_GPIODIN + (INPUT_B_PIN_NUMBER &gt;&gt; 3))]</span>
biob0       L{<span class="hljs-keyword">if</span>InputBIsNotSet}
    ; Input B was <span class="hljs-built_in">set</span>, <span class="hljs-built_in">set</span> the corresponding but <span class="hljs-keyword">in</span> the output state register
    or        RM{state}, <span class="hljs-comment">#2 ; We "modify" the value</span>

L{<span class="hljs-keyword">if</span>InputBIsNotSet}:
</code></pre><span class="code-title"><p><strong>Mockup assembly code</strong> - Annotated labels</p>
</span></div></div>
<p>We now need to replace <code>INPUT_A_PIN_NUMBER</code> and <code>INPUT_B_PIN_NUMBER</code> with the
input parameters we defined previously. As our input parameters is of the 
<code>imm</code> type, we must use the I{x} annotation to use the value in the assembly 
code. This means that <code>INPUT_A_PIN_NUMBER</code> needs to be replaced with <code>I{auxioA}</code> 
and <code>INPUT_B_PIN_NUMBER</code> needs to be replaced with <code>I{auxioB}</code>:</p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_19')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_19" class="hljs bash">; Reset <span class="hljs-built_in">return</span> state to <span class="hljs-string">"0"</span>
ld          RS{state}, <span class="hljs-comment">#0 ; We "set" the value</span>

; Test input A
iobtst      <span class="hljs-comment">#(I{auxioA} &amp; 0x7), [#(IOP_AIODIO0_GPIODIN + (I{auxioA} &gt;&gt; 3))]</span>
biob0       L{<span class="hljs-keyword">if</span>InputAIsNotSet}
    ; Input A was <span class="hljs-built_in">set</span>, <span class="hljs-built_in">set</span> the corresponding but <span class="hljs-keyword">in</span> the output state register
    or        RM{state}, <span class="hljs-comment">#1 ; We "modify" the value</span>

L{<span class="hljs-keyword">if</span>InputAIsNotSet}:
; Test input B
iobtst      <span class="hljs-comment">#(I{auxioB} &amp; 0x7), [#(IOP_AIODIO0_GPIODIN + (I{auxioB} &gt;&gt; 3))]</span>
biob0       L{<span class="hljs-keyword">if</span>InputBIsNotSet}
    ; Input B was <span class="hljs-built_in">set</span>, <span class="hljs-built_in">set</span> the corresponding but <span class="hljs-keyword">in</span> the output state register
    or        RM{state}, <span class="hljs-comment">#2 ; We "modify" the value</span>

L{<span class="hljs-keyword">if</span>InputBIsNotSet}:
</code></pre><span class="code-title"><p><strong>Mockup assembly code</strong> - Using input immediate values in the assembly</p>
</span></div></div>
<p>As a last touch, we need to make a small addition to the assembly code related 
to how the SCS compiler optimizes the code. To ensure that the return value 
<code>state</code> is not optimized away, we need to perform a "dummy reference"
annotated as a read operation. This reference is not an actual assembly 
instruction and will only be used when compiling the code. With this reference 
in place, the assembly code is ready to be added to our procedure file.</p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_20')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_20" class="hljs bash">; Reset <span class="hljs-built_in">return</span> state to <span class="hljs-string">"0"</span>
ld          RS{state}, <span class="hljs-comment">#0 ; We "set" the value</span>

; Test input A
iobtst      <span class="hljs-comment">#(I{auxioA} &amp; 0x7), [#(IOP_AIODIO0_GPIODIN + (I{auxioA} &gt;&gt; 3))]</span>
biob0       L{<span class="hljs-keyword">if</span>InputAIsNotSet}
    ; Input A was <span class="hljs-built_in">set</span>, <span class="hljs-built_in">set</span> the corresponding but <span class="hljs-keyword">in</span> the output state register
    or        RM{state}, <span class="hljs-comment">#1 ; We "modify" the value</span>

L{<span class="hljs-keyword">if</span>InputAIsNotSet}:
; Test input B
iobtst      <span class="hljs-comment">#(I{auxioB} &amp; 0x7), [#(IOP_AIODIO0_GPIODIN + (I{auxioB} &gt;&gt; 3))]</span>
biob0       L{<span class="hljs-keyword">if</span>InputBIsNotSet}
    ; Input B was <span class="hljs-built_in">set</span>, <span class="hljs-built_in">set</span> the corresponding but <span class="hljs-keyword">in</span> the output state register
    or        RM{state}, <span class="hljs-comment">#2 ; We "modify" the value</span>

L{<span class="hljs-keyword">if</span>InputBIsNotSet}:

; Dummy <span class="hljs-built_in">read</span> reference of the <span class="hljs-built_in">return</span> value
ref         RG{state}
</code></pre><span class="code-title"><p><strong>Procedure worthy assembly code</strong></p>
</span></div></div>
<h2 class="body-heading" id="finishing-up-the-new-procedure">Finishing up the New Procedure<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#finishing-up-the-new-procedure"></a></h2><p>With the assembly code adjusted to fit the procedure file, we can now add it
as the <code>code</code> child element of the <code>impl</code> element. Note that the <code>code</code> element,
just as the <code>desc</code> element in the start of our procedure file, will contain
parsed character data.</p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_21')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_21" class="hljs xml"><span class="hljs-pi">&lt;?xml version="1.0" encoding="ISO-8859-15"?&gt;</span>
<span class="hljs-doctype">&lt;!DOCTYPE proc_def SYSTEM "proc_def.dtd"[]&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">proc_def</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"gpioGetInputPairState"</span> <span class="hljs-attribute">version</span>=<span class="hljs-value">"1.0.0"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">desc</span>&gt;</span>
    <span class="hljs-cdata">&lt;![CDATA[
        &lt;p&gt;
        Returns the state of a given pin pair A and B.
        &lt;/p&gt; &lt;p&gt;
        The state is the combined value of input A and B where input A is bit 0 and input B is bit 1.
        This means possible state values is 0, 1, 2 or 3.
        &lt;/p&gt;
    ]]&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">desc</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">task_resource_ref</span>&gt;</span>Digital Input Pins<span class="hljs-tag">&lt;/<span class="hljs-title">task_resource_ref</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">task_resource_ref</span>&gt;</span>Digital Open-Drain Pins<span class="hljs-tag">&lt;/<span class="hljs-title">task_resource_ref</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">task_resource_ref</span>&gt;</span>Digital Open-Source Pins<span class="hljs-tag">&lt;/<span class="hljs-title">task_resource_ref</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">impl</span> <span class="hljs-attribute">chip_family</span>=<span class="hljs-value">"0,1"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">param</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"imm"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"auxioA"</span>&gt;</span>GPIO pin A in the pair (index of AUX I/O pin)<span class="hljs-tag">&lt;/<span class="hljs-title">param</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">param</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"imm"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"auxioB"</span>&gt;</span>GPIO pin B in the pair (index of AUX I/O pin)<span class="hljs-tag">&lt;/<span class="hljs-title">param</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">return</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"state"</span>&gt;</span>The GPIO pin pair state value (3, 2, 1, 0)<span class="hljs-tag">&lt;/<span class="hljs-title">return</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">code</span>&gt;</span>
      <span class="hljs-cdata">&lt;![CDATA[
          ; Reset return state to "0"
          ld          RS{state}, #0 ; We "set" the value

          ; Test input A
          iobtst      #(I{auxioA} &amp; 0x7), [#(IOP_AIODIO0_GPIODIN + (I{auxioA} &gt;&gt; 3))]
          biob0       L{ifInputAIsNotSet}
              ; Input A was set, set the corresponding but in the output state register
              or        RM{state}, #1 ; We "modify" the value

          L{ifInputAIsNotSet}:
          ; Test input B
          iobtst      #(I{auxioB} &amp; 0x7), [#(IOP_AIODIO0_GPIODIN + (I{auxioB} &gt;&gt; 3))]
          biob0       L{ifInputBIsNotSet}
              ; Input B was set, set the corresponding but in the output state register
              or        RM{state}, #2 ; We "modify" the value

          L{ifInputBIsNotSet}:

          ; Dummy read reference of the return value
          ref         RG{state}
      ]]&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">code</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">impl</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">proc_def</span>&gt;</span>
</code></pre><span class="code-title"><p><strong>gpio_get_input_pair_state.prd</strong> - Complete procedure file</p>
</span></div></div>
<p>With our procedure file now completed, it is time to save it and see if we
can access it from SCS. Before we can access it, we need to restart SCS in order
for it to reload the procedure files. After a restart, we find a our new 
procedure being available in the task code view, highlighted in the color pink 
(all custom procedures will be highlighted in pink) as in the picture below.</p>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/scs_custom_procedure.png" alt="SCS custom procedure" class="img-responsive"></div><p></p>
<h1 class="body-heading" id="task-4-ndash-quadrature-decoder-implementation-take-two">Task 4 â€“ Quadrature Decoder Implementation, Take Two<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#task-4-ndash-quadrature-decoder-implementation-take-two"></a></h1><p>Let us put our new procedure to the test by swapping out the "read section" of 
the execution code from our initial application from Task 2:</p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_22')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_22" class="lang-c hljs cpp">U16 end = <span class="hljs-number">0</span>;

<span class="hljs-keyword">do</span> {
    <span class="hljs-comment">// Read input state</span>
    U16 newState:
    gpioGetInputPairState(AUXIO_I_QD_INPUT_A, AUXIO_I_QD_INPUT_B; newState);

    <span class="hljs-comment">// Check state transition</span>
    U16 lastState = state.lastState;
    <span class="hljs-keyword">if</span> (newState != lastState) {
        <span class="hljs-comment">// Assume a "negative" direction per default</span>
        U16 direction = <span class="hljs-number">0</span>;

        <span class="hljs-comment">// If last state was "0", valid transitions are to "1" or "2"</span>
        <span class="hljs-keyword">if</span> (lastState == <span class="hljs-number">0</span>) {
            <span class="hljs-keyword">if</span> (newState == <span class="hljs-number">1</span>) {
                <span class="hljs-comment">// If state changes to "1" then the direction is "positive"</span>
                direction = <span class="hljs-number">1</span>;
            } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (newState == <span class="hljs-number">3</span>) {
                output.errors += <span class="hljs-number">1</span>;
            }

        <span class="hljs-comment">// If last state was "1", valid transitions are to "3" or "0"</span>
        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (lastState == <span class="hljs-number">1</span>) {
            <span class="hljs-keyword">if</span> (newState == <span class="hljs-number">3</span>) {
                <span class="hljs-comment">// If state changes to "3" then the direction is "positive"</span>
                direction = <span class="hljs-number">1</span>;
            } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (newState == <span class="hljs-number">2</span>) {
                output.errors += <span class="hljs-number">1</span>;
            }

        <span class="hljs-comment">// If last state was "2", valid transitions are to "0" or "3"</span>
        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (lastState == <span class="hljs-number">2</span>) {
            <span class="hljs-keyword">if</span> (newState == <span class="hljs-number">0</span>) {
                <span class="hljs-comment">// If state changes to "0" then the direction is "positive"</span>
                direction = <span class="hljs-number">1</span>;
            } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (newState == <span class="hljs-number">1</span>) {
                output.errors += <span class="hljs-number">1</span>;
            }

        <span class="hljs-comment">// If last state was "3" (as it was not 0-2) , valid transitions are to "2" or "1"</span>
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-keyword">if</span> (newState == <span class="hljs-number">2</span>) {
                <span class="hljs-comment">// If state changes to "2" then the direction is "positive"</span>
                direction = <span class="hljs-number">1</span>;
            } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (newState == <span class="hljs-number">0</span>) {
                output.errors += <span class="hljs-number">1</span>;
            }
        }

        <span class="hljs-comment">// Update output variables accordingly</span>
        <span class="hljs-keyword">if</span> (direction == <span class="hljs-number">1</span>) {
            output.currentStep += <span class="hljs-number">1</span>;
        } <span class="hljs-keyword">else</span> {
            output.currentStep -= <span class="hljs-number">1</span>;
        }

        <span class="hljs-comment">// Log structures</span>
        rtlLogStructs(BV_RTL_LOG_OUTPUT | BV_RTL_LOG_STATE);
    }

    <span class="hljs-comment">// Update last state</span>
    state.lastState = newState;

    <span class="hljs-comment">// Toogle debug LED</span>
    gpioToggleOutput(AUXIO_O_QD_OUTPUT_LED);

    <span class="hljs-comment">// This loop will never break</span>
} <span class="hljs-keyword">while</span>(end == <span class="hljs-number">0</span>);
</code></pre><span class="code-title"><p><strong>Execution Code</strong> â€“ Second quadrature decoder solution</p>
</span></div></div>
<p>Before we have a look at the listing file of our updated application, take a
few minutes to verify the application behavior and make sure that it still 
behaves just like in Task 2.</p>
<h2 class="body-heading" id="looking-at-the-listing-file">Looking at the Listing File<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#looking-at-the-listing-file"></a></h2><p>It is time to perform a new code generation and have a look at the updated 
listing file to see how all of this impacted the assembly output. </p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_23')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_23" class="hljs perl">                ...

                ;?     <span class="hljs-regexp">//</span> Read input <span class="hljs-keyword">state</span>
                ;?     U16 newState:
                ;?     gpioGetInputPairState(AUXIO_I_QD_INPUT_A, AUXIO_I_QD_INPUT_B; newState);
  <span class="hljs-number">00</span>d9 ---- <span class="hljs-number">1000</span>                             ld          R1, <span class="hljs-comment">#0</span>
  <span class="hljs-number">00</span>da ---- <span class="hljs-number">34</span>be                             iobtst      <span class="hljs-comment">#(4 &amp; 0x7), [#(IOP_AIODIO0_GPIODIN + (4 &gt;&gt; 3))]</span>
  <span class="hljs-number">00</span>db ---- a601                             biob<span class="hljs-number">0</span>       /id0069
  <span class="hljs-number">00</span>dc ---- <span class="hljs-number">9201</span>                             <span class="hljs-keyword">or</span>          R1, <span class="hljs-comment">#1</span>
                /id0069:
  <span class="hljs-number">00</span>dd ---- <span class="hljs-number">27</span>be                             iobtst      <span class="hljs-comment">#(3 &amp; 0x7), [#(IOP_AIODIO0_GPIODIN + (3 &gt;&gt; 3))]</span>
  <span class="hljs-number">00</span>de ---- a601                             biob<span class="hljs-number">0</span>       /id007<span class="hljs-number">0</span>
  <span class="hljs-number">00</span>df ---- <span class="hljs-number">9202</span>                             <span class="hljs-keyword">or</span>          R1, <span class="hljs-comment">#2</span>
                /id007<span class="hljs-number">0</span>:
                ;?
                ;?     <span class="hljs-regexp">//</span> Check <span class="hljs-keyword">state</span> transition
                ;?     U16 lastState = <span class="hljs-keyword">state</span>.lastState;

                ...
</code></pre><span class="code-title"><p><strong>Listing file output</strong> â€“ Resulting code using custom procedure</p>
</span></div></div>
<p>Looking at the listing file, we can clearly see the assembly code corresponding to 
that of our new procedure. We can see how all the special procedure file annotations,
such as the register access markers, is no more. We also see that our immediate 
type input parameters has been substituted by the constant value that we pass
in to the procedure in our execution code.</p>
<p>Comparing the new assembly with the one from the initial application, it 
seems that we managed to shrink the input "sample-to-sample delay" from 11 
instructions down to a maximum of 4. As a bonus, we also eliminated the three 
instructions needed to create the <code>newState</code> variable. This means that our new 
code goes from 25 instructions to get the <code>newState</code> variable, down to a maximum 
of 7 instructions. This means our worst case loop instruction count went down 
from 57 to 39 which in time means we shaved of roughly 1.5 us from the execution 
time!</p>
<div class="bs-callout bs-callout-success "><h4><span class="glyphicon glyphicon-ok-sign gi-2x" style="vertical-align: middle; margin-right: 0.2em;"></span><span style="vertical-align: middle;">That is good enough, is it not?
</span></h4>
<p>      Going from roughly 4.75us down to 3.25us indeed is great, but we can 
      do better!</p>
<p>      We have now addressed our sampling delay and at the same time saved
      18 instructions. Let us now focus on how we can improve the second part of
      our code, responsible for the count update. It is time to create our 
      first custom resource!</p>
</div>
<h1 class="body-heading" id="coffee-break-">Coffee Break!<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#coffee-break-"></a></h1><p>Time to stand up, shake those legs and arms. Go grab a cup of coffee/other brew
or take a power nap. It is still a long way to go!</p>
<h1 class="body-heading" id="task-5-ndash-adding-a-new-resource">Task 5 â€“ Adding A New Resource<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#task-5-ndash-adding-a-new-resource"></a></h1><p>While there are multiple paths to improving the second part of our application
loop, many of them not including writing any resources or procedures, we will
for the purpose of this training choose to walk the complex path. This means 
that we will not try to optimize our task code for performance first, we will 
dive straight into making a new resource and writing some more assembly!</p>
<p>Before diving into adding a new resource to SCS, let us look over what feature
set we would like our new resource to incorporate. We would like to add:</p>
<ul>
<li>A "Quadrature Decoder" resource: Including a procedures that check and evaluate the new input state and return the status. </li>
<li>A signed 16-bit data member to count state transitions</li>
<li>A unsigned 16-bit data member to count number of invalid state transitions
states, just like our application does today.</li>
</ul>
<h2 class="body-heading" id="creating-a-resource-file">Creating a Resource File<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#creating-a-resource-file"></a></h2><p>Similar to <a href="#creating-a-procedure-file">adding a new procedure</a> file, we can add 
a new resource file inside the <code>C:\Users\&lt;WIN_USER&gt;\Documents\Texas Instruments\Sensor Controller Studio\</code>
directory by placing a new file inside the <code>resource_defs</code> sub-folder.</p>
<p>As was the case for procedures, there is DTD file available for resources. This
DTD file is named <code>resource_def.dtd</code> and is found inside the SCS installation 
directory under the sub-folder <code>resource_defs</code>.</p>
<p>We start by creating a new <code>quadrature_decoder.red</code> file inside the user local
<code>resource_defs</code> folder and opening it, as well the resource DTD file, up in a
text editor. With both files open, we can now start building up the resource 
file following the same methodology as when creating our procedure file.
We start by specify the XML version and document type at the top of the file:</p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_24')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_24" class="hljs xml"><span class="hljs-pi">&lt;?xml version="1.0" encoding="ISO-8859-15"?&gt;</span>
<span class="hljs-doctype">&lt;!DOCTYPE resource_def SYSTEM "resource_def.dtd"[]&gt;</span>
</code></pre><span class="code-title"><p><strong>quadrature_decoder.red</strong> â€“ Common resource file header</p>
</span></div></div>
<h2 class="body-heading" id="adding-the-resource_def-element">Adding the "resource_def" Element<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#adding-the-resource_def-element"></a></h2><p>Similar to creating the procedure, we find that the first element to add is the
<code>resource_def</code> element and that the DTD specifies that it <strong>need</strong> to include 
the following child element:</p>
<table class="table table-striped table-bordered">
<thead>
<tr>
<th>Element</th>
<th>Used for</th>
<th>Number of occurrences</th>
</tr>
</thead>
<tbody>
<tr>
<td>desc</td>
<td>Resource description and/or documentation</td>
<td>Once only</td>
</tr>
</tbody>
</table>
<p>The <strong>optional</strong> child elements are:</p>
<table class="table table-striped table-bordered">
<thead>
<tr>
<th>Element</th>
<th>Used for</th>
<th>Number of occurrences</th>
</tr>
</thead>
<tbody>
<tr>
<td>example</td>
<td>Resource example documentation</td>
<td>Any number</td>
</tr>
<tr>
<td>chip_family_migration</td>
<td>Chip migration specific filtering</td>
<td>Zero or once only</td>
</tr>
<tr>
<td>module_ref</td>
<td>Hardware or software modules used</td>
<td>Any number</td>
</tr>
<tr>
<td>io_func_ref</td>
<td>Specifies I/O functions used</td>
<td>Any number</td>
</tr>
<tr>
<td>io_array_size</td>
<td>Multiple instances of the I/O functions</td>
<td>Zero or once only</td>
</tr>
<tr>
<td>io_usage_count</td>
<td>Number of times the resource can be instantiated</td>
<td>Zero or once only</td>
</tr>
<tr>
<td>rattr</td>
<td>Attribute associated with the resource</td>
<td>Any number</td>
</tr>
<tr>
<td>buffer_count</td>
<td>Number of times input or output data are duplicated</td>
<td>Zero or once only</td>
</tr>
<tr>
<td>asm_code</td>
<td>Assembly code to be inserted when using the resource</td>
<td>Any number</td>
</tr>
<tr>
<td>driver_code</td>
<td>C source code to be patched into the generated code</td>
<td>Any number</td>
</tr>
<tr>
<td>conversion</td>
<td>Conversions to be applied to the SCS project once loaded</td>
<td>Any number</td>
</tr>
</tbody>
</table>
<p>We also see that the <code>resource_def</code> element <strong>requires</strong> the following attributes:</p>
<table class="table table-striped table-bordered">
<thead>
<tr>
<th>Element</th>
<th>Used for</th>
</tr>
</thead>
<tbody>
<tr>
<td>chip_family</td>
<td>Specifying supported chip-family(s)</td>
</tr>
<tr>
<td>name</td>
<td>Defining the resource display name</td>
</tr>
<tr>
<td>category</td>
<td>Sorting of the resource inside SCS</td>
</tr>
<tr>
<td>version</td>
<td>Resource version</td>
</tr>
</tbody>
</table>
<p>Let us add the first element and give it the name <code>Quadrature Decoder</code>, make
it available for all chip families and sort it under the <code>Utilities</code>
resource group:</p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_25')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_25" class="hljs xml"><span class="hljs-pi">&lt;?xml version="1.0" encoding="ISO-8859-15"?&gt;</span>
<span class="hljs-doctype">&lt;!DOCTYPE resource_def SYSTEM "resource_def.dtd"[]&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">resource_def</span> <span class="hljs-attribute">chip_family</span>=<span class="hljs-value">"0,1"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"Quadrature Decoder"</span> <span class="hljs-attribute">category</span>=<span class="hljs-value">"Utilities"</span> <span class="hljs-attribute">version</span>=<span class="hljs-value">"1.0.0"</span>&gt;</span>
  ...
<span class="hljs-tag">&lt;/<span class="hljs-title">resource_def</span>&gt;</span>
</code></pre><span class="code-title"><p><strong>quadrature_decoder.red</strong> â€“ Added resource_def element</p>
</span></div></div>
<h2 class="body-heading" id="adding-the-desc-element">Adding the "desc" Element<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#adding-the-desc-element"></a></h2><p>The <code>desc</code> child element has the exact same purpose as in the procedure case, 
serving as the documentation for the resource which is displayed in for example
the SCS help section. As it is required, let us add a very quick description of
our new resource.</p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_26')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_26" class="hljs xml"><span class="hljs-pi">&lt;?xml version="1.0" encoding="ISO-8859-15"?&gt;</span>
<span class="hljs-doctype">&lt;!DOCTYPE resource_def SYSTEM "resource_def.dtd"[]&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">resource_def</span> <span class="hljs-attribute">chip_family</span>=<span class="hljs-value">"0,1"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"Quadrature Decoder"</span> <span class="hljs-attribute">category</span>=<span class="hljs-value">"Utilities"</span> <span class="hljs-attribute">version</span>=<span class="hljs-value">"1.0.0"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">desc</span>&gt;</span>
    <span class="hljs-cdata">&lt;![CDATA[
      This is a collection of Quadrature Decoder utilities.
    ]]&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">desc</span>&gt;</span>
  ...
<span class="hljs-tag">&lt;/<span class="hljs-title">resource_def</span>&gt;</span>
</code></pre><span class="code-title"><p><strong>quadrature_decoder.red</strong> â€“ Added the description element</p>
</span></div></div>
<h2 class="body-heading" id="adding-the-rattr-element">Adding the "rattr" Element<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#adding-the-rattr-element"></a></h2><p>The <code>rattr</code> child element allows us to specify resource specific constants and 
data structure members that will be added together with the resource once used
in a project. </p>
<div class="bs-callout bs-callout-warning "><h4><span class="glyphicon glyphicon-exclamation-sign gi-2x" style="vertical-align: middle; margin-right: 0.2em;"></span><span style="vertical-align: middle;">Hold on, did we just skip over a bunch of elements?
</span></h4>
<p>    Yes we did. In order to limit the scope of this training, and due to the
    expectations on our new resource, we did not need to add the following 
    elements:</p>
<ul>
<li><strong>example</strong> â€“ We do not need to add examples to the resource documentation</li>
<li><strong>chip_family_migration</strong> â€“ We do not need any special migration documentation</li>
<li><strong>module_reg</strong> â€“ The resource will only provide utility type functionality, there is no hardware/software module dependency. </li>
<li><strong>event_trigger</strong> â€“ The resource does not trigger any special event handler code</li>
<li><strong>io_func_ref</strong> â€“ No I/O is used by our new resource</li>
<li><strong>io_array_size</strong> â€“ No I/O is used by our new resource</li>
<li><p><strong>io_usage_count</strong> â€“ No I/O is used by our new resource</p>
<p>Later we will also skip the following elements:</p>
</li>
<li><p><strong>driver_code</strong> â€“ There is no extra C source needed in the generated output</p>
</li>
<li><strong>conversion</strong> â€“ No project conversion needed</li>
<li><strong>enable_resource</strong> â€“ No project conversion needed</li>
</ul>
</div>
<p>As mentioned at the start of <a href="#task-5-ndash-adding-a-new-resource">Task 5</a>, we
want the resource to add two variables, one to keep the count and one to count
number of errors. Following the description in the DTD files, we add the following
to our resource file:</p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_27')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_27" class="hljs xml"><span class="hljs-pi">&lt;?xml version="1.0" encoding="ISO-8859-15"?&gt;</span>
<span class="hljs-doctype">&lt;!DOCTYPE resource_def SYSTEM "resource_def.dtd"[]&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">resource_def</span> <span class="hljs-attribute">chip_family</span>=<span class="hljs-value">"0,1"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"Quadrature Decoder"</span> <span class="hljs-attribute">category</span>=<span class="hljs-value">"Utilities"</span> <span class="hljs-attribute">version</span>=<span class="hljs-value">"1.0.0"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">desc</span>&gt;</span>
    <span class="hljs-cdata">&lt;![CDATA[
      This is a collection of Quadrature Decoder utilities.
    ]]&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">desc</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">rattr</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"output.currentCount"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"dec"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">"struct"</span> <span class="hljs-attribute">scope</span>=<span class="hljs-value">"task"</span> <span class="hljs-attribute">min</span>=<span class="hljs-value">"-32768"</span> <span class="hljs-attribute">max</span>=<span class="hljs-value">"32767"</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-title">rattr</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">rattr</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"output.errorCount"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"dec"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">"struct"</span> <span class="hljs-attribute">scope</span>=<span class="hljs-value">"task"</span> <span class="hljs-attribute">min</span>=<span class="hljs-value">"0"</span> <span class="hljs-attribute">max</span>=<span class="hljs-value">"65535"</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-title">rattr</span>&gt;</span>
  ...
<span class="hljs-tag">&lt;/<span class="hljs-title">resource_def</span>&gt;</span>
</code></pre><span class="code-title"><p><strong>quadrature_decoder.red</strong> â€“ Added resource specific data structure members</p>
</span></div></div>
<p>Looking at the addition to our resource file above, we see that the name 
attribute of the <code>rattr</code> elements look a bit odd. This is because the target 
data structure is pre-pended to the member name. In practice, this means that 
<code>output.currentCount</code> reads "Create a new member inside the <strong>output</strong> structure
named <strong>currentCount</strong>".</p>
<p>The next child element in the list is <code>buffer_count</code> but as we do not wish to
use multi-buffering, we will not add this to our resource file.</p>
<h2 class="body-heading" id="adding-the-asm_code-element">Adding the "asm_code" Element<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#adding-the-asm_code-element"></a></h2><p>The <code>asm_code</code> element allows us to specify assembly code that should be added
to the project when the resource is in use. This element is not always required
<strong>but</strong> as we in this training will later look into making external assembly
files, we want to add in a convenient assembly alias together with the resource:</p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_28')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_28" class="hljs xml"><span class="hljs-pi">&lt;?xml version="1.0" encoding="ISO-8859-15"?&gt;</span>
<span class="hljs-doctype">&lt;!DOCTYPE resource_def SYSTEM "resource_def.dtd"[]&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">resource_def</span> <span class="hljs-attribute">chip_family</span>=<span class="hljs-value">"0,1"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"Quadrature Decoder"</span> <span class="hljs-attribute">category</span>=<span class="hljs-value">"Utilities"</span> <span class="hljs-attribute">version</span>=<span class="hljs-value">"1.0.0"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">desc</span>&gt;</span>
    <span class="hljs-cdata">&lt;![CDATA[
      This is a collection of Quadrature Decoder utilities.
    ]]&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">desc</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">rattr</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"output.currentCount"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"dec"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">"struct"</span> <span class="hljs-attribute">scope</span>=<span class="hljs-value">"task"</span> <span class="hljs-attribute">min</span>=<span class="hljs-value">"-32768"</span> <span class="hljs-attribute">max</span>=<span class="hljs-value">"32767"</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-title">rattr</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">rattr</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"output.errorCount"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"dec"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">"struct"</span> <span class="hljs-attribute">scope</span>=<span class="hljs-value">"task"</span> <span class="hljs-attribute">min</span>=<span class="hljs-value">"0"</span> <span class="hljs-attribute">max</span>=<span class="hljs-value">"65535"</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-title">rattr</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">asm_code</span> <span class="hljs-attribute">usage</span>=<span class="hljs-value">"defines"</span>&gt;</span>
    <span class="hljs-cdata">&lt;![CDATA[
        .alias  qdTaskName            'A{taskName}'
    ]]&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">asm_code</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">resource_def</span>&gt;</span>
</code></pre><span class="code-title"><p><strong>quadrature_decoder.red</strong> â€“ Adding task name assembly define</p>
</span></div></div>
<p>The <code>qdTaskName</code> alias that we just added above can later be used from assembly
to directly access the tasks data structure and members. For example, this alias
could be used to load the value of the <code>currentCount</code> variable by addressing it
directly:</p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_29')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_29" class="hljs nginx"><span class="hljs-title">ld</span>   R0, [<span class="hljs-comment">#qdTaskName/output/currentCount]</span>
</code></pre><span class="code-title"><p><strong>Accessing task data structure members from assembly</strong></p>
</span></div></div>
<p>We are now done writing the resource file. Time to see if it shows up inside 
SCS, like when adding a new procedure, save the file and restart SCS to allow it
to load the new resource file. After the SCS restart, we should be able to find 
the new resource in the list of available task resources:</p>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/scs_custom_resource.png" alt="SCS custom resource" class="img-responsive"></div><p></p>
<p>After adding this to our project, we find in the task code view that
two new data structures members was indeed added to the project:</p>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/scs_custom_resource_variables.png" alt="SCS custom resource variables" class="img-responsive"></div><p></p>
<div class="bs-callout bs-callout-info "><h4><span style="vertical-align: middle;">Mind the color scheme
</span></h4>
<p>    Looking closely at the color of the data structure members, we find that the
    members added explicitly by a resource are colored grey.</p>
</div>
<h1 class="body-heading" id="task-6-ndash-external-assembly-dependencies">Task 6 â€“ External Assembly Dependencies<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#task-6-ndash-external-assembly-dependencies"></a></h1><p>In <a href="#task-3-ndash-adding-procedures-to-existing-resources">Task 3</a> we wrote all
the assembly inside the procedure file. As procedures becomes more complex,
it is sometimes more convenient to move the assembly routines into an external 
assembly file and instead jump to these from the procedure file assembly.</p>
<p>Before we get to writing the external assembly file we will make a quick
addition to our resource file. </p>
<h2 class="body-heading" id="revisiting-the-resource-file">Revisiting the Resource File<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#revisiting-the-resource-file"></a></h2><p>As we want our new procedure to return a status, it would be helpful to have the 
resource file define assembly and task code constants:</p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_30')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_30" class="hljs xml"><span class="hljs-pi">&lt;?xml version="1.0" encoding="ISO-8859-15"?&gt;</span>
<span class="hljs-doctype">&lt;!DOCTYPE resource_def SYSTEM "resource_def.dtd"[]&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">resource_def</span> <span class="hljs-attribute">chip_family</span>=<span class="hljs-value">"0,1"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"Quadrature Decoder"</span> <span class="hljs-attribute">category</span>=<span class="hljs-value">"Utilities"</span> <span class="hljs-attribute">version</span>=<span class="hljs-value">"1.0.0"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">desc</span>&gt;</span>
    <span class="hljs-cdata">&lt;![CDATA[
      This is a collection of Quadrature Decoder utilities.
    ]]&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">desc</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">rattr</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"output.currentCount"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"dec"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">"struct"</span> <span class="hljs-attribute">scope</span>=<span class="hljs-value">"task"</span> <span class="hljs-attribute">min</span>=<span class="hljs-value">"-32768"</span> <span class="hljs-attribute">max</span>=<span class="hljs-value">"32767"</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-title">rattr</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">rattr</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"output.errorCount"</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"dec"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">"struct"</span> <span class="hljs-attribute">scope</span>=<span class="hljs-value">"task"</span> <span class="hljs-attribute">min</span>=<span class="hljs-value">"0"</span> <span class="hljs-attribute">max</span>=<span class="hljs-value">"65535"</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-title">rattr</span>&gt;</span>

  <span class="hljs-tag">&lt;<span class="hljs-title">rattr</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"QD_STATUS_UNCHANGED"</span>  <span class="hljs-attribute">type</span>=<span class="hljs-value">"expr"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">"const"</span> <span class="hljs-attribute">scope</span>=<span class="hljs-value">"task"</span> <span class="hljs-attribute">min</span>=<span class="hljs-value">"0"</span> <span class="hljs-attribute">max</span>=<span class="hljs-value">"3"</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-title">rattr</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">rattr</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"QD_STATUS_INCREMENT"</span>  <span class="hljs-attribute">type</span>=<span class="hljs-value">"expr"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">"const"</span> <span class="hljs-attribute">scope</span>=<span class="hljs-value">"task"</span> <span class="hljs-attribute">min</span>=<span class="hljs-value">"0"</span> <span class="hljs-attribute">max</span>=<span class="hljs-value">"3"</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-title">rattr</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">rattr</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"QD_STATUS_DECREMENT"</span>  <span class="hljs-attribute">type</span>=<span class="hljs-value">"expr"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">"const"</span> <span class="hljs-attribute">scope</span>=<span class="hljs-value">"task"</span> <span class="hljs-attribute">min</span>=<span class="hljs-value">"0"</span> <span class="hljs-attribute">max</span>=<span class="hljs-value">"3"</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-title">rattr</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">rattr</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"QD_STATUS_ERROR"</span>  <span class="hljs-attribute">type</span>=<span class="hljs-value">"expr"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">"const"</span> <span class="hljs-attribute">scope</span>=<span class="hljs-value">"task"</span> <span class="hljs-attribute">min</span>=<span class="hljs-value">"0"</span> <span class="hljs-attribute">max</span>=<span class="hljs-value">"3"</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-title">rattr</span>&gt;</span>

  <span class="hljs-tag">&lt;<span class="hljs-title">asm_code</span> <span class="hljs-attribute">usage</span>=<span class="hljs-value">"defines"</span>&gt;</span>
    <span class="hljs-cdata">&lt;![CDATA[
        .define QD_STATUS_UNCHANGED   0
        .define QD_STATUS_INCREMENT   1
        .define QD_STATUS_DECREMENT   2
        .define QD_STATUS_ERROR       3
        .alias  qdTaskName            'A{taskName}'
    ]]&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">asm_code</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">resource_def</span>&gt;</span>
</code></pre><span class="code-title"><p><strong>quadrature_decoder.red</strong> â€“ Adding task code constants and assembly defines</p>
</span></div></div>
<p>Looking at the updated resource file above, we can see that we added four new 
assembly define as well as four new task code constants. Save and restart SCS 
once again, this should add the four constant above to the projects pre-defined
constants.</p>
<p></p><div class="modal-pop" style="cursor:zoom-in;"><img src="resources/scs_new_constants.png" alt="SCS new constants" class="img-responsive"></div><p></p>
<h2 class="body-heading" id="writing-the-assembly">Writing the Assembly<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#writing-the-assembly"></a></h2><p>We will start by creating the assembly file inside the <code>proc_def</code> folder just 
like in <a href="#task-3-ndash-adding-procedures-to-existing-resources">Task 3</a>. Name
the file <code>quadrature_decoder.asm</code> and open it. The complete assembly routine
that we will use is provided below:</p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_31')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_31" class="hljs javascript">; INPUT PARAMETERS:
;     R1 = New state
;
; RETURN PARAMETERS:
;     R1 = Status
;
; CLOBBERS:
;     R0, R1
qdCountUpdate:
        ; OR <span class="hljs-keyword">in</span> <span class="hljs-keyword">new</span> state <span class="hljs-keyword">with</span> our internal state and load the corresponding
        ; LUT entry
        ld      R0, [#qdInternalLastState]  ; Load internal state
        add     R0, #qdDecisionLut          ; Add LUT offset to the combined value
        ld      R0, [R1+R0]                 ; Load the LUT value

        ; Before we can use R0 to jump, we need to wait at least two cycles due
        ; to pipeline hazards, we use <span class="hljs-keyword">this</span> time to update the internal state variable
        lsl     R1, #<span class="hljs-number">2</span>                  ; Shift <span class="hljs-keyword">new</span> state <span class="hljs-keyword">with</span> <span class="hljs-number">2</span> bits
        st      R1, [#qdInternalLastState]  ; Store the shifted state <span class="hljs-keyword">as</span> our <span class="hljs-keyword">new</span> internal state

        ; It is now safe to jump based on the R0 value
        jmp     R0

    ; New state == old state
    /stateUnchanged:
        ; Nothing to <span class="hljs-keyword">do</span>, just <span class="hljs-keyword">return</span>
        ld      R1, #QD_STATUS_UNCHANGED; <span class="hljs-built_in">Set</span> initial <span class="hljs-keyword">return</span> status to <span class="hljs-string">"QD_STATUS_UNCHANGED"</span>
        rts                         ; Return from subroutine 

    ; State <span class="hljs-string">"positive"</span> changed
    /incrementCount:
        ; Increment the resource count variable
        ld      R0, [#qdTaskName/output/currentCount]
        add     R0, #<span class="hljs-number">1</span>
        st      R0, [#qdTaskName/output/currentCount]
        ld      R1, #QD_STATUS_INCREMENT ; <span class="hljs-built_in">Set</span> initial <span class="hljs-keyword">return</span> status to <span class="hljs-string">"QD_STATUS_INCREMENT"</span>
        rts                              ; Return from subroutine 

    ; State <span class="hljs-string">"negative"</span> changed
    /decrementCount:
        ; Decrement the resource count variable
        ld      R0, [#qdTaskName/output/currentCount]
        add     R0, #-<span class="hljs-number">1</span>
        st      R0, [#qdTaskName/output/currentCount]
        ld      R1, #QD_STATUS_DECREMENT ; <span class="hljs-built_in">Set</span> initial <span class="hljs-keyword">return</span> status to <span class="hljs-string">"QD_STATUS_DECREMENT"</span>
        rts                              ; Return from subroutine 

    ; An invalid state changed
    /errorState:
        ; Increment the resource error variable
        ld      R0, [#qdTaskName/output/errorCount]
        add     R0, #<span class="hljs-number">1</span>
        st      R0, [#qdTaskName/output/errorCount]
        ld      R1, #QD_STATUS_ERROR ; <span class="hljs-built_in">Set</span> initial <span class="hljs-keyword">return</span> status to <span class="hljs-string">"QD_STATUS_ERROR"</span>
        rts                              ; Return from subroutine 


; INTERNAL DATA VARIABLES

; Data variable to hold the store the internal state
qdInternalLastState:
dw      #(<span class="hljs-number">3</span> &lt;&lt; <span class="hljs-number">2</span>) ; Our <span class="hljs-keyword">default</span> state is <span class="hljs-string">"3"</span> 

; Internal jumping LUT <span class="hljs-keyword">for</span> efficient decision making
qdDecisionLut:
dw      #qdCountUpdate/stateUnchanged ; Old state <span class="hljs-string">"0"</span> and <span class="hljs-keyword">new</span> state <span class="hljs-string">"0"</span>
dw      #qdCountUpdate/incrementCount ; Old state <span class="hljs-string">"0"</span> and <span class="hljs-keyword">new</span> state <span class="hljs-string">"1"</span>
dw      #qdCountUpdate/decrementCount ; Old state <span class="hljs-string">"0"</span> and <span class="hljs-keyword">new</span> state <span class="hljs-string">"2"</span>
dw      #qdCountUpdate/errorState     ; Old state <span class="hljs-string">"0"</span> and <span class="hljs-keyword">new</span> state <span class="hljs-string">"3"</span>
dw      #qdCountUpdate/decrementCount ; Old state <span class="hljs-string">"1"</span> and <span class="hljs-keyword">new</span> state <span class="hljs-string">"0"</span>
dw      #qdCountUpdate/stateUnchanged ; Old state <span class="hljs-string">"1"</span> and <span class="hljs-keyword">new</span> state <span class="hljs-string">"1"</span>
dw      #qdCountUpdate/errorState     ; Old state <span class="hljs-string">"1"</span> and <span class="hljs-keyword">new</span> state <span class="hljs-string">"2"</span>
dw      #qdCountUpdate/incrementCount ; Old state <span class="hljs-string">"1"</span> and <span class="hljs-keyword">new</span> state <span class="hljs-string">"3"</span>
dw      #qdCountUpdate/incrementCount ; Old state <span class="hljs-string">"2"</span> and <span class="hljs-keyword">new</span> state <span class="hljs-string">"0"</span>
dw      #qdCountUpdate/errorState     ; Old state <span class="hljs-string">"2"</span> and <span class="hljs-keyword">new</span> state <span class="hljs-string">"1"</span> 
dw      #qdCountUpdate/stateUnchanged ; Old state <span class="hljs-string">"2"</span> and <span class="hljs-keyword">new</span> state <span class="hljs-string">"2"</span>
dw      #qdCountUpdate/decrementCount ; Old state <span class="hljs-string">"2"</span> and <span class="hljs-keyword">new</span> state <span class="hljs-string">"3"</span>
dw      #qdCountUpdate/errorState     ; Old state <span class="hljs-string">"3"</span> and <span class="hljs-keyword">new</span> state <span class="hljs-string">"0"</span>
dw      #qdCountUpdate/decrementCount ; Old state <span class="hljs-string">"3"</span> and <span class="hljs-keyword">new</span> state <span class="hljs-string">"1"</span>
dw      #qdCountUpdate/incrementCount ; Old state <span class="hljs-string">"3"</span> and <span class="hljs-keyword">new</span> state <span class="hljs-string">"2"</span>
dw      #qdCountUpdate/stateUnchanged ; Old state <span class="hljs-string">"3"</span> and <span class="hljs-keyword">new</span> state <span class="hljs-string">"3"</span>
</code></pre><span class="code-title"><p><strong>quadrature_decoder.asm</strong> â€“ Complete external assembly</p>
</span></div></div>
<p>As the goal of the training is not to educate on assembly as a language, we
will not look to close at the actual implementation. We will instead look
at the methodology used inside the routine where internal data variables
and look-up-tables (LUT) are used to speed up execution.</p>
<p>The idea of the assembly routine is to combine the old and new state to a four
bit value that we can use as the LUT key to determine how to branch. The routine
was partly implemented this way for speed, but also to showcase the concept of
keeping internal state inside assembly routines.</p>
<div class="bs-callout bs-callout-info "><h4><span style="vertical-align: middle;">External Assembly does not need Annotations
</span></h4>
<p>    Compared to the assembly code written in the procedure file, the 
    external assembly file do not require the writer to annotate register and
    label usage.</p>
</div>
<h2 class="body-heading" id="creating-a-new-procedure">Creating a New Procedure<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#creating-a-new-procedure"></a></h2><p>With the external assembly in place, we need to add yet another procedure file
in order to use our new assembly routine inside the SCS task code. We 
create a file similar to that of <a href="#task-3-ndash-adding-procedures-to-existing-resources">Task 3</a>
but with a few changes.</p>
<p>Name the new procedure file <code>quadrature_decoder.prd</code> and repeat the steps of 
<a href="#task-3-ndash-adding-procedures-to-existing-resources">Task3</a>. We will give it 
a unique procedure name assign <code>Quadrature Decoder</code> as the only referenced 
resource. Reading the assembly code presented in the previous step, we see that 
register R1 is used as input and output and that R0 is an internal working 
register. This means our procedure file needs one input and return parameter
as well as a internal parameter.</p>
<p>Taking this into consideration, we start to put together the following procedure 
file:</p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_32')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_32" class="hljs xml"><span class="hljs-pi">&lt;?xml version="1.0" encoding="ISO-8859-15"?&gt;</span>
<span class="hljs-doctype">&lt;!DOCTYPE proc_def SYSTEM "proc_def.dtd"[]&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">proc_def</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"qdUpdateCountFromState"</span> <span class="hljs-attribute">version</span>=<span class="hljs-value">"1.0.0"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">desc</span>&gt;</span>
        <span class="hljs-cdata">&lt;![CDATA[
            &lt;p&gt;
            Updates Quadrature Decoder counters based on the input state.
            &lt;/p&gt;
        ]]&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">desc</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">task_resource_ref</span>&gt;</span>Quadrature Decoder<span class="hljs-tag">&lt;/<span class="hljs-title">task_resource_ref</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">impl</span> <span class="hljs-attribute">chip_family</span>=<span class="hljs-value">"0,1"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">param</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"reg"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"newState"</span> <span class="hljs-attribute">reg</span>=<span class="hljs-value">"R1"</span>&gt;</span>New state<span class="hljs-tag">&lt;/<span class="hljs-title">param</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">return</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"status"</span> <span class="hljs-attribute">reg</span>=<span class="hljs-value">"R1"</span>&gt;</span>Update status<span class="hljs-tag">&lt;/<span class="hljs-title">return</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">internal</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"temp0"</span> <span class="hljs-attribute">reg</span>=<span class="hljs-value">"R0"</span>/&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">code</span>&gt;</span>
            <span class="hljs-cdata">&lt;![CDATA[
                ...
            ]]&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">code</span>&gt;</span>
        ...
    <span class="hljs-tag">&lt;/<span class="hljs-title">impl</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">proc_def</span>&gt;</span>
</code></pre><span class="code-title"><p><strong>quadrature_decoder.prd</strong> â€“ Incomplete procedure file</p>
</span></div></div>
<p>Looking at the procedure implemented above, we see that we now use the <code>reg</code> 
attribute of the <code>param</code>, <code>return</code> and <code>internal</code> elements. These register 
assignments must correspond to that of the external assembly file routine. 
We also note that we now got to use the <code>internal</code> element as we need to make 
SCS aware of our new assembly routine <span class="hinted" data-placement="auto top" data-toggle="tooltip" data-html="true" data-original-title="&lt;p&gt;In software context: overwriting the value&lt;/p&gt;
">clobbering</span>
<code>R0</code> in addition to <code>R1</code>.</p>
<p>We now get to accessing our external assembly file from inside the procedure 
file and this is done by adding an assembly file dependency to the <code>impl</code> 
element:</p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_33')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_33" class="hljs xml"><span class="hljs-pi">&lt;?xml version="1.0" encoding="ISO-8859-15"?&gt;</span>
<span class="hljs-doctype">&lt;!DOCTYPE proc_def SYSTEM "proc_def.dtd"[]&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">proc_def</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"qdUpdateCountFromState"</span> <span class="hljs-attribute">version</span>=<span class="hljs-value">"1.0.0"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">desc</span>&gt;</span>
        <span class="hljs-cdata">&lt;![CDATA[
            &lt;p&gt;
            Updates Quadrature Decoder counters based on the input state.
            &lt;/p&gt;
        ]]&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">desc</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">task_resource_ref</span>&gt;</span>Quadrature Decoder<span class="hljs-tag">&lt;/<span class="hljs-title">task_resource_ref</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">impl</span> <span class="hljs-attribute">chip_family</span>=<span class="hljs-value">"0,1"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">param</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"reg"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"newState"</span> <span class="hljs-attribute">reg</span>=<span class="hljs-value">"R1"</span>&gt;</span>New state<span class="hljs-tag">&lt;/<span class="hljs-title">param</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">return</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"status"</span> <span class="hljs-attribute">reg</span>=<span class="hljs-value">"R1"</span>&gt;</span>Update status<span class="hljs-tag">&lt;/<span class="hljs-title">return</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">internal</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"temp0"</span> <span class="hljs-attribute">reg</span>=<span class="hljs-value">"R0"</span>/&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">code</span>&gt;</span>
            <span class="hljs-cdata">&lt;![CDATA[
                ...
            ]]&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">code</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">asm_file_dep</span>&gt;</span>quadrature_decoder.asm<span class="hljs-tag">&lt;/<span class="hljs-title">asm_file_dep</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">impl</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">proc_def</span>&gt;</span>
</code></pre><span class="code-title"><p><strong>quadrature_decoder.prd</strong> â€“ Added external assembly dependency</p>
</span></div></div>
<p>Now that we have included our assembly file as a dependency, we can also jump
to the subroutine from the procedure file:</p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_34')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_34" class="hljs xml"><span class="hljs-pi">&lt;?xml version="1.0" encoding="ISO-8859-15"?&gt;</span>
<span class="hljs-doctype">&lt;!DOCTYPE proc_def SYSTEM "proc_def.dtd"[]&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">proc_def</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"qdUpdateCountFromState"</span> <span class="hljs-attribute">version</span>=<span class="hljs-value">"1.0.0"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">desc</span>&gt;</span>
        <span class="hljs-cdata">&lt;![CDATA[
            &lt;p&gt;
            Updates Quadrature Decoder counters based on the input state.
            &lt;/p&gt;
        ]]&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">desc</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">task_resource_ref</span>&gt;</span>Quadrature Decoder<span class="hljs-tag">&lt;/<span class="hljs-title">task_resource_ref</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">impl</span> <span class="hljs-attribute">chip_family</span>=<span class="hljs-value">"0,1"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">param</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"reg"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"newState"</span> <span class="hljs-attribute">reg</span>=<span class="hljs-value">"R1"</span>&gt;</span>New state<span class="hljs-tag">&lt;/<span class="hljs-title">param</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">return</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"status"</span> <span class="hljs-attribute">reg</span>=<span class="hljs-value">"R1"</span>&gt;</span>Update status<span class="hljs-tag">&lt;/<span class="hljs-title">return</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">internal</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"temp0"</span> <span class="hljs-attribute">reg</span>=<span class="hljs-value">"R0"</span>/&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">code</span>&gt;</span>
            <span class="hljs-cdata">&lt;![CDATA[
              jsr         qdCountUpdate 
            ]]&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">code</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">asm_file_dep</span>&gt;</span>quadrature_decoder.asm<span class="hljs-tag">&lt;/<span class="hljs-title">asm_file_dep</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">impl</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">proc_def</span>&gt;</span>
</code></pre><span class="code-title"><p><strong>quadrature_decoder.prd</strong> â€“ Jumping to external subroutine</p>
</span></div></div>
<p>Finally, we need to add a few parameter references to our procedure file, this
as we need to mark dummy read/write accesses to all of the parameters to avoid
compilation errors and unexpected optimization issues. Input variables typically
need an initial "get" and a final "set" annotation. Clobbered registers need to 
be referenced with an initial "set" and final "get" annotation. This gives us 
the final procedure file:</p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_35')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_35" class="hljs xml"><span class="hljs-pi">&lt;?xml version="1.0" encoding="ISO-8859-15"?&gt;</span>
<span class="hljs-doctype">&lt;!DOCTYPE proc_def SYSTEM "proc_def.dtd"[]&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">proc_def</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"qdUpdateCountFromState"</span> <span class="hljs-attribute">version</span>=<span class="hljs-value">"1.0.0"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">desc</span>&gt;</span>
        <span class="hljs-cdata">&lt;![CDATA[
            &lt;p&gt;
            Updates Quadrature Decoder counters based on the input state.
            &lt;/p&gt;
        ]]&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">desc</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">task_resource_ref</span>&gt;</span>Quadrature Decoder<span class="hljs-tag">&lt;/<span class="hljs-title">task_resource_ref</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">impl</span> <span class="hljs-attribute">chip_family</span>=<span class="hljs-value">"0,1"</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">param</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"reg"</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"newState"</span> <span class="hljs-attribute">reg</span>=<span class="hljs-value">"R1"</span>&gt;</span>New state<span class="hljs-tag">&lt;/<span class="hljs-title">param</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">return</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"status"</span> <span class="hljs-attribute">reg</span>=<span class="hljs-value">"R1"</span>&gt;</span>Update status<span class="hljs-tag">&lt;/<span class="hljs-title">return</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">internal</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"temp0"</span> <span class="hljs-attribute">reg</span>=<span class="hljs-value">"R0"</span>/&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">code</span>&gt;</span>
            <span class="hljs-cdata">&lt;![CDATA[
              ref         RG{newState}
              ref         RS{status}, RS{temp0}

              jsr         qdCountUpdate 

              ref         RG{status}, RG{temp0}
              ref         RS{newState}
            ]]&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">code</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">asm_file_dep</span>&gt;</span>quadrature_decoder.asm<span class="hljs-tag">&lt;/<span class="hljs-title">asm_file_dep</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">impl</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">proc_def</span>&gt;</span>
</code></pre><span class="code-title"><p><strong>quadrature_decoder.prd</strong> â€“ Added procedure annotations</p>
</span></div></div>
<p>We can once more save all our work and restart SCS to find our new 
<code>qdUpdateCountFromState()</code> procedure being available inside the task code view.</p>
<h1 class="body-heading" id="task-7-ndash-quadrature-decoder-implementation-take-three">Task 7 â€“ Quadrature Decoder Implementation, Take Three<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#task-7-ndash-quadrature-decoder-implementation-take-three"></a></h1><p>Like in <a href="#task-4-ndash-quadrature-decoder-implementation-take-two">Task 4</a> we 
update our application code and again to check how this improves our execution
speed:</p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_36')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_36" class="lang-c hljs cpp">U16 end = <span class="hljs-number">0</span>;

<span class="hljs-keyword">do</span> {
    <span class="hljs-comment">// Read input state</span>
    U16 newState;
    gpioGetInputPairState(AUXIO_I_QD_INPUT_A, AUXIO_I_QD_INPUT_B; newState);

    <span class="hljs-comment">// Update Quadrature Decoder count</span>
    U16 returnStatus;
    qdUpdateCountFromState(newState; returnStatus);

    <span class="hljs-comment">// Only log structures if state change</span>
    <span class="hljs-keyword">if</span> (returnStatus != <span class="hljs-number">0</span>) {
        rtlLogStructs(BV_RTL_LOG_OUTPUT | BV_RTL_LOG_STATE);
    }

    <span class="hljs-comment">// Toogle debug LED</span>
    gpioToggleOutput(AUXIO_O_QD_OUTPUT_LED);

    <span class="hljs-comment">// This loop will never break</span>
} <span class="hljs-keyword">while</span>(end == <span class="hljs-number">0</span>);
</code></pre><span class="code-title"><p><strong>Execution Code</strong> â€“ Third quadrature decoder solution</p>
</span></div></div>
<p>At a first glance, we see that our new procedure made our task code a lot smaller.
Like in <a href="#task-4-ndash-quadrature-decoder-implementation-take-two">Task 4</a>, 
make sure that the application still behave as expected before moving on to 
looking at the impact the last few changes did to the final assembly code.
Note that unlike the previous versions, this one keeps the "last state" internal
which means this can't be monitored during testing. Comparation can thus only be
done on the actual result, step and error count.</p>
<h2 class="body-heading" id="looking-at-the-listing-file">Looking at the Listing File<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#looking-at-the-listing-file"></a></h2><p>Let us once more perform a code generation and look at the updated listing file: </p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_37')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_37" class="hljs sql">              /id0073:
              ;?     // Read input state
              ;?     U16 newState;
              ;?     gpioGetInputPairState(AUXIO_I_QD_INPUT_A, AUXIO_I_QD_INPUT_B; newState);
00db <span class="hljs-comment">---- 1000                             ld          R1, #0</span>
00dc <span class="hljs-comment">---- 34be                             iobtst      #(4 &amp; 0x7), [#(IOP_AIODIO0_GPIODIN + (4 &gt;&gt; 3))]</span>
00dd <span class="hljs-comment">---- a601                             biob0       /id0074</span>
00de <span class="hljs-comment">---- 9201                             or          R1, #1</span>
              /id0074:
00df <span class="hljs-comment">---- 27be                             iobtst      #(3 &amp; 0x7), [#(IOP_AIODIO0_GPIODIN + (3 &gt;&gt; 3))]</span>
00e0 <span class="hljs-comment">---- a601                             biob0       /id0075</span>
00e1 <span class="hljs-comment">---- 9202                             or          R1, #2</span>
              /id0075:
              ;?
              ;?     // <span class="hljs-operator"><span class="hljs-keyword">Update</span> Quadrature Decoder <span class="hljs-keyword">count</span>
              ;</span>?     U16 returnStatus;
              ;?     qdUpdateCountFromState(newState; returnStatus);
00e2 <span class="hljs-comment">---- 14f7                             jsr         qdCountUpdate</span>
              ;?
              ;?     // Only log structures if state <span class="hljs-operator"><span class="hljs-keyword">change</span>
              ;</span>?     if (returnStatus != 0) {
00e3 <span class="hljs-comment">---- 9a00                             cmp         R1, #0</span>
00e4 <span class="hljs-comment">---- b604                             beq         /id0080</span>
              ;?         rtlLogStructs(BV_RTL_LOG_OUTPUT | BV_RTL_LOG_STATE);
00e5 <span class="hljs-comment">---- 000c                                 ld          R0, #12</span>
00e6 <span class="hljs-comment">---- 18ab                                 ld          R1, [#(pRtlTaskLogMaskTable + 0)]</span>
00e7 <span class="hljs-comment">---- 8d01                                 and         R0, R1</span>
00e8 <span class="hljs-comment">---- 0caa                                 st          R0, [#(pRtlTaskLogReqTable + 0)]</span>
              ;?     }
              /id0080:
              ;?
              ;?     // Toogle debug LED
              ;?     gpioToggleOutput(AUXIO_O_QD_OUTPUT_LED);
00e9 <span class="hljs-comment">---- 74cb                             iobset      #(12 &amp; 0x7), [#(IOP_AIODIO0_GPIODOUTTGL + (12 &gt;&gt; 3))]</span>
              ;?
              ;?     // This loop will never break
              ;? } while(<span class="hljs-operator"><span class="hljs-keyword">end</span> == <span class="hljs-number">0</span>);</span>
00ea <span class="hljs-comment">---- aa00                         cmp         R2, #0</span>
00eb <span class="hljs-comment">---- b6ef                         beq         /id0073</span>

...

; INPUT PARAMETERS:
;     R1 = New state
;
; RETURN PARAMETERS:
;     R1 = Status
;
; CLOBBERS:
;     R0, R1
qdCountUpdate:
                      ; OR in new state with our internal state and <span class="hljs-operator"><span class="hljs-keyword">load</span> the <span class="hljs-keyword">corresponding</span>
                      ;</span> LUT entry
00f7 <span class="hljs-comment">---- 090f         ld      R0, [#qdInternalLastState]  ; Load internal state</span>
00f8 8601 8810         add     R0, #qdDecisionLut          ; Add LUT offset to the combined value
00fa <span class="hljs-comment">---- 8f19         ld      R0, [R1+R0]                 ; Load the LUT value</span>

                      ; Before we can <span class="hljs-operator"><span class="hljs-keyword">use</span> R0 <span class="hljs-keyword">to</span> jump, we need <span class="hljs-keyword">to</span> wait <span class="hljs-keyword">at</span> <span class="hljs-keyword">least</span> two cycles due
                      ;</span> to pipeline hazards, we <span class="hljs-operator"><span class="hljs-keyword">use</span> this <span class="hljs-keyword">time</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">update</span> the internal state variable
<span class="hljs-number">00</span>fb <span class="hljs-comment">---- 9da2         lsl     R1, #2                  ; Shift new state with 2 bits</span>
<span class="hljs-number">00</span>fc <span class="hljs-comment">---- 1d0f         st      R1, [#qdInternalLastState]  ; Store the shifted state as our new internal state</span>

                      ;</span> It is now safe to jump based on the R0 value
00fd <span class="hljs-comment">---- 8db7         jmp     R0</span>

                  ; New state == old state
                  /stateUnchanged:
                      ; Nothing to <span class="hljs-operator"><span class="hljs-keyword">do</span>, just <span class="hljs-keyword">return</span>
<span class="hljs-number">00</span>fe <span class="hljs-comment">---- 1000         ld      R1, #QD_STATUS_UNCHANGED; Set initial return status to "QD_STATUS_UNCHANGED"</span>
<span class="hljs-number">00</span>ff <span class="hljs-comment">---- adb7         rts                         ; Return from subroutine</span>

                  ;</span> State "positive" changed
                  /incrementCount:
                      ; Increment the resource count variable
0100 <span class="hljs-comment">---- 08b8         ld      R0, [#qdTaskName/output/currentCount]</span>
0101 <span class="hljs-comment">---- 8801         add     R0, #1</span>
0102 <span class="hljs-comment">---- 0cb8         st      R0, [#qdTaskName/output/currentCount]</span>
0103 <span class="hljs-comment">---- 1001         ld      R1, #QD_STATUS_INCREMENT ; Set initial return status to "QD_STATUS_INCREMENT"</span>
0104 <span class="hljs-comment">---- adb7         rts                              ; Return from subroutine</span>

...
</code></pre><span class="code-title"><p><strong>Listing file output</strong>  â€“ Take 3, resulting assembly</p>
</span></div></div>
<p>By counting the instructions that makes up the worst case execution path, we see
that our new resource/procedure enabled us to save an additional 10 instructions
in our sample loop. The new maximum loop instruction count is 29 which means the
new sample loop time is roughly 2.41 us!</p>
<div class="bs-callout bs-callout-success "><h4><span class="glyphicon glyphicon-ok-sign gi-2x" style="vertical-align: middle; margin-right: 0.2em;"></span><span style="vertical-align: middle;">Well now we are for sure done (I can't take it anymore)
</span></h4>
<p>      Let us start by patting our own backs for sticking with the training to 
      the end!</p>
<p>      While our efforts did result in us bringing the sampling time to just 
      about 2.41 us, the last half if it was actually not really required.
      Instead of making a custom resource and procedure to efficiently count
      our state transitions, we could have achieved the same result by just
      writing smart task code. If you are interested in how such a solution
      would look, please continue on with the bonus tasks.</p>
</div>
<p>We have now gone over the very basics of how to create your own procedures and 
resources and how to use these together with the Sensor Controller and SCS. 
There is much more to this then what is covered in this training and it is 
recommended to use the DTD file documentation as well as the pre-existing 
resources and procedures as documentation/templates when needed.</p>
<h1 class="body-heading" id="task-8-ndash-bonus-writing-smart-task-code">Task 8 â€“ BONUS: Writing Smart Task Code<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#task-8-ndash-bonus-writing-smart-task-code"></a></h1><p>While we in our third attempt tried to improve on our application performance
by creating a new resource and yet another procedure, this was actually not
required. By introducing a cleaver LUT to our task code we could write code that 
is as good in terms of performance.</p>
<p>The basic idea behind the new example is to use a 4 entry LUT to check which 
state transition occurred. There is one LUT entry per possible state and the LUT 
value is then shifted right based on new state to retrieve the nibble that
indicates count direction or error transition. The relevant code blocks is found 
below, starting with the <code>Initialization Code</code>.</p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_38')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_38" class="lang-c hljs cpp"><span class="hljs-comment">// Find the initial quadrature state</span>
gpioGetInputPairState(AUXIO_I_A, AUXIO_I_B; state.initQuadratureState);

<span class="hljs-comment">// Create the quadrature state machine look-up table</span>
<span class="hljs-comment">// Valid state transitions are 00 - 01 - 11 - 10 - 00 (2-bit gray-coded wheel).</span>
<span class="hljs-comment">// There is one 16-bit word for each previous quadrature state, with Index n = 0,1,2,3.</span>
<span class="hljs-comment">// The new rotation state selects a nibble in the previous rotation state (1st, 2nd, 3rd or 4th nibble in LUT Fsm[]</span>
<span class="hljs-comment">// This nibble specifies which counter to update:</span>
<span class="hljs-comment">//     - 0x0 = no counter update</span>
<span class="hljs-comment">//     - 0x1 = decrement rotation count</span>
<span class="hljs-comment">//     - 0x2 = increment rotation count</span>
<span class="hljs-comment">//     - 0x4 = increment error count</span>

<span class="hljs-comment">// This LUT [0-3] counts every edge or quarter turn</span>
state.pQuadratureFsm[<span class="hljs-number">0</span>] = <span class="hljs-number">0x4120</span>; <span class="hljs-comment">// Decrement: 00-&gt;10, Increment: 00-&gt;01, Error: 00-&gt;11</span>
state.pQuadratureFsm[<span class="hljs-number">1</span>] = <span class="hljs-number">0x2401</span>; <span class="hljs-comment">// Decrement: 01-&gt;00, Increment: 01-&gt;11, Error: 01-&gt;10</span>
state.pQuadratureFsm[<span class="hljs-number">2</span>] = <span class="hljs-number">0x1042</span>; <span class="hljs-comment">// Decrement: 10-&gt;11, Increment: 10-&gt;00, Error: 10-&gt;01</span>
state.pQuadratureFsm[<span class="hljs-number">3</span>] = <span class="hljs-number">0x0214</span>; <span class="hljs-comment">// Decrement: 11-&gt;01, Increment: 11-&gt;10, Error: 11-&gt;00</span>

fwScheduleTask(<span class="hljs-number">1</span>);
</code></pre><span class="code-title"><p><strong>Initialization Code</strong> â€“ Quadrature Decoder, alternative version</p>
</span></div></div>
<p>As can be seen in the <code>Initialization Code</code> above, this implementation requires 
a <code>pQuadratureFsm</code> array to be added to the project. This array makes up the 
application LUT and is populated once inside the <code>Initialization Code</code>.</p>
<div class="bs-callout bs-callout-default "><h4><span class="glyphicon glyphicon-hand-right gi-2x" style="vertical-align: middle; margin-right: 0.2em;"></span><span style="vertical-align: middle;">Creating arrays
</span></h4>
<p>    A quick reminder on how to create a array inside SCS, you first need to 
    create a constant defining the size of the array!</p>
</div>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_39')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_39" class="lang-c hljs cpp">U16 end = <span class="hljs-number">0</span>;

<span class="hljs-comment">// Using local variables to minimize number of load instructions</span>
U16 stepCount = output.stepCount;
U16 errorCount = output.errorCount;

<span class="hljs-comment">// Get the initial quadrature state</span>
U16 quadratureState = state.initState;

<span class="hljs-keyword">do</span> {
    <span class="hljs-comment">// Find the quadrature FSM entry to be used for this iteration, based on the previous iteration</span>
    U16 n = quadratureState;
    U16 quadratureFsmEntry = state.pQuadratureFsm[n];

    <span class="hljs-comment">// Read input state</span>
    gpioGetInputPairState(AUXIO_I_QD_INPUT_A, AUXIO_I_QD_INPUT_B; quadratureState);

    <span class="hljs-comment">// Find the update action (0, 1, 2 or 4) for edge or error counter</span>
    <span class="hljs-comment">// The new quadrature state selects a nibble (= the update action) in the selected FSM entry</span>
    U16 bvQuadratureUpdate = (quadratureFsmEntry &gt;&gt; (quadratureState &lt;&lt; <span class="hljs-number">2</span>)) &amp; <span class="hljs-number">0xF</span>;

    <span class="hljs-comment">// Count down?</span>
    <span class="hljs-keyword">if</span> (bvQuadratureUpdate == <span class="hljs-number">0x1</span>) {

        <span class="hljs-comment">// Decrement edge counter low part</span>
        stepCount -= <span class="hljs-number">1</span>;
        output.stepCount = stepCount;     

        <span class="hljs-comment">// Log change</span>
        rtlLogStructs(BV_RTL_LOG_OUTPUT | BV_RTL_LOG_STATE);
    <span class="hljs-comment">// Count up?</span>
    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bvQuadratureUpdate == <span class="hljs-number">0x2</span>) {

        <span class="hljs-comment">// Increment edge counter low part</span>
        stepCount += <span class="hljs-number">1</span>;
        output.stepCount = stepCount;

        <span class="hljs-comment">// Log change</span>
        rtlLogStructs(BV_RTL_LOG_OUTPUT | BV_RTL_LOG_STATE);
    <span class="hljs-comment">// Error?</span>
    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bvQuadratureUpdate == <span class="hljs-number">0x4</span>) {

        <span class="hljs-comment">// Increment error counter low part</span>
        errorCount += <span class="hljs-number">1</span>;
        output.errorCount = errorCount;

        <span class="hljs-comment">// Log change</span>
        rtlLogStructs(BV_RTL_LOG_OUTPUT | BV_RTL_LOG_STATE);
    }

    <span class="hljs-comment">// Toogle debug LED</span>
    gpioToggleOutput(AUXIO_O_QD_OUTPUT_LED);

    <span class="hljs-comment">// This loop will never break</span>
} <span class="hljs-keyword">while</span>(end == <span class="hljs-number">0</span>);
</code></pre><span class="code-title"><p><strong>Execution Code</strong> â€“ Quadrature Decoder, alternative version</p>
</span></div></div>
<p>In the <code>Execution Code</code> above, we see that we first load the LUT value based on 
the last state (<code>quadratureState</code>). We the read the next state and modify
the LUT value that previously read out. </p>
<p>Once the modified LUT value is obtained, we check the resulting value to 
determine the action we need to take. Looking at the resulting assembly code 
we get the following, worst case, execution path:</p>
<div style="display:inline-block"><div style="display:block"><button type="button" class="btn btn-xs btn-warning float-right select-text" style="margin: 0; position: relative;" onclick="SelectText('codeBlock_40')">Select text</button></div><div class="pre-container"><pre><code id="codeBlock_40" class="hljs cpp">;? <span class="hljs-keyword">do</span> {
              /id0076:
              ;?     <span class="hljs-comment">// Find the quadrature FSM entry to be used for this iteration, based on the previous iteration</span>
              ;?     U16 n = quadratureState;
              ;?     U16 quadratureFsmEntry = state.pQuadratureFsm[n];
<span class="hljs-number">00</span>eb ---- <span class="hljs-number">40</span>bb                             ld          R4, <span class="hljs-preprocessor">#(quadratureDecoder/state/pQuadratureFsm + 0)</span>
<span class="hljs-number">00</span>ec ---- cf1c                             ld          R4, [R4+R0]
              ;?
              ;?     <span class="hljs-comment">// Read input state</span>
              ;?     gpioGetInputPairState(AUXIO_I_QD_INPUT_A, AUXIO_I_QD_INPUT_B; quadratureState);
<span class="hljs-number">00</span>ed ---- <span class="hljs-number">0000</span>                             ld          R0, <span class="hljs-preprocessor">#0</span>
<span class="hljs-number">00</span>ee ---- <span class="hljs-number">34</span>be                             iobtst      <span class="hljs-preprocessor">#(4 &amp; 0x7), [#(IOP_AIODIO0_GPIODIN + (4 &gt;&gt; 3))]</span>
<span class="hljs-number">00</span>ef ---- a601                             biob0       /id0080
<span class="hljs-number">00f</span>0 ---- <span class="hljs-number">8201</span>                             or          R0, <span class="hljs-preprocessor">#1</span>
              /id0080:
<span class="hljs-number">00f</span>1 ---- <span class="hljs-number">27</span>be                             iobtst      <span class="hljs-preprocessor">#(3 &amp; 0x7), [#(IOP_AIODIO0_GPIODIN + (3 &gt;&gt; 3))]</span>
<span class="hljs-number">00f</span>2 ---- a601                             biob0       /id0081
<span class="hljs-number">00f</span>3 ---- <span class="hljs-number">8202</span>                             or          R0, <span class="hljs-preprocessor">#2</span>
              /id0081:
              ;?
              ;?     <span class="hljs-comment">// Find the update action (0, 1, 2 or 4) for edge or error counter</span>
              ;?     <span class="hljs-comment">// The new quadrature state selects a nibble (= the update action) in the selected FSM entry</span>
              ;?     U16 bvQuadratureUpdate = (quadratureFsmEntry &gt;&gt; (quadratureState &lt;&lt; <span class="hljs-number">2</span>)) &amp; <span class="hljs-number">0xF</span>;
<span class="hljs-number">00f</span>4 ---- dd40                             ld          R5, R0
<span class="hljs-number">00f</span>5 ---- dda2                             lsl         R5, <span class="hljs-preprocessor">#2</span>
<span class="hljs-number">00f</span>6 ---- cd8d                             lsr         R4, R5
<span class="hljs-number">00f</span>7 ---- c00f                             and         R4, <span class="hljs-preprocessor">#15</span>
              ;?
              ;?     <span class="hljs-comment">// Count down?</span>
              ;?     <span class="hljs-keyword">if</span> (bvQuadratureUpdate == <span class="hljs-number">0x1</span>) {
<span class="hljs-number">00f</span>8 ---- ca01                             cmp         R4, <span class="hljs-preprocessor">#1</span>
<span class="hljs-number">00f</span>9 ---- be07                             bneq        /id0085

...

              ;?     <span class="hljs-comment">// Count up?</span>
              ;?     } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bvQuadratureUpdate == <span class="hljs-number">0x2</span>) {
...
              /id0085:
<span class="hljs-number">0101</span> ---- ca02                             cmp         R4, <span class="hljs-preprocessor">#2</span>
<span class="hljs-number">0102</span> ---- be07                             bneq        /id0092

...

              ;?     <span class="hljs-comment">// Error?</span>
              ;?     } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bvQuadratureUpdate == <span class="hljs-number">0x4</span>) {
...
              /id0092:
<span class="hljs-number">010</span>a ---- ca04                             cmp         R4, <span class="hljs-preprocessor">#4</span>
<span class="hljs-number">010</span>b ---- be06                             bneq        /id0099
              ;?
              ;?         <span class="hljs-comment">// Increment error counter low part</span>
              ;?         errorCount += <span class="hljs-number">1</span>;
<span class="hljs-number">010</span>c ---- b801                                 add         R3, <span class="hljs-preprocessor">#1</span>
              ;?         output.errorCount = errorCount;
<span class="hljs-number">010</span>d ---- <span class="hljs-number">3</span>cb8                                 st          R3, [<span class="hljs-preprocessor">#quadratureDecoder/output/errorCount]</span>
              ;?
              ;?         <span class="hljs-comment">// Log change</span>
              ;?         rtlLogStructs(BV_RTL_LOG_OUTPUT | BV_RTL_LOG_STATE);
<span class="hljs-number">010</span>e ---- <span class="hljs-number">400</span>c                                 ld          R4, <span class="hljs-preprocessor">#12</span>
<span class="hljs-number">010f</span> ---- <span class="hljs-number">58</span>ab                                 ld          R5, [<span class="hljs-preprocessor">#(pRtlTaskLogMaskTable + 0)]</span>
<span class="hljs-number">0110</span> ---- cd05                                 and         R4, R5
<span class="hljs-number">0111</span> ---- <span class="hljs-number">4</span>caa                                 st          R4, [<span class="hljs-preprocessor">#(pRtlTaskLogReqTable + 0)]</span>
              ;?     }
              /id0099:
              /id0094:
              /id0087:
              ;?
              ;?     <span class="hljs-comment">// Toogle debug LED</span>
              ;?     gpioToggleOutput(AUXIO_O_QD_OUTPUT_LED);
<span class="hljs-number">0112</span> ---- <span class="hljs-number">74</span>cb                             iobset      <span class="hljs-preprocessor">#(12 &amp; 0x7), [#(IOP_AIODIO0_GPIODOUTTGL + (12 &gt;&gt; 3))]</span>
              ;?
              ;?     <span class="hljs-comment">// This loop will never break</span>
              ;? } <span class="hljs-keyword">while</span>(end == <span class="hljs-number">0</span>);
<span class="hljs-number">0113</span> ---- <span class="hljs-number">9</span>a00                         cmp         R1, <span class="hljs-preprocessor">#0</span>
<span class="hljs-number">0114</span> ---- b6d6                         beq         /id0076
</code></pre><span class="code-title"><p><strong>Final Assembly</strong> â€“ Quadrature Decoder, alternative version assembly</p>
</span></div></div>
<p>Counting the number instructions, we end up at 28 instructions in total, one 
instuction less then in <a href="#task-7-ndash-quadrature-decoder-implementation-take-three">Task 7</a>.
This means that this "Task Code" based solution was more efficient then the 
custom procedure we created for counting our state transitions. </p>
<div class="bs-callout bs-callout-info "><h4><span style="vertical-align: middle;">Both more efficient and felxible? WOW!
</span></h4>
<p>      Not only did we improve (by very litte) the performance by instead writing
      it in task code, we also gained a lot of flexibility doing so! Furthermore,
      the task code version, being written mainly in in C-like code, is easier
      to understand and to maintain.</p>
<p>      Assume the requirements change and we suddenly need out output counters to 
      be 32-bit? Well we can just extend on the code in a simple manner without
      having to go over the effort of changing/re-writing our custom procedures.
      We also got much better control each individual step which means we could 
      debug behavior much easier.</p>
</div>
<p>We have now reached the ultimate end of this training. Good luck in your future 
work with the Sensor Controller and as always, further technical questions can
be asked in the <a href="https://e2e.ti.com/support/wireless_connectivity/">Texas Instruments E2E forum</a>.</p>
<h1 class="body-heading" id="technical-reference-manuals">Technical Reference Manuals<a class="anchor-link glyphicon glyphicon-link" aria-hidden="true" href="#technical-reference-manuals"></a></h1><p>For your convenience, links to the device specific technical reference manuals 
are provided:</p>
<ul>
<li><a href="https://www.ti.com/lit/pdf/swcu117">CC13x0 or CC26x0</a></li>
<li><a href="https://www.ti.com/lit/pdf/swcu185">CC13x2 or CC26x2</a></li>
</ul>
</div><div class="col-xs-4 col-sm-2 sidebar-offcanvas bs-docs-sidebar hidden-print" id="sidebar-overview"><ul class="nav nav-stacked fixed" id="sidebar"><li><a href="#introduction">Introduction</a></li><li><a href="#prerequisites">Prerequisites</a><ul class="nav nav-stacked"><li><a href="#completed-material">Completed Material</a></li><li><a href="#software-for-desktop-development">Software for Desktop Development</a></li><li><a href="#hardware">Hardware</a></li></ul></li><li><a href="#getting-started">Getting started</a><ul class="nav nav-stacked"><li><a href="#resources">Resources</a></li><li><a href="#procedures">Procedures</a></li><li><a href="#software-setup">Software Setup</a></li></ul></li><li><a href="#task-1-ndash-create-and-setup-scs-project">Task 1 â€“ Create and Setup SCS Project</a><ul class="nav nav-stacked"><li><a href="#i-o-mapping">I/O Mapping</a></li></ul></li><li><a href="#task-2-ndash-initial-quadrature-decoder-implementation">Task 2 â€“ Initial Quadrature Decoder Implementation</a><ul class="nav nav-stacked"><li><a href="#quadrature-encoded-signals">Quadrature Encoded Signals</a></li><li><a href="#adding-data-structure-members">Adding Data Structure Members</a></li><li><a href="#initialization-code">Initialization Code</a></li><li><a href="#execution-code">Execution Code</a></li><li><a href="#testing-the-code">Testing the Code</a></li><li><a href="#digging-into-the-assembly-code">Digging into the Assembly Code</a></li></ul></li><li><a href="#task-3-ndash-adding-procedures-to-existing-resources">Task 3 â€“ Adding Procedures to Existing Resources</a><ul class="nav nav-stacked"><li><a href="#creating-a-procedure-file">Creating a Procedure File</a></li><li><a href="#adding-the-proc_def-element">Adding the "proc_def" Element</a></li><li><a href="#adding-the-desc-child">Adding the "desc" Child</a></li><li><a href="#adding-the-task_resource_ref-child">Adding the "task_resource_ref" Child</a></li><li><a href="#adding-the-impl-child">Adding the "impl" Child</a></li><li><a href="#defining-procedure-input-and-output-arguments">Defining Procedure Input and Output Arguments</a></li><li><a href="#writing-mockup-assembly">Writing Mockup Assembly</a></li><li><a href="#going-from-mockup-assembly-to-procedure-assembly">Going from Mockup Assembly to Procedure Assembly</a></li><li><a href="#finishing-up-the-new-procedure">Finishing up the New Procedure</a></li></ul></li><li><a href="#task-4-ndash-quadrature-decoder-implementation-take-two">Task 4 â€“ Quadrature Decoder Implementation, Take Two</a><ul class="nav nav-stacked"><li><a href="#looking-at-the-listing-file">Looking at the Listing File</a></li></ul></li><li><a href="#coffee-break-">Coffee Break!</a></li><li><a href="#task-5-ndash-adding-a-new-resource">Task 5 â€“ Adding A New Resource</a><ul class="nav nav-stacked"><li><a href="#creating-a-resource-file">Creating a Resource File</a></li><li><a href="#adding-the-resource_def-element">Adding the "resource_def" Element</a></li><li><a href="#adding-the-desc-element">Adding the "desc" Element</a></li><li><a href="#adding-the-rattr-element">Adding the "rattr" Element</a></li><li><a href="#adding-the-asm_code-element">Adding the "asm_code" Element</a></li></ul></li><li><a href="#task-6-ndash-external-assembly-dependencies">Task 6 â€“ External Assembly Dependencies</a><ul class="nav nav-stacked"><li><a href="#revisiting-the-resource-file">Revisiting the Resource File</a></li><li><a href="#writing-the-assembly">Writing the Assembly</a></li><li><a href="#creating-a-new-procedure">Creating a New Procedure</a></li></ul></li><li><a href="#task-7-ndash-quadrature-decoder-implementation-take-three">Task 7 â€“ Quadrature Decoder Implementation, Take Three</a><ul class="nav nav-stacked"><li><a href="#looking-at-the-listing-file">Looking at the Listing File</a></li></ul></li><li><a href="#task-8-ndash-bonus-writing-smart-task-code">Task 8 â€“ BONUS: Writing Smart Task Code</a></li><li><a href="#technical-reference-manuals">Technical Reference Manuals</a></li></ul></div></div></div></div>
<div align="center" style="margin-top: 4em;">
<a rel="license" href="https://creativecommons.org/licenses/by-nc-nd/4.0/"><img alt="Creative Commons License" style="border-width:0" src="../../../web_support/cc_license_icon.png"></a><br>This work is licensed under a <a rel="license" href="https://creativecommons.org/licenses/by-nc-nd/4.0/">Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License</a>.</div>
<link rel="stylesheet" href="../../../web_support/highlight/styles/zenburn.css">
<script src="../../../web_support/strapdown/vendor/jquery-1.11.2.min.js"></script>
<script src="../../../web_support/strapdown/vendor/bootstrap.min.js"></script>
<script src="../../../web_support/highlight/highlight.pack.js"></script>
<script type="text/javascript">document.isPreRendered = true;</script><script src="../../../web_support/strapdown/v/0.2/strapdown.js"></script>      <div class="modal" id="imagemodal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">        <div class="vertical-alignment-helper">          <div class="modal-dialog vertical-align-center">             <div class="modal-dialog">               <div class="modal-content" style="margin-left: auto;margin-right: auto;">                 <div class="modal-body">                   <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">Ã—</span><span class="sr-only">Close</span></button>                   <img src="" class="imagepreview img-responsive">                 </div>              </div>            </div>          </div>        </div>      </div>

</body></html>